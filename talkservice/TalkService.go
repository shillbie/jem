// Autogenerated by Thrift Compiler (0.13.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package talkservice

import(
	"bytes"
	"context"
	"reflect"
	"database/sql/driver"
	"errors"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

type AppType int64
const (
  AppType_IOS AppType = 16
  AppType_IOS_RC AppType = 17
  AppType_IOS_BETA AppType = 18
  AppType_IOS_ALPHA AppType = 19
  AppType_ANDROID AppType = 32
  AppType_ANDROID_RC AppType = 33
  AppType_ANDROID_BETA AppType = 34
  AppType_ANDROID_ALPHA AppType = 35
  AppType_WAP AppType = 48
  AppType_WAP_RC AppType = 49
  AppType_WAP_BETA AppType = 50
  AppType_WAP_ALPHA AppType = 51
  AppType_BOT AppType = 64
  AppType_BOT_RC AppType = 65
  AppType_BOT_BETA AppType = 66
  AppType_BOT_ALPHA AppType = 67
  AppType_WEB AppType = 80
  AppType_WEB_RC AppType = 81
  AppType_WEB_BETA AppType = 82
  AppType_WEB_ALPHA AppType = 83
  AppType_DESKTOPWIN AppType = 96
  AppType_DESKTOPWIN_RC AppType = 97
  AppType_DESKTOPWIN_BETA AppType = 98
  AppType_DESKTOPWIN_ALPHA AppType = 99
  AppType_DESKTOPMAC AppType = 112
  AppType_DESKTOPMAC_RC AppType = 113
  AppType_DESKTOPMAC_BETA AppType = 114
  AppType_DESKTOPMAC_ALPHA AppType = 115
  AppType_CHANNELGW AppType = 128
  AppType_CHANNELGW_RC AppType = 129
  AppType_CHANNELGW_BETA AppType = 130
  AppType_CHANNELGW_ALPHA AppType = 131
  AppType_CHANNELCP AppType = 144
  AppType_CHANNELCP_RC AppType = 145
  AppType_CHANNELCP_BETA AppType = 146
  AppType_CHANNELCP_ALPHA AppType = 147
  AppType_WINPHONE AppType = 160
  AppType_WINPHONE_RC AppType = 161
  AppType_WINPHONE_BETA AppType = 162
  AppType_WINPHONE_ALPHA AppType = 163
  AppType_BLACKBERRY AppType = 176
  AppType_BLACKBERRY_RC AppType = 177
  AppType_BLACKBERRY_BETA AppType = 178
  AppType_BLACKBERRY_ALPHA AppType = 179
  AppType_WINMETRO AppType = 192
  AppType_WINMETRO_RC AppType = 193
  AppType_WINMETRO_BETA AppType = 194
  AppType_WINMETRO_ALPHA AppType = 195
  AppType_S40 AppType = 40
  AppType_CHRONO AppType = 224
  AppType_CHRONO_RC AppType = 225
  AppType_CHRONO_BETA AppType = 226
  AppType_CHRONO_ALPHA AppType = 227
  AppType_TIZEN AppType = 256
  AppType_TIZEN_RC AppType = 257
  AppType_TIZEN_BETA AppType = 258
  AppType_TIZEN_ALPHA AppType = 259
  AppType_VIRTUAL AppType = 272
  AppType_FIREFOXOS AppType = 288
  AppType_FIREFOXOS_RC AppType = 289
  AppType_FIREFOXOS_BETA AppType = 290
  AppType_FIREFOXOS_ALPHA AppType = 291
  AppType_IOSIPAD AppType = 304
  AppType_IOSIPAD_RC AppType = 305
  AppType_IOSIPAD_BETA AppType = 306
  AppType_IOSIPAD_ALPHA AppType = 307
  AppType_BIZIOS AppType = 320
  AppType_BIZIOS_RC AppType = 321
  AppType_BIZIOS_BETA AppType = 322
  AppType_BIZIOS_ALPHA AppType = 323
  AppType_BIZANDROID AppType = 336
  AppType_BIZANDROID_RC AppType = 337
  AppType_BIZANDROID_BETA AppType = 338
  AppType_BIZANDROID_ALPHA AppType = 339
  AppType_BIZBOT AppType = 352
  AppType_BIZBOT_RC AppType = 353
  AppType_BIZBOT_BETA AppType = 354
  AppType_BIZBOT_ALPHA AppType = 355
  AppType_CHROMEOS AppType = 368
  AppType_CHROMEOS_RC AppType = 369
  AppType_CHROMEOS_BETA AppType = 370
  AppType_CHROMEOS_ALPHA AppType = 371
  AppType_ANDROIDLITE AppType = 384
  AppType_ANDROIDLITE_RC AppType = 385
  AppType_ANDROIDLITE_BETA AppType = 386
  AppType_ANDROIDLITE_ALPHA AppType = 387
  AppType_WIN10 AppType = 10
  AppType_BIZWEB AppType = 416
  AppType_BIZWEB_RC AppType = 417
  AppType_BIZWEB_BETA AppType = 418
  AppType_BIZWEB_ALPHA AppType = 419
  AppType_DUMMYPRIMARY AppType = 432
  AppType_DUMMYPRIMARY_RC AppType = 433
  AppType_DUMMYPRIMARY_BETA AppType = 434
  AppType_DUMMYPRIMARY_ALPHA AppType = 435
  AppType_SQUARE AppType = 448
  AppType_SQUARE_RC AppType = 449
  AppType_SQUARE_BETA AppType = 450
  AppType_SQUARE_ALPHA AppType = 451
  AppType_INTERNAL AppType = 464
  AppType_INTERNAL_RC AppType = 465
  AppType_INTERNAL_BETA AppType = 466
  AppType_INTERNAL_ALPHA AppType = 467
  AppType_CLOVAFRIENDS AppType = 480
  AppType_CLOVAFRIENDS_RC AppType = 481
  AppType_CLOVAFRIENDS_BETA AppType = 482
  AppType_CLOVAFRIENDS_ALPHA AppType = 483
  AppType_WATCHOS AppType = 496
  AppType_WATCHOS_RC AppType = 497
  AppType_WATCHOS_BETA AppType = 498
  AppType_WATCHOS_ALPHA AppType = 499
)

func (p AppType) String() string {
  switch p {
  case AppType_IOS: return "IOS"
  case AppType_IOS_RC: return "IOS_RC"
  case AppType_IOS_BETA: return "IOS_BETA"
  case AppType_IOS_ALPHA: return "IOS_ALPHA"
  case AppType_ANDROID: return "ANDROID"
  case AppType_ANDROID_RC: return "ANDROID_RC"
  case AppType_ANDROID_BETA: return "ANDROID_BETA"
  case AppType_ANDROID_ALPHA: return "ANDROID_ALPHA"
  case AppType_WAP: return "WAP"
  case AppType_WAP_RC: return "WAP_RC"
  case AppType_WAP_BETA: return "WAP_BETA"
  case AppType_WAP_ALPHA: return "WAP_ALPHA"
  case AppType_BOT: return "BOT"
  case AppType_BOT_RC: return "BOT_RC"
  case AppType_BOT_BETA: return "BOT_BETA"
  case AppType_BOT_ALPHA: return "BOT_ALPHA"
  case AppType_WEB: return "WEB"
  case AppType_WEB_RC: return "WEB_RC"
  case AppType_WEB_BETA: return "WEB_BETA"
  case AppType_WEB_ALPHA: return "WEB_ALPHA"
  case AppType_DESKTOPWIN: return "DESKTOPWIN"
  case AppType_DESKTOPWIN_RC: return "DESKTOPWIN_RC"
  case AppType_DESKTOPWIN_BETA: return "DESKTOPWIN_BETA"
  case AppType_DESKTOPWIN_ALPHA: return "DESKTOPWIN_ALPHA"
  case AppType_DESKTOPMAC: return "DESKTOPMAC"
  case AppType_DESKTOPMAC_RC: return "DESKTOPMAC_RC"
  case AppType_DESKTOPMAC_BETA: return "DESKTOPMAC_BETA"
  case AppType_DESKTOPMAC_ALPHA: return "DESKTOPMAC_ALPHA"
  case AppType_CHANNELGW: return "CHANNELGW"
  case AppType_CHANNELGW_RC: return "CHANNELGW_RC"
  case AppType_CHANNELGW_BETA: return "CHANNELGW_BETA"
  case AppType_CHANNELGW_ALPHA: return "CHANNELGW_ALPHA"
  case AppType_CHANNELCP: return "CHANNELCP"
  case AppType_CHANNELCP_RC: return "CHANNELCP_RC"
  case AppType_CHANNELCP_BETA: return "CHANNELCP_BETA"
  case AppType_CHANNELCP_ALPHA: return "CHANNELCP_ALPHA"
  case AppType_WINPHONE: return "WINPHONE"
  case AppType_WINPHONE_RC: return "WINPHONE_RC"
  case AppType_WINPHONE_BETA: return "WINPHONE_BETA"
  case AppType_WINPHONE_ALPHA: return "WINPHONE_ALPHA"
  case AppType_BLACKBERRY: return "BLACKBERRY"
  case AppType_BLACKBERRY_RC: return "BLACKBERRY_RC"
  case AppType_BLACKBERRY_BETA: return "BLACKBERRY_BETA"
  case AppType_BLACKBERRY_ALPHA: return "BLACKBERRY_ALPHA"
  case AppType_WINMETRO: return "WINMETRO"
  case AppType_WINMETRO_RC: return "WINMETRO_RC"
  case AppType_WINMETRO_BETA: return "WINMETRO_BETA"
  case AppType_WINMETRO_ALPHA: return "WINMETRO_ALPHA"
  case AppType_S40: return "S40"
  case AppType_CHRONO: return "CHRONO"
  case AppType_CHRONO_RC: return "CHRONO_RC"
  case AppType_CHRONO_BETA: return "CHRONO_BETA"
  case AppType_CHRONO_ALPHA: return "CHRONO_ALPHA"
  case AppType_TIZEN: return "TIZEN"
  case AppType_TIZEN_RC: return "TIZEN_RC"
  case AppType_TIZEN_BETA: return "TIZEN_BETA"
  case AppType_TIZEN_ALPHA: return "TIZEN_ALPHA"
  case AppType_VIRTUAL: return "VIRTUAL"
  case AppType_FIREFOXOS: return "FIREFOXOS"
  case AppType_FIREFOXOS_RC: return "FIREFOXOS_RC"
  case AppType_FIREFOXOS_BETA: return "FIREFOXOS_BETA"
  case AppType_FIREFOXOS_ALPHA: return "FIREFOXOS_ALPHA"
  case AppType_IOSIPAD: return "IOSIPAD"
  case AppType_IOSIPAD_RC: return "IOSIPAD_RC"
  case AppType_IOSIPAD_BETA: return "IOSIPAD_BETA"
  case AppType_IOSIPAD_ALPHA: return "IOSIPAD_ALPHA"
  case AppType_BIZIOS: return "BIZIOS"
  case AppType_BIZIOS_RC: return "BIZIOS_RC"
  case AppType_BIZIOS_BETA: return "BIZIOS_BETA"
  case AppType_BIZIOS_ALPHA: return "BIZIOS_ALPHA"
  case AppType_BIZANDROID: return "BIZANDROID"
  case AppType_BIZANDROID_RC: return "BIZANDROID_RC"
  case AppType_BIZANDROID_BETA: return "BIZANDROID_BETA"
  case AppType_BIZANDROID_ALPHA: return "BIZANDROID_ALPHA"
  case AppType_BIZBOT: return "BIZBOT"
  case AppType_BIZBOT_RC: return "BIZBOT_RC"
  case AppType_BIZBOT_BETA: return "BIZBOT_BETA"
  case AppType_BIZBOT_ALPHA: return "BIZBOT_ALPHA"
  case AppType_CHROMEOS: return "CHROMEOS"
  case AppType_CHROMEOS_RC: return "CHROMEOS_RC"
  case AppType_CHROMEOS_BETA: return "CHROMEOS_BETA"
  case AppType_CHROMEOS_ALPHA: return "CHROMEOS_ALPHA"
  case AppType_ANDROIDLITE: return "ANDROIDLITE"
  case AppType_ANDROIDLITE_RC: return "ANDROIDLITE_RC"
  case AppType_ANDROIDLITE_BETA: return "ANDROIDLITE_BETA"
  case AppType_ANDROIDLITE_ALPHA: return "ANDROIDLITE_ALPHA"
  case AppType_WIN10: return "WIN10"
  case AppType_BIZWEB: return "BIZWEB"
  case AppType_BIZWEB_RC: return "BIZWEB_RC"
  case AppType_BIZWEB_BETA: return "BIZWEB_BETA"
  case AppType_BIZWEB_ALPHA: return "BIZWEB_ALPHA"
  case AppType_DUMMYPRIMARY: return "DUMMYPRIMARY"
  case AppType_DUMMYPRIMARY_RC: return "DUMMYPRIMARY_RC"
  case AppType_DUMMYPRIMARY_BETA: return "DUMMYPRIMARY_BETA"
  case AppType_DUMMYPRIMARY_ALPHA: return "DUMMYPRIMARY_ALPHA"
  case AppType_SQUARE: return "SQUARE"
  case AppType_SQUARE_RC: return "SQUARE_RC"
  case AppType_SQUARE_BETA: return "SQUARE_BETA"
  case AppType_SQUARE_ALPHA: return "SQUARE_ALPHA"
  case AppType_INTERNAL: return "INTERNAL"
  case AppType_INTERNAL_RC: return "INTERNAL_RC"
  case AppType_INTERNAL_BETA: return "INTERNAL_BETA"
  case AppType_INTERNAL_ALPHA: return "INTERNAL_ALPHA"
  case AppType_CLOVAFRIENDS: return "CLOVAFRIENDS"
  case AppType_CLOVAFRIENDS_RC: return "CLOVAFRIENDS_RC"
  case AppType_CLOVAFRIENDS_BETA: return "CLOVAFRIENDS_BETA"
  case AppType_CLOVAFRIENDS_ALPHA: return "CLOVAFRIENDS_ALPHA"
  case AppType_WATCHOS: return "WATCHOS"
  case AppType_WATCHOS_RC: return "WATCHOS_RC"
  case AppType_WATCHOS_BETA: return "WATCHOS_BETA"
  case AppType_WATCHOS_ALPHA: return "WATCHOS_ALPHA"
  }
  return "<UNSET>"
}

func AppTypeFromString(s string) (AppType, error) {
  switch s {
  case "IOS": return AppType_IOS, nil 
  case "IOS_RC": return AppType_IOS_RC, nil 
  case "IOS_BETA": return AppType_IOS_BETA, nil 
  case "IOS_ALPHA": return AppType_IOS_ALPHA, nil 
  case "ANDROID": return AppType_ANDROID, nil 
  case "ANDROID_RC": return AppType_ANDROID_RC, nil 
  case "ANDROID_BETA": return AppType_ANDROID_BETA, nil 
  case "ANDROID_ALPHA": return AppType_ANDROID_ALPHA, nil 
  case "WAP": return AppType_WAP, nil 
  case "WAP_RC": return AppType_WAP_RC, nil 
  case "WAP_BETA": return AppType_WAP_BETA, nil 
  case "WAP_ALPHA": return AppType_WAP_ALPHA, nil 
  case "BOT": return AppType_BOT, nil 
  case "BOT_RC": return AppType_BOT_RC, nil 
  case "BOT_BETA": return AppType_BOT_BETA, nil 
  case "BOT_ALPHA": return AppType_BOT_ALPHA, nil 
  case "WEB": return AppType_WEB, nil 
  case "WEB_RC": return AppType_WEB_RC, nil 
  case "WEB_BETA": return AppType_WEB_BETA, nil 
  case "WEB_ALPHA": return AppType_WEB_ALPHA, nil 
  case "DESKTOPWIN": return AppType_DESKTOPWIN, nil 
  case "DESKTOPWIN_RC": return AppType_DESKTOPWIN_RC, nil 
  case "DESKTOPWIN_BETA": return AppType_DESKTOPWIN_BETA, nil 
  case "DESKTOPWIN_ALPHA": return AppType_DESKTOPWIN_ALPHA, nil 
  case "DESKTOPMAC": return AppType_DESKTOPMAC, nil 
  case "DESKTOPMAC_RC": return AppType_DESKTOPMAC_RC, nil 
  case "DESKTOPMAC_BETA": return AppType_DESKTOPMAC_BETA, nil 
  case "DESKTOPMAC_ALPHA": return AppType_DESKTOPMAC_ALPHA, nil 
  case "CHANNELGW": return AppType_CHANNELGW, nil 
  case "CHANNELGW_RC": return AppType_CHANNELGW_RC, nil 
  case "CHANNELGW_BETA": return AppType_CHANNELGW_BETA, nil 
  case "CHANNELGW_ALPHA": return AppType_CHANNELGW_ALPHA, nil 
  case "CHANNELCP": return AppType_CHANNELCP, nil 
  case "CHANNELCP_RC": return AppType_CHANNELCP_RC, nil 
  case "CHANNELCP_BETA": return AppType_CHANNELCP_BETA, nil 
  case "CHANNELCP_ALPHA": return AppType_CHANNELCP_ALPHA, nil 
  case "WINPHONE": return AppType_WINPHONE, nil 
  case "WINPHONE_RC": return AppType_WINPHONE_RC, nil 
  case "WINPHONE_BETA": return AppType_WINPHONE_BETA, nil 
  case "WINPHONE_ALPHA": return AppType_WINPHONE_ALPHA, nil 
  case "BLACKBERRY": return AppType_BLACKBERRY, nil 
  case "BLACKBERRY_RC": return AppType_BLACKBERRY_RC, nil 
  case "BLACKBERRY_BETA": return AppType_BLACKBERRY_BETA, nil 
  case "BLACKBERRY_ALPHA": return AppType_BLACKBERRY_ALPHA, nil 
  case "WINMETRO": return AppType_WINMETRO, nil 
  case "WINMETRO_RC": return AppType_WINMETRO_RC, nil 
  case "WINMETRO_BETA": return AppType_WINMETRO_BETA, nil 
  case "WINMETRO_ALPHA": return AppType_WINMETRO_ALPHA, nil 
  case "S40": return AppType_S40, nil 
  case "CHRONO": return AppType_CHRONO, nil 
  case "CHRONO_RC": return AppType_CHRONO_RC, nil 
  case "CHRONO_BETA": return AppType_CHRONO_BETA, nil 
  case "CHRONO_ALPHA": return AppType_CHRONO_ALPHA, nil 
  case "TIZEN": return AppType_TIZEN, nil 
  case "TIZEN_RC": return AppType_TIZEN_RC, nil 
  case "TIZEN_BETA": return AppType_TIZEN_BETA, nil 
  case "TIZEN_ALPHA": return AppType_TIZEN_ALPHA, nil 
  case "VIRTUAL": return AppType_VIRTUAL, nil 
  case "FIREFOXOS": return AppType_FIREFOXOS, nil 
  case "FIREFOXOS_RC": return AppType_FIREFOXOS_RC, nil 
  case "FIREFOXOS_BETA": return AppType_FIREFOXOS_BETA, nil 
  case "FIREFOXOS_ALPHA": return AppType_FIREFOXOS_ALPHA, nil 
  case "IOSIPAD": return AppType_IOSIPAD, nil 
  case "IOSIPAD_RC": return AppType_IOSIPAD_RC, nil 
  case "IOSIPAD_BETA": return AppType_IOSIPAD_BETA, nil 
  case "IOSIPAD_ALPHA": return AppType_IOSIPAD_ALPHA, nil 
  case "BIZIOS": return AppType_BIZIOS, nil 
  case "BIZIOS_RC": return AppType_BIZIOS_RC, nil 
  case "BIZIOS_BETA": return AppType_BIZIOS_BETA, nil 
  case "BIZIOS_ALPHA": return AppType_BIZIOS_ALPHA, nil 
  case "BIZANDROID": return AppType_BIZANDROID, nil 
  case "BIZANDROID_RC": return AppType_BIZANDROID_RC, nil 
  case "BIZANDROID_BETA": return AppType_BIZANDROID_BETA, nil 
  case "BIZANDROID_ALPHA": return AppType_BIZANDROID_ALPHA, nil 
  case "BIZBOT": return AppType_BIZBOT, nil 
  case "BIZBOT_RC": return AppType_BIZBOT_RC, nil 
  case "BIZBOT_BETA": return AppType_BIZBOT_BETA, nil 
  case "BIZBOT_ALPHA": return AppType_BIZBOT_ALPHA, nil 
  case "CHROMEOS": return AppType_CHROMEOS, nil 
  case "CHROMEOS_RC": return AppType_CHROMEOS_RC, nil 
  case "CHROMEOS_BETA": return AppType_CHROMEOS_BETA, nil 
  case "CHROMEOS_ALPHA": return AppType_CHROMEOS_ALPHA, nil 
  case "ANDROIDLITE": return AppType_ANDROIDLITE, nil 
  case "ANDROIDLITE_RC": return AppType_ANDROIDLITE_RC, nil 
  case "ANDROIDLITE_BETA": return AppType_ANDROIDLITE_BETA, nil 
  case "ANDROIDLITE_ALPHA": return AppType_ANDROIDLITE_ALPHA, nil 
  case "WIN10": return AppType_WIN10, nil 
  case "BIZWEB": return AppType_BIZWEB, nil 
  case "BIZWEB_RC": return AppType_BIZWEB_RC, nil 
  case "BIZWEB_BETA": return AppType_BIZWEB_BETA, nil 
  case "BIZWEB_ALPHA": return AppType_BIZWEB_ALPHA, nil 
  case "DUMMYPRIMARY": return AppType_DUMMYPRIMARY, nil 
  case "DUMMYPRIMARY_RC": return AppType_DUMMYPRIMARY_RC, nil 
  case "DUMMYPRIMARY_BETA": return AppType_DUMMYPRIMARY_BETA, nil 
  case "DUMMYPRIMARY_ALPHA": return AppType_DUMMYPRIMARY_ALPHA, nil 
  case "SQUARE": return AppType_SQUARE, nil 
  case "SQUARE_RC": return AppType_SQUARE_RC, nil 
  case "SQUARE_BETA": return AppType_SQUARE_BETA, nil 
  case "SQUARE_ALPHA": return AppType_SQUARE_ALPHA, nil 
  case "INTERNAL": return AppType_INTERNAL, nil 
  case "INTERNAL_RC": return AppType_INTERNAL_RC, nil 
  case "INTERNAL_BETA": return AppType_INTERNAL_BETA, nil 
  case "INTERNAL_ALPHA": return AppType_INTERNAL_ALPHA, nil 
  case "CLOVAFRIENDS": return AppType_CLOVAFRIENDS, nil 
  case "CLOVAFRIENDS_RC": return AppType_CLOVAFRIENDS_RC, nil 
  case "CLOVAFRIENDS_BETA": return AppType_CLOVAFRIENDS_BETA, nil 
  case "CLOVAFRIENDS_ALPHA": return AppType_CLOVAFRIENDS_ALPHA, nil 
  case "WATCHOS": return AppType_WATCHOS, nil 
  case "WATCHOS_RC": return AppType_WATCHOS_RC, nil 
  case "WATCHOS_BETA": return AppType_WATCHOS_BETA, nil 
  case "WATCHOS_ALPHA": return AppType_WATCHOS_ALPHA, nil 
  }
  return AppType(0), fmt.Errorf("not a valid AppType string")
}


func AppTypePtr(v AppType) *AppType { return &v }

func (p AppType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *AppType) UnmarshalText(text []byte) error {
q, err := AppTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *AppType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = AppType(v)
return nil
}

func (p * AppType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type ChatType int64
const (
  ChatType_GROUP ChatType = 0
  ChatType_ROOM ChatType = 1
  ChatType_PEER ChatType = 2
)

func (p ChatType) String() string {
  switch p {
  case ChatType_GROUP: return "GROUP"
  case ChatType_ROOM: return "ROOM"
  case ChatType_PEER: return "PEER"
  }
  return "<UNSET>"
}

func ChatTypeFromString(s string) (ChatType, error) {
  switch s {
  case "GROUP": return ChatType_GROUP, nil 
  case "ROOM": return ChatType_ROOM, nil 
  case "PEER": return ChatType_PEER, nil 
  }
  return ChatType(0), fmt.Errorf("not a valid ChatType string")
}


func ChatTypePtr(v ChatType) *ChatType { return &v }

func (p ChatType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *ChatType) UnmarshalText(text []byte) error {
q, err := ChatTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *ChatType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = ChatType(v)
return nil
}

func (p * ChatType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type ContactType int64
const (
  ContactType_MID ContactType = 0
  ContactType_PHONE ContactType = 1
  ContactType_EMAIL ContactType = 2
  ContactType_USERID ContactType = 3
  ContactType_PROXIMITY ContactType = 4
  ContactType_GROUP ContactType = 5
  ContactType_USER ContactType = 6
  ContactType_QRCODE ContactType = 7
  ContactType_PROMOTION_BOT ContactType = 8
  ContactType_CONTACT_MESSAGE ContactType = 9
  ContactType_FRIEND_REQUEST ContactType = 10
  ContactType_BEACON ContactType = 11
  ContactType_REPAIR ContactType = 128
  ContactType_FACEBOOK ContactType = 2305
  ContactType_SINA ContactType = 2306
  ContactType_RENREN ContactType = 2307
  ContactType_FEIXIN ContactType = 2308
  ContactType_BBM ContactType = 2309
)

func (p ContactType) String() string {
  switch p {
  case ContactType_MID: return "MID"
  case ContactType_PHONE: return "PHONE"
  case ContactType_EMAIL: return "EMAIL"
  case ContactType_USERID: return "USERID"
  case ContactType_PROXIMITY: return "PROXIMITY"
  case ContactType_GROUP: return "GROUP"
  case ContactType_USER: return "USER"
  case ContactType_QRCODE: return "QRCODE"
  case ContactType_PROMOTION_BOT: return "PROMOTION_BOT"
  case ContactType_CONTACT_MESSAGE: return "CONTACT_MESSAGE"
  case ContactType_FRIEND_REQUEST: return "FRIEND_REQUEST"
  case ContactType_BEACON: return "BEACON"
  case ContactType_REPAIR: return "REPAIR"
  case ContactType_FACEBOOK: return "FACEBOOK"
  case ContactType_SINA: return "SINA"
  case ContactType_RENREN: return "RENREN"
  case ContactType_FEIXIN: return "FEIXIN"
  case ContactType_BBM: return "BBM"
  }
  return "<UNSET>"
}

func ContactTypeFromString(s string) (ContactType, error) {
  switch s {
  case "MID": return ContactType_MID, nil 
  case "PHONE": return ContactType_PHONE, nil 
  case "EMAIL": return ContactType_EMAIL, nil 
  case "USERID": return ContactType_USERID, nil 
  case "PROXIMITY": return ContactType_PROXIMITY, nil 
  case "GROUP": return ContactType_GROUP, nil 
  case "USER": return ContactType_USER, nil 
  case "QRCODE": return ContactType_QRCODE, nil 
  case "PROMOTION_BOT": return ContactType_PROMOTION_BOT, nil 
  case "CONTACT_MESSAGE": return ContactType_CONTACT_MESSAGE, nil 
  case "FRIEND_REQUEST": return ContactType_FRIEND_REQUEST, nil 
  case "BEACON": return ContactType_BEACON, nil 
  case "REPAIR": return ContactType_REPAIR, nil 
  case "FACEBOOK": return ContactType_FACEBOOK, nil 
  case "SINA": return ContactType_SINA, nil 
  case "RENREN": return ContactType_RENREN, nil 
  case "FEIXIN": return ContactType_FEIXIN, nil 
  case "BBM": return ContactType_BBM, nil 
  }
  return ContactType(0), fmt.Errorf("not a valid ContactType string")
}


func ContactTypePtr(v ContactType) *ContactType { return &v }

func (p ContactType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *ContactType) UnmarshalText(text []byte) error {
q, err := ContactTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *ContactType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = ContactType(v)
return nil
}

func (p * ContactType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type ContactStatus int64
const (
  ContactStatus_UNSPECIFIED ContactStatus = 0
  ContactStatus_FRIEND ContactStatus = 1
  ContactStatus_FRIEND_BLOCKED ContactStatus = 2
  ContactStatus_RECOMMEND ContactStatus = 3
  ContactStatus_RECOMMEND_BLOCKED ContactStatus = 4
  ContactStatus_DELETED ContactStatus = 5
  ContactStatus_DELETED_BLOCKED ContactStatus = 6
)

func (p ContactStatus) String() string {
  switch p {
  case ContactStatus_UNSPECIFIED: return "UNSPECIFIED"
  case ContactStatus_FRIEND: return "FRIEND"
  case ContactStatus_FRIEND_BLOCKED: return "FRIEND_BLOCKED"
  case ContactStatus_RECOMMEND: return "RECOMMEND"
  case ContactStatus_RECOMMEND_BLOCKED: return "RECOMMEND_BLOCKED"
  case ContactStatus_DELETED: return "DELETED"
  case ContactStatus_DELETED_BLOCKED: return "DELETED_BLOCKED"
  }
  return "<UNSET>"
}

func ContactStatusFromString(s string) (ContactStatus, error) {
  switch s {
  case "UNSPECIFIED": return ContactStatus_UNSPECIFIED, nil 
  case "FRIEND": return ContactStatus_FRIEND, nil 
  case "FRIEND_BLOCKED": return ContactStatus_FRIEND_BLOCKED, nil 
  case "RECOMMEND": return ContactStatus_RECOMMEND, nil 
  case "RECOMMEND_BLOCKED": return ContactStatus_RECOMMEND_BLOCKED, nil 
  case "DELETED": return ContactStatus_DELETED, nil 
  case "DELETED_BLOCKED": return ContactStatus_DELETED_BLOCKED, nil 
  }
  return ContactStatus(0), fmt.Errorf("not a valid ContactStatus string")
}


func ContactStatusPtr(v ContactStatus) *ContactStatus { return &v }

func (p ContactStatus) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *ContactStatus) UnmarshalText(text []byte) error {
q, err := ContactStatusFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *ContactStatus) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = ContactStatus(v)
return nil
}

func (p * ContactStatus) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type Relation int64
const (
  Relation_ONEWAY Relation = 0
  Relation_BOTH Relation = 1
  Relation_NOT_REGISTERED Relation = 2
)

func (p Relation) String() string {
  switch p {
  case Relation_ONEWAY: return "ONEWAY"
  case Relation_BOTH: return "BOTH"
  case Relation_NOT_REGISTERED: return "NOT_REGISTERED"
  }
  return "<UNSET>"
}

func RelationFromString(s string) (Relation, error) {
  switch s {
  case "ONEWAY": return Relation_ONEWAY, nil 
  case "BOTH": return Relation_BOTH, nil 
  case "NOT_REGISTERED": return Relation_NOT_REGISTERED, nil 
  }
  return Relation(0), fmt.Errorf("not a valid Relation string")
}


func RelationPtr(v Relation) *Relation { return &v }

func (p Relation) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *Relation) UnmarshalText(text []byte) error {
q, err := RelationFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *Relation) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = Relation(v)
return nil
}

func (p * Relation) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type FriendRequestStatus int64
const (
  FriendRequestStatus_NONE FriendRequestStatus = 0
  FriendRequestStatus_AVAILABLE FriendRequestStatus = 1
  FriendRequestStatus_ALREADY_REQUESTED FriendRequestStatus = 2
  FriendRequestStatus_UNAVAILABLE FriendRequestStatus = 3
)

func (p FriendRequestStatus) String() string {
  switch p {
  case FriendRequestStatus_NONE: return "NONE"
  case FriendRequestStatus_AVAILABLE: return "AVAILABLE"
  case FriendRequestStatus_ALREADY_REQUESTED: return "ALREADY_REQUESTED"
  case FriendRequestStatus_UNAVAILABLE: return "UNAVAILABLE"
  }
  return "<UNSET>"
}

func FriendRequestStatusFromString(s string) (FriendRequestStatus, error) {
  switch s {
  case "NONE": return FriendRequestStatus_NONE, nil 
  case "AVAILABLE": return FriendRequestStatus_AVAILABLE, nil 
  case "ALREADY_REQUESTED": return FriendRequestStatus_ALREADY_REQUESTED, nil 
  case "UNAVAILABLE": return FriendRequestStatus_UNAVAILABLE, nil 
  }
  return FriendRequestStatus(0), fmt.Errorf("not a valid FriendRequestStatus string")
}


func FriendRequestStatusPtr(v FriendRequestStatus) *FriendRequestStatus { return &v }

func (p FriendRequestStatus) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *FriendRequestStatus) UnmarshalText(text []byte) error {
q, err := FriendRequestStatusFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *FriendRequestStatus) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = FriendRequestStatus(v)
return nil
}

func (p * FriendRequestStatus) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type MidType int64
const (
  MidType_USER MidType = 0
  MidType_ROOM MidType = 1
  MidType_GROUP MidType = 2
  MidType_SQUARE MidType = 3
  MidType_SQUARE_CHAT MidType = 4
  MidType_SQUARE_MEMBER MidType = 5
  MidType_BOT MidType = 6
)

func (p MidType) String() string {
  switch p {
  case MidType_USER: return "USER"
  case MidType_ROOM: return "ROOM"
  case MidType_GROUP: return "GROUP"
  case MidType_SQUARE: return "SQUARE"
  case MidType_SQUARE_CHAT: return "SQUARE_CHAT"
  case MidType_SQUARE_MEMBER: return "SQUARE_MEMBER"
  case MidType_BOT: return "BOT"
  }
  return "<UNSET>"
}

func MidTypeFromString(s string) (MidType, error) {
  switch s {
  case "USER": return MidType_USER, nil 
  case "ROOM": return MidType_ROOM, nil 
  case "GROUP": return MidType_GROUP, nil 
  case "SQUARE": return MidType_SQUARE, nil 
  case "SQUARE_CHAT": return MidType_SQUARE_CHAT, nil 
  case "SQUARE_MEMBER": return MidType_SQUARE_MEMBER, nil 
  case "BOT": return MidType_BOT, nil 
  }
  return MidType(0), fmt.Errorf("not a valid MidType string")
}


func MidTypePtr(v MidType) *MidType { return &v }

func (p MidType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *MidType) UnmarshalText(text []byte) error {
q, err := MidTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *MidType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = MidType(v)
return nil
}

func (p * MidType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type Provider int64
const (
  Provider_GOOGLE Provider = 0
  Provider_BAIDU Provider = 1
  Provider_FOURSQUARE Provider = 2
)

func (p Provider) String() string {
  switch p {
  case Provider_GOOGLE: return "GOOGLE"
  case Provider_BAIDU: return "BAIDU"
  case Provider_FOURSQUARE: return "FOURSQUARE"
  }
  return "<UNSET>"
}

func ProviderFromString(s string) (Provider, error) {
  switch s {
  case "GOOGLE": return Provider_GOOGLE, nil 
  case "BAIDU": return Provider_BAIDU, nil 
  case "FOURSQUARE": return Provider_FOURSQUARE, nil 
  }
  return Provider(0), fmt.Errorf("not a valid Provider string")
}


func ProviderPtr(v Provider) *Provider { return &v }

func (p Provider) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *Provider) UnmarshalText(text []byte) error {
q, err := ProviderFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *Provider) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = Provider(v)
return nil
}

func (p * Provider) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type ContentType int64
const (
  ContentType_NONE ContentType = 0
  ContentType_IMAGE ContentType = 1
  ContentType_VIDEO ContentType = 2
  ContentType_AUDIO ContentType = 3
  ContentType_HTML ContentType = 4
  ContentType_PDF ContentType = 5
  ContentType_CALL ContentType = 6
  ContentType_STICKER ContentType = 7
  ContentType_PRESENCE ContentType = 8
  ContentType_GIFT ContentType = 9
  ContentType_GROUPBOARD ContentType = 10
  ContentType_APPLINK ContentType = 11
  ContentType_LINK ContentType = 12
  ContentType_CONTACT ContentType = 13
  ContentType_FILE ContentType = 14
  ContentType_LOCATION ContentType = 15
  ContentType_POSTNOTIFICATION ContentType = 16
  ContentType_RICH ContentType = 17
  ContentType_CHATEVENT ContentType = 18
  ContentType_MUSIC ContentType = 19
  ContentType_PAYMENT ContentType = 20
  ContentType_EXTIMAGE ContentType = 21
  ContentType_FLEX ContentType = 22
)

func (p ContentType) String() string {
  switch p {
  case ContentType_NONE: return "NONE"
  case ContentType_IMAGE: return "IMAGE"
  case ContentType_VIDEO: return "VIDEO"
  case ContentType_AUDIO: return "AUDIO"
  case ContentType_HTML: return "HTML"
  case ContentType_PDF: return "PDF"
  case ContentType_CALL: return "CALL"
  case ContentType_STICKER: return "STICKER"
  case ContentType_PRESENCE: return "PRESENCE"
  case ContentType_GIFT: return "GIFT"
  case ContentType_GROUPBOARD: return "GROUPBOARD"
  case ContentType_APPLINK: return "APPLINK"
  case ContentType_LINK: return "LINK"
  case ContentType_CONTACT: return "CONTACT"
  case ContentType_FILE: return "FILE"
  case ContentType_LOCATION: return "LOCATION"
  case ContentType_POSTNOTIFICATION: return "POSTNOTIFICATION"
  case ContentType_RICH: return "RICH"
  case ContentType_CHATEVENT: return "CHATEVENT"
  case ContentType_MUSIC: return "MUSIC"
  case ContentType_PAYMENT: return "PAYMENT"
  case ContentType_EXTIMAGE: return "EXTIMAGE"
  case ContentType_FLEX: return "FLEX"
  }
  return "<UNSET>"
}

func ContentTypeFromString(s string) (ContentType, error) {
  switch s {
  case "NONE": return ContentType_NONE, nil 
  case "IMAGE": return ContentType_IMAGE, nil 
  case "VIDEO": return ContentType_VIDEO, nil 
  case "AUDIO": return ContentType_AUDIO, nil 
  case "HTML": return ContentType_HTML, nil 
  case "PDF": return ContentType_PDF, nil 
  case "CALL": return ContentType_CALL, nil 
  case "STICKER": return ContentType_STICKER, nil 
  case "PRESENCE": return ContentType_PRESENCE, nil 
  case "GIFT": return ContentType_GIFT, nil 
  case "GROUPBOARD": return ContentType_GROUPBOARD, nil 
  case "APPLINK": return ContentType_APPLINK, nil 
  case "LINK": return ContentType_LINK, nil 
  case "CONTACT": return ContentType_CONTACT, nil 
  case "FILE": return ContentType_FILE, nil 
  case "LOCATION": return ContentType_LOCATION, nil 
  case "POSTNOTIFICATION": return ContentType_POSTNOTIFICATION, nil 
  case "RICH": return ContentType_RICH, nil 
  case "CHATEVENT": return ContentType_CHATEVENT, nil 
  case "MUSIC": return ContentType_MUSIC, nil 
  case "PAYMENT": return ContentType_PAYMENT, nil 
  case "EXTIMAGE": return ContentType_EXTIMAGE, nil 
  case "FLEX": return ContentType_FLEX, nil 
  }
  return ContentType(0), fmt.Errorf("not a valid ContentType string")
}


func ContentTypePtr(v ContentType) *ContentType { return &v }

func (p ContentType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *ContentType) UnmarshalText(text []byte) error {
q, err := ContentTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *ContentType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = ContentType(v)
return nil
}

func (p * ContentType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type MessageRelationType int64
const (
  MessageRelationType_FORWARD MessageRelationType = 0
  MessageRelationType_AUTO_REPLY MessageRelationType = 1
  MessageRelationType_SUBORDINATE MessageRelationType = 2
  MessageRelationType_REPLY MessageRelationType = 3
)

func (p MessageRelationType) String() string {
  switch p {
  case MessageRelationType_FORWARD: return "FORWARD"
  case MessageRelationType_AUTO_REPLY: return "AUTO_REPLY"
  case MessageRelationType_SUBORDINATE: return "SUBORDINATE"
  case MessageRelationType_REPLY: return "REPLY"
  }
  return "<UNSET>"
}

func MessageRelationTypeFromString(s string) (MessageRelationType, error) {
  switch s {
  case "FORWARD": return MessageRelationType_FORWARD, nil 
  case "AUTO_REPLY": return MessageRelationType_AUTO_REPLY, nil 
  case "SUBORDINATE": return MessageRelationType_SUBORDINATE, nil 
  case "REPLY": return MessageRelationType_REPLY, nil 
  }
  return MessageRelationType(0), fmt.Errorf("not a valid MessageRelationType string")
}


func MessageRelationTypePtr(v MessageRelationType) *MessageRelationType { return &v }

func (p MessageRelationType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *MessageRelationType) UnmarshalText(text []byte) error {
q, err := MessageRelationTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *MessageRelationType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = MessageRelationType(v)
return nil
}

func (p * MessageRelationType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type RelatedMessageServiceCode int64
const (
  RelatedMessageServiceCode_UNKNOWN RelatedMessageServiceCode = 0
  RelatedMessageServiceCode_TALK RelatedMessageServiceCode = 1
  RelatedMessageServiceCode_SQUARE RelatedMessageServiceCode = 2
)

func (p RelatedMessageServiceCode) String() string {
  switch p {
  case RelatedMessageServiceCode_UNKNOWN: return "UNKNOWN"
  case RelatedMessageServiceCode_TALK: return "TALK"
  case RelatedMessageServiceCode_SQUARE: return "SQUARE"
  }
  return "<UNSET>"
}

func RelatedMessageServiceCodeFromString(s string) (RelatedMessageServiceCode, error) {
  switch s {
  case "UNKNOWN": return RelatedMessageServiceCode_UNKNOWN, nil 
  case "TALK": return RelatedMessageServiceCode_TALK, nil 
  case "SQUARE": return RelatedMessageServiceCode_SQUARE, nil 
  }
  return RelatedMessageServiceCode(0), fmt.Errorf("not a valid RelatedMessageServiceCode string")
}


func RelatedMessageServiceCodePtr(v RelatedMessageServiceCode) *RelatedMessageServiceCode { return &v }

func (p RelatedMessageServiceCode) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *RelatedMessageServiceCode) UnmarshalText(text []byte) error {
q, err := RelatedMessageServiceCodeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *RelatedMessageServiceCode) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = RelatedMessageServiceCode(v)
return nil
}

func (p * RelatedMessageServiceCode) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type AppExtensionType int64
const (
  AppExtensionType_SIRI AppExtensionType = 1
  AppExtensionType_GOOGLE_ASSISTANT AppExtensionType = 2
  AppExtensionType_OS_SHARE AppExtensionType = 3
)

func (p AppExtensionType) String() string {
  switch p {
  case AppExtensionType_SIRI: return "SIRI"
  case AppExtensionType_GOOGLE_ASSISTANT: return "GOOGLE_ASSISTANT"
  case AppExtensionType_OS_SHARE: return "OS_SHARE"
  }
  return "<UNSET>"
}

func AppExtensionTypeFromString(s string) (AppExtensionType, error) {
  switch s {
  case "SIRI": return AppExtensionType_SIRI, nil 
  case "GOOGLE_ASSISTANT": return AppExtensionType_GOOGLE_ASSISTANT, nil 
  case "OS_SHARE": return AppExtensionType_OS_SHARE, nil 
  }
  return AppExtensionType(0), fmt.Errorf("not a valid AppExtensionType string")
}


func AppExtensionTypePtr(v AppExtensionType) *AppExtensionType { return &v }

func (p AppExtensionType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *AppExtensionType) UnmarshalText(text []byte) error {
q, err := AppExtensionTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *AppExtensionType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = AppExtensionType(v)
return nil
}

func (p * AppExtensionType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type ChatRoomAnnouncementType int64
const (
  ChatRoomAnnouncementType_MESSAGE ChatRoomAnnouncementType = 0
  ChatRoomAnnouncementType_NOTE ChatRoomAnnouncementType = 1
  ChatRoomAnnouncementType_CHANNEL ChatRoomAnnouncementType = 2
)

func (p ChatRoomAnnouncementType) String() string {
  switch p {
  case ChatRoomAnnouncementType_MESSAGE: return "MESSAGE"
  case ChatRoomAnnouncementType_NOTE: return "NOTE"
  case ChatRoomAnnouncementType_CHANNEL: return "CHANNEL"
  }
  return "<UNSET>"
}

func ChatRoomAnnouncementTypeFromString(s string) (ChatRoomAnnouncementType, error) {
  switch s {
  case "MESSAGE": return ChatRoomAnnouncementType_MESSAGE, nil 
  case "NOTE": return ChatRoomAnnouncementType_NOTE, nil 
  case "CHANNEL": return ChatRoomAnnouncementType_CHANNEL, nil 
  }
  return ChatRoomAnnouncementType(0), fmt.Errorf("not a valid ChatRoomAnnouncementType string")
}


func ChatRoomAnnouncementTypePtr(v ChatRoomAnnouncementType) *ChatRoomAnnouncementType { return &v }

func (p ChatRoomAnnouncementType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *ChatRoomAnnouncementType) UnmarshalText(text []byte) error {
q, err := ChatRoomAnnouncementTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *ChatRoomAnnouncementType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = ChatRoomAnnouncementType(v)
return nil
}

func (p * ChatRoomAnnouncementType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type DeletePermission int64
const (
  DeletePermission_ANYONE_IN_CHAT DeletePermission = 0
  DeletePermission_CREATOR_ONLY DeletePermission = 1
  DeletePermission_NO_ONE DeletePermission = 2
)

func (p DeletePermission) String() string {
  switch p {
  case DeletePermission_ANYONE_IN_CHAT: return "ANYONE_IN_CHAT"
  case DeletePermission_CREATOR_ONLY: return "CREATOR_ONLY"
  case DeletePermission_NO_ONE: return "NO_ONE"
  }
  return "<UNSET>"
}

func DeletePermissionFromString(s string) (DeletePermission, error) {
  switch s {
  case "ANYONE_IN_CHAT": return DeletePermission_ANYONE_IN_CHAT, nil 
  case "CREATOR_ONLY": return DeletePermission_CREATOR_ONLY, nil 
  case "NO_ONE": return DeletePermission_NO_ONE, nil 
  }
  return DeletePermission(0), fmt.Errorf("not a valid DeletePermission string")
}


func DeletePermissionPtr(v DeletePermission) *DeletePermission { return &v }

func (p DeletePermission) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *DeletePermission) UnmarshalText(text []byte) error {
q, err := DeletePermissionFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *DeletePermission) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = DeletePermission(v)
return nil
}

func (p * DeletePermission) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type OperationType int64
const (
  OperationType_END_OF_OPERATION OperationType = 0
  OperationType_UPDATE_PROFILE OperationType = 1
  OperationType_NOTIFIED_UPDATE_PROFILE OperationType = 2
  OperationType_REGISTER_USERID OperationType = 3
  OperationType_ADD_CONTACT OperationType = 4
  OperationType_NOTIFIED_ADD_CONTACT OperationType = 5
  OperationType_BLOCK_CONTACT OperationType = 6
  OperationType_UNBLOCK_CONTACT OperationType = 7
  OperationType_NOTIFIED_RECOMMEND_CONTACT OperationType = 8
  OperationType_CREATE_GROUP OperationType = 9
  OperationType_UPDATE_GROUP OperationType = 10
  OperationType_NOTIFIED_UPDATE_GROUP OperationType = 11
  OperationType_INVITE_INTO_GROUP OperationType = 12
  OperationType_NOTIFIED_INVITE_INTO_GROUP OperationType = 13
  OperationType_LEAVE_GROUP OperationType = 14
  OperationType_NOTIFIED_LEAVE_GROUP OperationType = 15
  OperationType_ACCEPT_GROUP_INVITATION OperationType = 16
  OperationType_NOTIFIED_ACCEPT_GROUP_INVITATION OperationType = 17
  OperationType_KICKOUT_FROM_GROUP OperationType = 18
  OperationType_NOTIFIED_KICKOUT_FROM_GROUP OperationType = 19
  OperationType_CREATE_ROOM OperationType = 20
  OperationType_INVITE_INTO_ROOM OperationType = 21
  OperationType_NOTIFIED_INVITE_INTO_ROOM OperationType = 22
  OperationType_LEAVE_ROOM OperationType = 23
  OperationType_NOTIFIED_LEAVE_ROOM OperationType = 24
  OperationType_SEND_MESSAGE OperationType = 25
  OperationType_RECEIVE_MESSAGE OperationType = 26
  OperationType_SEND_MESSAGE_RECEIPT OperationType = 27
  OperationType_RECEIVE_MESSAGE_RECEIPT OperationType = 28
  OperationType_SEND_CONTENT_RECEIPT OperationType = 29
  OperationType_RECEIVE_ANNOUNCEMENT OperationType = 30
  OperationType_CANCEL_INVITATION_GROUP OperationType = 31
  OperationType_NOTIFIED_CANCEL_INVITATION_GROUP OperationType = 32
  OperationType_NOTIFIED_UNREGISTER_USER OperationType = 33
  OperationType_REJECT_GROUP_INVITATION OperationType = 34
  OperationType_NOTIFIED_REJECT_GROUP_INVITATION OperationType = 35
  OperationType_UPDATE_SETTINGS OperationType = 36
  OperationType_NOTIFIED_REGISTER_USER OperationType = 37
  OperationType_INVITE_VIA_EMAIL OperationType = 38
  OperationType_NOTIFIED_REQUEST_RECOVERY OperationType = 39
  OperationType_SEND_CHAT_CHECKED OperationType = 40
  OperationType_SEND_CHAT_REMOVED OperationType = 41
  OperationType_NOTIFIED_FORCE_SYNC OperationType = 42
  OperationType_SEND_CONTENT OperationType = 43
  OperationType_SEND_MESSAGE_MYHOME OperationType = 44
  OperationType_NOTIFIED_UPDATE_CONTENT_PREVIEW OperationType = 45
  OperationType_REMOVE_ALL_MESSAGES OperationType = 46
  OperationType_NOTIFIED_UPDATE_PURCHASES OperationType = 47
  OperationType_DUMMY OperationType = 48
  OperationType_UPDATE_CONTACT OperationType = 49
  OperationType_NOTIFIED_RECEIVED_CALL OperationType = 50
  OperationType_CANCEL_CALL OperationType = 51
  OperationType_NOTIFIED_REDIRECT OperationType = 52
  OperationType_NOTIFIED_CHANNEL_SYNC OperationType = 53
  OperationType_FAILED_SEND_MESSAGE OperationType = 54
  OperationType_NOTIFIED_READ_MESSAGE OperationType = 55
  OperationType_FAILED_EMAIL_CONFIRMATION OperationType = 56
  OperationType_NOTIFIED_CHAT_CONTENT OperationType = 58
  OperationType_NOTIFIED_PUSH_NOTICENTER_ITEM OperationType = 59
  OperationType_NOTIFIED_JOIN_CHAT OperationType = 60
  OperationType_NOTIFIED_LEAVE_CHAT OperationType = 61
  OperationType_NOTIFIED_TYPING OperationType = 62
  OperationType_FRIEND_REQUEST_ACCEPTED OperationType = 63
  OperationType_DESTROY_MESSAGE OperationType = 64
  OperationType_NOTIFIED_DESTROY_MESSAGE OperationType = 65
  OperationType_UPDATE_PUBLICKEYCHAIN OperationType = 66
  OperationType_NOTIFIED_UPDATE_PUBLICKEYCHAIN OperationType = 67
  OperationType_NOTIFIED_BLOCK_CONTACT OperationType = 68
  OperationType_NOTIFIED_UNBLOCK_CONTACT OperationType = 69
  OperationType_UPDATE_GROUPPREFERENCE OperationType = 70
  OperationType_NOTIFIED_PAYMENT_EVENT OperationType = 71
  OperationType_REGISTER_E2EE_PUBLICKEY OperationType = 72
  OperationType_NOTIFIED_E2EE_KEY_EXCHANGE_REQ OperationType = 73
  OperationType_NOTIFIED_E2EE_KEY_EXCHANGE_RESP OperationType = 74
  OperationType_NOTIFIED_E2EE_MESSAGE_RESEND_REQ OperationType = 75
  OperationType_NOTIFIED_E2EE_MESSAGE_RESEND_RESP OperationType = 76
  OperationType_NOTIFIED_E2EE_KEY_UPDATE OperationType = 77
  OperationType_NOTIFIED_BUDDY_UPDATE_PROFILE OperationType = 78
  OperationType_NOTIFIED_UPDATE_LINEAT_TABS OperationType = 79
  OperationType_UPDATE_ROOM OperationType = 80
  OperationType_NOTIFIED_BEACON_DETECTED OperationType = 81
  OperationType_UPDATE_EXTENDED_PROFILE OperationType = 82
  OperationType_ADD_FOLLOW OperationType = 83
  OperationType_NOTIFIED_ADD_FOLLOW OperationType = 84
  OperationType_DELETE_FOLLOW OperationType = 85
  OperationType_NOTIFIED_DELETE_FOLLOW OperationType = 86
  OperationType_UPDATE_TIMELINE_SETTINGS OperationType = 87
  OperationType_NOTIFIED_FRIEND_REQUEST OperationType = 88
  OperationType_UPDATE_RINGBACK_TONE OperationType = 89
  OperationType_NOTIFIED_POSTBACK OperationType = 90
  OperationType_RECEIVE_READ_WATERMARK OperationType = 91
  OperationType_NOTIFIED_MESSAGE_DELIVERED OperationType = 92
  OperationType_NOTIFIED_UPDATE_CHAT_BAR OperationType = 93
  OperationType_NOTIFIED_CHATAPP_INSTALLED OperationType = 94
  OperationType_NOTIFIED_CHATAPP_UPDATED OperationType = 95
  OperationType_NOTIFIED_CHATAPP_NEW_MARK OperationType = 96
  OperationType_NOTIFIED_CHATAPP_DELETED OperationType = 97
  OperationType_NOTIFIED_CHATAPP_SYNC OperationType = 98
  OperationType_NOTIFIED_UPDATE_MESSAGE OperationType = 99
  OperationType_UPDATE_CHATROOMBGM OperationType = 100
  OperationType_NOTIFIED_UPDATE_CHATROOMBGM OperationType = 101
  OperationType_UPDATE_RINGTONE OperationType = 102
  OperationType_UPDATE_USER_SETTINGS OperationType = 118
  OperationType_NOTIFIED_UPDATE_STATUS_BAR OperationType = 119
  OperationType_CREATE_CHAT OperationType = 120
  OperationType_UPDATE_CHAT OperationType = 121
  OperationType_NOTIFIED_UPDATE_CHAT OperationType = 122
  OperationType_INVITE_INTO_CHAT OperationType = 123
  OperationType_NOTIFIED_INVITE_INTO_CHAT OperationType = 124
  OperationType_CANCEL_CHAT_INVITATION OperationType = 125
  OperationType_DELETE_SELF_FROM_CHAT OperationType = 127
  OperationType_NOTIFIED_DELETE_SELF_FROM_CHAT OperationType = 128
  OperationType_NOTIFIED_ACCEPT_CHAT_INVITATION OperationType = 130
  OperationType_DELETE_OTHER_FROM_CHAT OperationType = 132
  OperationType_NOTIFIED_DELETE_OTHER_FROM_CHAT OperationType = 133
  OperationType_NOTIFIED_CONTACT_CALENDAR_EVENT OperationType = 134
  OperationType_UPDATE_THINGS_OPERATIONS OperationType = 136
)

func (p OperationType) String() string {
  switch p {
  case OperationType_END_OF_OPERATION: return "END_OF_OPERATION"
  case OperationType_UPDATE_PROFILE: return "UPDATE_PROFILE"
  case OperationType_NOTIFIED_UPDATE_PROFILE: return "NOTIFIED_UPDATE_PROFILE"
  case OperationType_REGISTER_USERID: return "REGISTER_USERID"
  case OperationType_ADD_CONTACT: return "ADD_CONTACT"
  case OperationType_NOTIFIED_ADD_CONTACT: return "NOTIFIED_ADD_CONTACT"
  case OperationType_BLOCK_CONTACT: return "BLOCK_CONTACT"
  case OperationType_UNBLOCK_CONTACT: return "UNBLOCK_CONTACT"
  case OperationType_NOTIFIED_RECOMMEND_CONTACT: return "NOTIFIED_RECOMMEND_CONTACT"
  case OperationType_CREATE_GROUP: return "CREATE_GROUP"
  case OperationType_UPDATE_GROUP: return "UPDATE_GROUP"
  case OperationType_NOTIFIED_UPDATE_GROUP: return "NOTIFIED_UPDATE_GROUP"
  case OperationType_INVITE_INTO_GROUP: return "INVITE_INTO_GROUP"
  case OperationType_NOTIFIED_INVITE_INTO_GROUP: return "NOTIFIED_INVITE_INTO_GROUP"
  case OperationType_LEAVE_GROUP: return "LEAVE_GROUP"
  case OperationType_NOTIFIED_LEAVE_GROUP: return "NOTIFIED_LEAVE_GROUP"
  case OperationType_ACCEPT_GROUP_INVITATION: return "ACCEPT_GROUP_INVITATION"
  case OperationType_NOTIFIED_ACCEPT_GROUP_INVITATION: return "NOTIFIED_ACCEPT_GROUP_INVITATION"
  case OperationType_KICKOUT_FROM_GROUP: return "KICKOUT_FROM_GROUP"
  case OperationType_NOTIFIED_KICKOUT_FROM_GROUP: return "NOTIFIED_KICKOUT_FROM_GROUP"
  case OperationType_CREATE_ROOM: return "CREATE_ROOM"
  case OperationType_INVITE_INTO_ROOM: return "INVITE_INTO_ROOM"
  case OperationType_NOTIFIED_INVITE_INTO_ROOM: return "NOTIFIED_INVITE_INTO_ROOM"
  case OperationType_LEAVE_ROOM: return "LEAVE_ROOM"
  case OperationType_NOTIFIED_LEAVE_ROOM: return "NOTIFIED_LEAVE_ROOM"
  case OperationType_SEND_MESSAGE: return "SEND_MESSAGE"
  case OperationType_RECEIVE_MESSAGE: return "RECEIVE_MESSAGE"
  case OperationType_SEND_MESSAGE_RECEIPT: return "SEND_MESSAGE_RECEIPT"
  case OperationType_RECEIVE_MESSAGE_RECEIPT: return "RECEIVE_MESSAGE_RECEIPT"
  case OperationType_SEND_CONTENT_RECEIPT: return "SEND_CONTENT_RECEIPT"
  case OperationType_RECEIVE_ANNOUNCEMENT: return "RECEIVE_ANNOUNCEMENT"
  case OperationType_CANCEL_INVITATION_GROUP: return "CANCEL_INVITATION_GROUP"
  case OperationType_NOTIFIED_CANCEL_INVITATION_GROUP: return "NOTIFIED_CANCEL_INVITATION_GROUP"
  case OperationType_NOTIFIED_UNREGISTER_USER: return "NOTIFIED_UNREGISTER_USER"
  case OperationType_REJECT_GROUP_INVITATION: return "REJECT_GROUP_INVITATION"
  case OperationType_NOTIFIED_REJECT_GROUP_INVITATION: return "NOTIFIED_REJECT_GROUP_INVITATION"
  case OperationType_UPDATE_SETTINGS: return "UPDATE_SETTINGS"
  case OperationType_NOTIFIED_REGISTER_USER: return "NOTIFIED_REGISTER_USER"
  case OperationType_INVITE_VIA_EMAIL: return "INVITE_VIA_EMAIL"
  case OperationType_NOTIFIED_REQUEST_RECOVERY: return "NOTIFIED_REQUEST_RECOVERY"
  case OperationType_SEND_CHAT_CHECKED: return "SEND_CHAT_CHECKED"
  case OperationType_SEND_CHAT_REMOVED: return "SEND_CHAT_REMOVED"
  case OperationType_NOTIFIED_FORCE_SYNC: return "NOTIFIED_FORCE_SYNC"
  case OperationType_SEND_CONTENT: return "SEND_CONTENT"
  case OperationType_SEND_MESSAGE_MYHOME: return "SEND_MESSAGE_MYHOME"
  case OperationType_NOTIFIED_UPDATE_CONTENT_PREVIEW: return "NOTIFIED_UPDATE_CONTENT_PREVIEW"
  case OperationType_REMOVE_ALL_MESSAGES: return "REMOVE_ALL_MESSAGES"
  case OperationType_NOTIFIED_UPDATE_PURCHASES: return "NOTIFIED_UPDATE_PURCHASES"
  case OperationType_DUMMY: return "DUMMY"
  case OperationType_UPDATE_CONTACT: return "UPDATE_CONTACT"
  case OperationType_NOTIFIED_RECEIVED_CALL: return "NOTIFIED_RECEIVED_CALL"
  case OperationType_CANCEL_CALL: return "CANCEL_CALL"
  case OperationType_NOTIFIED_REDIRECT: return "NOTIFIED_REDIRECT"
  case OperationType_NOTIFIED_CHANNEL_SYNC: return "NOTIFIED_CHANNEL_SYNC"
  case OperationType_FAILED_SEND_MESSAGE: return "FAILED_SEND_MESSAGE"
  case OperationType_NOTIFIED_READ_MESSAGE: return "NOTIFIED_READ_MESSAGE"
  case OperationType_FAILED_EMAIL_CONFIRMATION: return "FAILED_EMAIL_CONFIRMATION"
  case OperationType_NOTIFIED_CHAT_CONTENT: return "NOTIFIED_CHAT_CONTENT"
  case OperationType_NOTIFIED_PUSH_NOTICENTER_ITEM: return "NOTIFIED_PUSH_NOTICENTER_ITEM"
  case OperationType_NOTIFIED_JOIN_CHAT: return "NOTIFIED_JOIN_CHAT"
  case OperationType_NOTIFIED_LEAVE_CHAT: return "NOTIFIED_LEAVE_CHAT"
  case OperationType_NOTIFIED_TYPING: return "NOTIFIED_TYPING"
  case OperationType_FRIEND_REQUEST_ACCEPTED: return "FRIEND_REQUEST_ACCEPTED"
  case OperationType_DESTROY_MESSAGE: return "DESTROY_MESSAGE"
  case OperationType_NOTIFIED_DESTROY_MESSAGE: return "NOTIFIED_DESTROY_MESSAGE"
  case OperationType_UPDATE_PUBLICKEYCHAIN: return "UPDATE_PUBLICKEYCHAIN"
  case OperationType_NOTIFIED_UPDATE_PUBLICKEYCHAIN: return "NOTIFIED_UPDATE_PUBLICKEYCHAIN"
  case OperationType_NOTIFIED_BLOCK_CONTACT: return "NOTIFIED_BLOCK_CONTACT"
  case OperationType_NOTIFIED_UNBLOCK_CONTACT: return "NOTIFIED_UNBLOCK_CONTACT"
  case OperationType_UPDATE_GROUPPREFERENCE: return "UPDATE_GROUPPREFERENCE"
  case OperationType_NOTIFIED_PAYMENT_EVENT: return "NOTIFIED_PAYMENT_EVENT"
  case OperationType_REGISTER_E2EE_PUBLICKEY: return "REGISTER_E2EE_PUBLICKEY"
  case OperationType_NOTIFIED_E2EE_KEY_EXCHANGE_REQ: return "NOTIFIED_E2EE_KEY_EXCHANGE_REQ"
  case OperationType_NOTIFIED_E2EE_KEY_EXCHANGE_RESP: return "NOTIFIED_E2EE_KEY_EXCHANGE_RESP"
  case OperationType_NOTIFIED_E2EE_MESSAGE_RESEND_REQ: return "NOTIFIED_E2EE_MESSAGE_RESEND_REQ"
  case OperationType_NOTIFIED_E2EE_MESSAGE_RESEND_RESP: return "NOTIFIED_E2EE_MESSAGE_RESEND_RESP"
  case OperationType_NOTIFIED_E2EE_KEY_UPDATE: return "NOTIFIED_E2EE_KEY_UPDATE"
  case OperationType_NOTIFIED_BUDDY_UPDATE_PROFILE: return "NOTIFIED_BUDDY_UPDATE_PROFILE"
  case OperationType_NOTIFIED_UPDATE_LINEAT_TABS: return "NOTIFIED_UPDATE_LINEAT_TABS"
  case OperationType_UPDATE_ROOM: return "UPDATE_ROOM"
  case OperationType_NOTIFIED_BEACON_DETECTED: return "NOTIFIED_BEACON_DETECTED"
  case OperationType_UPDATE_EXTENDED_PROFILE: return "UPDATE_EXTENDED_PROFILE"
  case OperationType_ADD_FOLLOW: return "ADD_FOLLOW"
  case OperationType_NOTIFIED_ADD_FOLLOW: return "NOTIFIED_ADD_FOLLOW"
  case OperationType_DELETE_FOLLOW: return "DELETE_FOLLOW"
  case OperationType_NOTIFIED_DELETE_FOLLOW: return "NOTIFIED_DELETE_FOLLOW"
  case OperationType_UPDATE_TIMELINE_SETTINGS: return "UPDATE_TIMELINE_SETTINGS"
  case OperationType_NOTIFIED_FRIEND_REQUEST: return "NOTIFIED_FRIEND_REQUEST"
  case OperationType_UPDATE_RINGBACK_TONE: return "UPDATE_RINGBACK_TONE"
  case OperationType_NOTIFIED_POSTBACK: return "NOTIFIED_POSTBACK"
  case OperationType_RECEIVE_READ_WATERMARK: return "RECEIVE_READ_WATERMARK"
  case OperationType_NOTIFIED_MESSAGE_DELIVERED: return "NOTIFIED_MESSAGE_DELIVERED"
  case OperationType_NOTIFIED_UPDATE_CHAT_BAR: return "NOTIFIED_UPDATE_CHAT_BAR"
  case OperationType_NOTIFIED_CHATAPP_INSTALLED: return "NOTIFIED_CHATAPP_INSTALLED"
  case OperationType_NOTIFIED_CHATAPP_UPDATED: return "NOTIFIED_CHATAPP_UPDATED"
  case OperationType_NOTIFIED_CHATAPP_NEW_MARK: return "NOTIFIED_CHATAPP_NEW_MARK"
  case OperationType_NOTIFIED_CHATAPP_DELETED: return "NOTIFIED_CHATAPP_DELETED"
  case OperationType_NOTIFIED_CHATAPP_SYNC: return "NOTIFIED_CHATAPP_SYNC"
  case OperationType_NOTIFIED_UPDATE_MESSAGE: return "NOTIFIED_UPDATE_MESSAGE"
  case OperationType_UPDATE_CHATROOMBGM: return "UPDATE_CHATROOMBGM"
  case OperationType_NOTIFIED_UPDATE_CHATROOMBGM: return "NOTIFIED_UPDATE_CHATROOMBGM"
  case OperationType_UPDATE_RINGTONE: return "UPDATE_RINGTONE"
  case OperationType_UPDATE_USER_SETTINGS: return "UPDATE_USER_SETTINGS"
  case OperationType_NOTIFIED_UPDATE_STATUS_BAR: return "NOTIFIED_UPDATE_STATUS_BAR"
  case OperationType_CREATE_CHAT: return "CREATE_CHAT"
  case OperationType_UPDATE_CHAT: return "UPDATE_CHAT"
  case OperationType_NOTIFIED_UPDATE_CHAT: return "NOTIFIED_UPDATE_CHAT"
  case OperationType_INVITE_INTO_CHAT: return "INVITE_INTO_CHAT"
  case OperationType_NOTIFIED_INVITE_INTO_CHAT: return "NOTIFIED_INVITE_INTO_CHAT"
  case OperationType_CANCEL_CHAT_INVITATION: return "CANCEL_CHAT_INVITATION"
  case OperationType_DELETE_SELF_FROM_CHAT: return "DELETE_SELF_FROM_CHAT"
  case OperationType_NOTIFIED_DELETE_SELF_FROM_CHAT: return "NOTIFIED_DELETE_SELF_FROM_CHAT"
  case OperationType_NOTIFIED_ACCEPT_CHAT_INVITATION: return "NOTIFIED_ACCEPT_CHAT_INVITATION"
  case OperationType_DELETE_OTHER_FROM_CHAT: return "DELETE_OTHER_FROM_CHAT"
  case OperationType_NOTIFIED_DELETE_OTHER_FROM_CHAT: return "NOTIFIED_DELETE_OTHER_FROM_CHAT"
  case OperationType_NOTIFIED_CONTACT_CALENDAR_EVENT: return "NOTIFIED_CONTACT_CALENDAR_EVENT"
  case OperationType_UPDATE_THINGS_OPERATIONS: return "UPDATE_THINGS_OPERATIONS"
  }
  return "<UNSET>"
}

func OperationTypeFromString(s string) (OperationType, error) {
  switch s {
  case "END_OF_OPERATION": return OperationType_END_OF_OPERATION, nil 
  case "UPDATE_PROFILE": return OperationType_UPDATE_PROFILE, nil 
  case "NOTIFIED_UPDATE_PROFILE": return OperationType_NOTIFIED_UPDATE_PROFILE, nil 
  case "REGISTER_USERID": return OperationType_REGISTER_USERID, nil 
  case "ADD_CONTACT": return OperationType_ADD_CONTACT, nil 
  case "NOTIFIED_ADD_CONTACT": return OperationType_NOTIFIED_ADD_CONTACT, nil 
  case "BLOCK_CONTACT": return OperationType_BLOCK_CONTACT, nil 
  case "UNBLOCK_CONTACT": return OperationType_UNBLOCK_CONTACT, nil 
  case "NOTIFIED_RECOMMEND_CONTACT": return OperationType_NOTIFIED_RECOMMEND_CONTACT, nil 
  case "CREATE_GROUP": return OperationType_CREATE_GROUP, nil 
  case "UPDATE_GROUP": return OperationType_UPDATE_GROUP, nil 
  case "NOTIFIED_UPDATE_GROUP": return OperationType_NOTIFIED_UPDATE_GROUP, nil 
  case "INVITE_INTO_GROUP": return OperationType_INVITE_INTO_GROUP, nil 
  case "NOTIFIED_INVITE_INTO_GROUP": return OperationType_NOTIFIED_INVITE_INTO_GROUP, nil 
  case "LEAVE_GROUP": return OperationType_LEAVE_GROUP, nil 
  case "NOTIFIED_LEAVE_GROUP": return OperationType_NOTIFIED_LEAVE_GROUP, nil 
  case "ACCEPT_GROUP_INVITATION": return OperationType_ACCEPT_GROUP_INVITATION, nil 
  case "NOTIFIED_ACCEPT_GROUP_INVITATION": return OperationType_NOTIFIED_ACCEPT_GROUP_INVITATION, nil 
  case "KICKOUT_FROM_GROUP": return OperationType_KICKOUT_FROM_GROUP, nil 
  case "NOTIFIED_KICKOUT_FROM_GROUP": return OperationType_NOTIFIED_KICKOUT_FROM_GROUP, nil 
  case "CREATE_ROOM": return OperationType_CREATE_ROOM, nil 
  case "INVITE_INTO_ROOM": return OperationType_INVITE_INTO_ROOM, nil 
  case "NOTIFIED_INVITE_INTO_ROOM": return OperationType_NOTIFIED_INVITE_INTO_ROOM, nil 
  case "LEAVE_ROOM": return OperationType_LEAVE_ROOM, nil 
  case "NOTIFIED_LEAVE_ROOM": return OperationType_NOTIFIED_LEAVE_ROOM, nil 
  case "SEND_MESSAGE": return OperationType_SEND_MESSAGE, nil 
  case "RECEIVE_MESSAGE": return OperationType_RECEIVE_MESSAGE, nil 
  case "SEND_MESSAGE_RECEIPT": return OperationType_SEND_MESSAGE_RECEIPT, nil 
  case "RECEIVE_MESSAGE_RECEIPT": return OperationType_RECEIVE_MESSAGE_RECEIPT, nil 
  case "SEND_CONTENT_RECEIPT": return OperationType_SEND_CONTENT_RECEIPT, nil 
  case "RECEIVE_ANNOUNCEMENT": return OperationType_RECEIVE_ANNOUNCEMENT, nil 
  case "CANCEL_INVITATION_GROUP": return OperationType_CANCEL_INVITATION_GROUP, nil 
  case "NOTIFIED_CANCEL_INVITATION_GROUP": return OperationType_NOTIFIED_CANCEL_INVITATION_GROUP, nil 
  case "NOTIFIED_UNREGISTER_USER": return OperationType_NOTIFIED_UNREGISTER_USER, nil 
  case "REJECT_GROUP_INVITATION": return OperationType_REJECT_GROUP_INVITATION, nil 
  case "NOTIFIED_REJECT_GROUP_INVITATION": return OperationType_NOTIFIED_REJECT_GROUP_INVITATION, nil 
  case "UPDATE_SETTINGS": return OperationType_UPDATE_SETTINGS, nil 
  case "NOTIFIED_REGISTER_USER": return OperationType_NOTIFIED_REGISTER_USER, nil 
  case "INVITE_VIA_EMAIL": return OperationType_INVITE_VIA_EMAIL, nil 
  case "NOTIFIED_REQUEST_RECOVERY": return OperationType_NOTIFIED_REQUEST_RECOVERY, nil 
  case "SEND_CHAT_CHECKED": return OperationType_SEND_CHAT_CHECKED, nil 
  case "SEND_CHAT_REMOVED": return OperationType_SEND_CHAT_REMOVED, nil 
  case "NOTIFIED_FORCE_SYNC": return OperationType_NOTIFIED_FORCE_SYNC, nil 
  case "SEND_CONTENT": return OperationType_SEND_CONTENT, nil 
  case "SEND_MESSAGE_MYHOME": return OperationType_SEND_MESSAGE_MYHOME, nil 
  case "NOTIFIED_UPDATE_CONTENT_PREVIEW": return OperationType_NOTIFIED_UPDATE_CONTENT_PREVIEW, nil 
  case "REMOVE_ALL_MESSAGES": return OperationType_REMOVE_ALL_MESSAGES, nil 
  case "NOTIFIED_UPDATE_PURCHASES": return OperationType_NOTIFIED_UPDATE_PURCHASES, nil 
  case "DUMMY": return OperationType_DUMMY, nil 
  case "UPDATE_CONTACT": return OperationType_UPDATE_CONTACT, nil 
  case "NOTIFIED_RECEIVED_CALL": return OperationType_NOTIFIED_RECEIVED_CALL, nil 
  case "CANCEL_CALL": return OperationType_CANCEL_CALL, nil 
  case "NOTIFIED_REDIRECT": return OperationType_NOTIFIED_REDIRECT, nil 
  case "NOTIFIED_CHANNEL_SYNC": return OperationType_NOTIFIED_CHANNEL_SYNC, nil 
  case "FAILED_SEND_MESSAGE": return OperationType_FAILED_SEND_MESSAGE, nil 
  case "NOTIFIED_READ_MESSAGE": return OperationType_NOTIFIED_READ_MESSAGE, nil 
  case "FAILED_EMAIL_CONFIRMATION": return OperationType_FAILED_EMAIL_CONFIRMATION, nil 
  case "NOTIFIED_CHAT_CONTENT": return OperationType_NOTIFIED_CHAT_CONTENT, nil 
  case "NOTIFIED_PUSH_NOTICENTER_ITEM": return OperationType_NOTIFIED_PUSH_NOTICENTER_ITEM, nil 
  case "NOTIFIED_JOIN_CHAT": return OperationType_NOTIFIED_JOIN_CHAT, nil 
  case "NOTIFIED_LEAVE_CHAT": return OperationType_NOTIFIED_LEAVE_CHAT, nil 
  case "NOTIFIED_TYPING": return OperationType_NOTIFIED_TYPING, nil 
  case "FRIEND_REQUEST_ACCEPTED": return OperationType_FRIEND_REQUEST_ACCEPTED, nil 
  case "DESTROY_MESSAGE": return OperationType_DESTROY_MESSAGE, nil 
  case "NOTIFIED_DESTROY_MESSAGE": return OperationType_NOTIFIED_DESTROY_MESSAGE, nil 
  case "UPDATE_PUBLICKEYCHAIN": return OperationType_UPDATE_PUBLICKEYCHAIN, nil 
  case "NOTIFIED_UPDATE_PUBLICKEYCHAIN": return OperationType_NOTIFIED_UPDATE_PUBLICKEYCHAIN, nil 
  case "NOTIFIED_BLOCK_CONTACT": return OperationType_NOTIFIED_BLOCK_CONTACT, nil 
  case "NOTIFIED_UNBLOCK_CONTACT": return OperationType_NOTIFIED_UNBLOCK_CONTACT, nil 
  case "UPDATE_GROUPPREFERENCE": return OperationType_UPDATE_GROUPPREFERENCE, nil 
  case "NOTIFIED_PAYMENT_EVENT": return OperationType_NOTIFIED_PAYMENT_EVENT, nil 
  case "REGISTER_E2EE_PUBLICKEY": return OperationType_REGISTER_E2EE_PUBLICKEY, nil 
  case "NOTIFIED_E2EE_KEY_EXCHANGE_REQ": return OperationType_NOTIFIED_E2EE_KEY_EXCHANGE_REQ, nil 
  case "NOTIFIED_E2EE_KEY_EXCHANGE_RESP": return OperationType_NOTIFIED_E2EE_KEY_EXCHANGE_RESP, nil 
  case "NOTIFIED_E2EE_MESSAGE_RESEND_REQ": return OperationType_NOTIFIED_E2EE_MESSAGE_RESEND_REQ, nil 
  case "NOTIFIED_E2EE_MESSAGE_RESEND_RESP": return OperationType_NOTIFIED_E2EE_MESSAGE_RESEND_RESP, nil 
  case "NOTIFIED_E2EE_KEY_UPDATE": return OperationType_NOTIFIED_E2EE_KEY_UPDATE, nil 
  case "NOTIFIED_BUDDY_UPDATE_PROFILE": return OperationType_NOTIFIED_BUDDY_UPDATE_PROFILE, nil 
  case "NOTIFIED_UPDATE_LINEAT_TABS": return OperationType_NOTIFIED_UPDATE_LINEAT_TABS, nil 
  case "UPDATE_ROOM": return OperationType_UPDATE_ROOM, nil 
  case "NOTIFIED_BEACON_DETECTED": return OperationType_NOTIFIED_BEACON_DETECTED, nil 
  case "UPDATE_EXTENDED_PROFILE": return OperationType_UPDATE_EXTENDED_PROFILE, nil 
  case "ADD_FOLLOW": return OperationType_ADD_FOLLOW, nil 
  case "NOTIFIED_ADD_FOLLOW": return OperationType_NOTIFIED_ADD_FOLLOW, nil 
  case "DELETE_FOLLOW": return OperationType_DELETE_FOLLOW, nil 
  case "NOTIFIED_DELETE_FOLLOW": return OperationType_NOTIFIED_DELETE_FOLLOW, nil 
  case "UPDATE_TIMELINE_SETTINGS": return OperationType_UPDATE_TIMELINE_SETTINGS, nil 
  case "NOTIFIED_FRIEND_REQUEST": return OperationType_NOTIFIED_FRIEND_REQUEST, nil 
  case "UPDATE_RINGBACK_TONE": return OperationType_UPDATE_RINGBACK_TONE, nil 
  case "NOTIFIED_POSTBACK": return OperationType_NOTIFIED_POSTBACK, nil 
  case "RECEIVE_READ_WATERMARK": return OperationType_RECEIVE_READ_WATERMARK, nil 
  case "NOTIFIED_MESSAGE_DELIVERED": return OperationType_NOTIFIED_MESSAGE_DELIVERED, nil 
  case "NOTIFIED_UPDATE_CHAT_BAR": return OperationType_NOTIFIED_UPDATE_CHAT_BAR, nil 
  case "NOTIFIED_CHATAPP_INSTALLED": return OperationType_NOTIFIED_CHATAPP_INSTALLED, nil 
  case "NOTIFIED_CHATAPP_UPDATED": return OperationType_NOTIFIED_CHATAPP_UPDATED, nil 
  case "NOTIFIED_CHATAPP_NEW_MARK": return OperationType_NOTIFIED_CHATAPP_NEW_MARK, nil 
  case "NOTIFIED_CHATAPP_DELETED": return OperationType_NOTIFIED_CHATAPP_DELETED, nil 
  case "NOTIFIED_CHATAPP_SYNC": return OperationType_NOTIFIED_CHATAPP_SYNC, nil 
  case "NOTIFIED_UPDATE_MESSAGE": return OperationType_NOTIFIED_UPDATE_MESSAGE, nil 
  case "UPDATE_CHATROOMBGM": return OperationType_UPDATE_CHATROOMBGM, nil 
  case "NOTIFIED_UPDATE_CHATROOMBGM": return OperationType_NOTIFIED_UPDATE_CHATROOMBGM, nil 
  case "UPDATE_RINGTONE": return OperationType_UPDATE_RINGTONE, nil 
  case "UPDATE_USER_SETTINGS": return OperationType_UPDATE_USER_SETTINGS, nil 
  case "NOTIFIED_UPDATE_STATUS_BAR": return OperationType_NOTIFIED_UPDATE_STATUS_BAR, nil 
  case "CREATE_CHAT": return OperationType_CREATE_CHAT, nil 
  case "UPDATE_CHAT": return OperationType_UPDATE_CHAT, nil 
  case "NOTIFIED_UPDATE_CHAT": return OperationType_NOTIFIED_UPDATE_CHAT, nil 
  case "INVITE_INTO_CHAT": return OperationType_INVITE_INTO_CHAT, nil 
  case "NOTIFIED_INVITE_INTO_CHAT": return OperationType_NOTIFIED_INVITE_INTO_CHAT, nil 
  case "CANCEL_CHAT_INVITATION": return OperationType_CANCEL_CHAT_INVITATION, nil 
  case "DELETE_SELF_FROM_CHAT": return OperationType_DELETE_SELF_FROM_CHAT, nil 
  case "NOTIFIED_DELETE_SELF_FROM_CHAT": return OperationType_NOTIFIED_DELETE_SELF_FROM_CHAT, nil 
  case "NOTIFIED_ACCEPT_CHAT_INVITATION": return OperationType_NOTIFIED_ACCEPT_CHAT_INVITATION, nil 
  case "DELETE_OTHER_FROM_CHAT": return OperationType_DELETE_OTHER_FROM_CHAT, nil 
  case "NOTIFIED_DELETE_OTHER_FROM_CHAT": return OperationType_NOTIFIED_DELETE_OTHER_FROM_CHAT, nil 
  case "NOTIFIED_CONTACT_CALENDAR_EVENT": return OperationType_NOTIFIED_CONTACT_CALENDAR_EVENT, nil 
  case "UPDATE_THINGS_OPERATIONS": return OperationType_UPDATE_THINGS_OPERATIONS, nil 
  }
  return OperationType(0), fmt.Errorf("not a valid OperationType string")
}


func OperationTypePtr(v OperationType) *OperationType { return &v }

func (p OperationType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *OperationType) UnmarshalText(text []byte) error {
q, err := OperationTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *OperationType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = OperationType(v)
return nil
}

func (p * OperationType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type OperationStatus int64
const (
  OperationStatus_NORMAL OperationStatus = 0
  OperationStatus_ALERT_DISABLED OperationStatus = 1
  OperationStatus_ALWAYS OperationStatus = 2
)

func (p OperationStatus) String() string {
  switch p {
  case OperationStatus_NORMAL: return "NORMAL"
  case OperationStatus_ALERT_DISABLED: return "ALERT_DISABLED"
  case OperationStatus_ALWAYS: return "ALWAYS"
  }
  return "<UNSET>"
}

func OperationStatusFromString(s string) (OperationStatus, error) {
  switch s {
  case "NORMAL": return OperationStatus_NORMAL, nil 
  case "ALERT_DISABLED": return OperationStatus_ALERT_DISABLED, nil 
  case "ALWAYS": return OperationStatus_ALWAYS, nil 
  }
  return OperationStatus(0), fmt.Errorf("not a valid OperationStatus string")
}


func OperationStatusPtr(v OperationStatus) *OperationStatus { return &v }

func (p OperationStatus) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *OperationStatus) UnmarshalText(text []byte) error {
q, err := OperationStatusFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *OperationStatus) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = OperationStatus(v)
return nil
}

func (p * OperationStatus) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type C60759oi int64
const (
  C60759oi_FACEBOOK C60759oi = 1
  C60759oi_SINA C60759oi = 2
  C60759oi_RENREN C60759oi = 3
  C60759oi_FEIXIN C60759oi = 4
  C60759oi_BBM C60759oi = 5
  C60759oi_APPLE C60759oi = 6
)

func (p C60759oi) String() string {
  switch p {
  case C60759oi_FACEBOOK: return "FACEBOOK"
  case C60759oi_SINA: return "SINA"
  case C60759oi_RENREN: return "RENREN"
  case C60759oi_FEIXIN: return "FEIXIN"
  case C60759oi_BBM: return "BBM"
  case C60759oi_APPLE: return "APPLE"
  }
  return "<UNSET>"
}

func C60759oiFromString(s string) (C60759oi, error) {
  switch s {
  case "FACEBOOK": return C60759oi_FACEBOOK, nil 
  case "SINA": return C60759oi_SINA, nil 
  case "RENREN": return C60759oi_RENREN, nil 
  case "FEIXIN": return C60759oi_FEIXIN, nil 
  case "BBM": return C60759oi_BBM, nil 
  case "APPLE": return C60759oi_APPLE, nil 
  }
  return C60759oi(0), fmt.Errorf("not a valid C60759oi string")
}


func C60759oiPtr(v C60759oi) *C60759oi { return &v }

func (p C60759oi) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *C60759oi) UnmarshalText(text []byte) error {
q, err := C60759oiFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *C60759oi) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = C60759oi(v)
return nil
}

func (p * C60759oi) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type AccountMigrationCheckType int64
const (
  AccountMigrationCheckType_SKIP AccountMigrationCheckType = 0
  AccountMigrationCheckType_PINCODE AccountMigrationCheckType = 1
  AccountMigrationCheckType_SECURITY_CENTER AccountMigrationCheckType = 2
)

func (p AccountMigrationCheckType) String() string {
  switch p {
  case AccountMigrationCheckType_SKIP: return "SKIP"
  case AccountMigrationCheckType_PINCODE: return "PINCODE"
  case AccountMigrationCheckType_SECURITY_CENTER: return "SECURITY_CENTER"
  }
  return "<UNSET>"
}

func AccountMigrationCheckTypeFromString(s string) (AccountMigrationCheckType, error) {
  switch s {
  case "SKIP": return AccountMigrationCheckType_SKIP, nil 
  case "PINCODE": return AccountMigrationCheckType_PINCODE, nil 
  case "SECURITY_CENTER": return AccountMigrationCheckType_SECURITY_CENTER, nil 
  }
  return AccountMigrationCheckType(0), fmt.Errorf("not a valid AccountMigrationCheckType string")
}


func AccountMigrationCheckTypePtr(v AccountMigrationCheckType) *AccountMigrationCheckType { return &v }

func (p AccountMigrationCheckType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *AccountMigrationCheckType) UnmarshalText(text []byte) error {
q, err := AccountMigrationCheckTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *AccountMigrationCheckType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = AccountMigrationCheckType(v)
return nil
}

func (p * AccountMigrationCheckType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type YearPrivacyLevelType int64
const (
  YearPrivacyLevelType_PUBLIC YearPrivacyLevelType = 0
  YearPrivacyLevelType_PRIVATE YearPrivacyLevelType = 1
)

func (p YearPrivacyLevelType) String() string {
  switch p {
  case YearPrivacyLevelType_PUBLIC: return "PUBLIC"
  case YearPrivacyLevelType_PRIVATE: return "PRIVATE"
  }
  return "<UNSET>"
}

func YearPrivacyLevelTypeFromString(s string) (YearPrivacyLevelType, error) {
  switch s {
  case "PUBLIC": return YearPrivacyLevelType_PUBLIC, nil 
  case "PRIVATE": return YearPrivacyLevelType_PRIVATE, nil 
  }
  return YearPrivacyLevelType(0), fmt.Errorf("not a valid YearPrivacyLevelType string")
}


func YearPrivacyLevelTypePtr(v YearPrivacyLevelType) *YearPrivacyLevelType { return &v }

func (p YearPrivacyLevelType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *YearPrivacyLevelType) UnmarshalText(text []byte) error {
q, err := YearPrivacyLevelTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *YearPrivacyLevelType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = YearPrivacyLevelType(v)
return nil
}

func (p * YearPrivacyLevelType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type PrivacySharePersonalInfoToFriends int64
const (
  PrivacySharePersonalInfoToFriends_NEVER_SHOW PrivacySharePersonalInfoToFriends = 0
  PrivacySharePersonalInfoToFriends_ONE_WAY PrivacySharePersonalInfoToFriends = 1
  PrivacySharePersonalInfoToFriends_MUTUAL PrivacySharePersonalInfoToFriends = 2
)

func (p PrivacySharePersonalInfoToFriends) String() string {
  switch p {
  case PrivacySharePersonalInfoToFriends_NEVER_SHOW: return "NEVER_SHOW"
  case PrivacySharePersonalInfoToFriends_ONE_WAY: return "ONE_WAY"
  case PrivacySharePersonalInfoToFriends_MUTUAL: return "MUTUAL"
  }
  return "<UNSET>"
}

func PrivacySharePersonalInfoToFriendsFromString(s string) (PrivacySharePersonalInfoToFriends, error) {
  switch s {
  case "NEVER_SHOW": return PrivacySharePersonalInfoToFriends_NEVER_SHOW, nil 
  case "ONE_WAY": return PrivacySharePersonalInfoToFriends_ONE_WAY, nil 
  case "MUTUAL": return PrivacySharePersonalInfoToFriends_MUTUAL, nil 
  }
  return PrivacySharePersonalInfoToFriends(0), fmt.Errorf("not a valid PrivacySharePersonalInfoToFriends string")
}


func PrivacySharePersonalInfoToFriendsPtr(v PrivacySharePersonalInfoToFriends) *PrivacySharePersonalInfoToFriends { return &v }

func (p PrivacySharePersonalInfoToFriends) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *PrivacySharePersonalInfoToFriends) UnmarshalText(text []byte) error {
q, err := PrivacySharePersonalInfoToFriendsFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *PrivacySharePersonalInfoToFriends) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = PrivacySharePersonalInfoToFriends(v)
return nil
}

func (p * PrivacySharePersonalInfoToFriends) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type PrivacyAgeResult_ int64
const (
  PrivacyAgeResult__OVER PrivacyAgeResult_ = 1
  PrivacyAgeResult__UNDER PrivacyAgeResult_ = 2
  PrivacyAgeResult__UNDEFINED PrivacyAgeResult_ = 3
)

func (p PrivacyAgeResult_) String() string {
  switch p {
  case PrivacyAgeResult__OVER: return "OVER"
  case PrivacyAgeResult__UNDER: return "UNDER"
  case PrivacyAgeResult__UNDEFINED: return "UNDEFINED"
  }
  return "<UNSET>"
}

func PrivacyAgeResult_FromString(s string) (PrivacyAgeResult_, error) {
  switch s {
  case "OVER": return PrivacyAgeResult__OVER, nil 
  case "UNDER": return PrivacyAgeResult__UNDER, nil 
  case "UNDEFINED": return PrivacyAgeResult__UNDEFINED, nil 
  }
  return PrivacyAgeResult_(0), fmt.Errorf("not a valid PrivacyAgeResult_ string")
}


func PrivacyAgeResult_Ptr(v PrivacyAgeResult_) *PrivacyAgeResult_ { return &v }

func (p PrivacyAgeResult_) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *PrivacyAgeResult_) UnmarshalText(text []byte) error {
q, err := PrivacyAgeResult_FromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *PrivacyAgeResult_) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = PrivacyAgeResult_(v)
return nil
}

func (p * PrivacyAgeResult_) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type IdentityProvider int64
const (
  IdentityProvider_UNKNOWN IdentityProvider = 0
  IdentityProvider_LINE IdentityProvider = 1
  IdentityProvider_NAVER_KR IdentityProvider = 2
  IdentityProvider_LINE_PHONE IdentityProvider = 3
)

func (p IdentityProvider) String() string {
  switch p {
  case IdentityProvider_UNKNOWN: return "UNKNOWN"
  case IdentityProvider_LINE: return "LINE"
  case IdentityProvider_NAVER_KR: return "NAVER_KR"
  case IdentityProvider_LINE_PHONE: return "LINE_PHONE"
  }
  return "<UNSET>"
}

func IdentityProviderFromString(s string) (IdentityProvider, error) {
  switch s {
  case "UNKNOWN": return IdentityProvider_UNKNOWN, nil 
  case "LINE": return IdentityProvider_LINE, nil 
  case "NAVER_KR": return IdentityProvider_NAVER_KR, nil 
  case "LINE_PHONE": return IdentityProvider_LINE_PHONE, nil 
  }
  return IdentityProvider(0), fmt.Errorf("not a valid IdentityProvider string")
}


func IdentityProviderPtr(v IdentityProvider) *IdentityProvider { return &v }

func (p IdentityProvider) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *IdentityProvider) UnmarshalText(text []byte) error {
q, err := IdentityProviderFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *IdentityProvider) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = IdentityProvider(v)
return nil
}

func (p * IdentityProvider) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type EmailConfirmationStatus int64
const (
  EmailConfirmationStatus_NOT_SPECIFIED EmailConfirmationStatus = 0
  EmailConfirmationStatus_NOT_YET EmailConfirmationStatus = 1
  EmailConfirmationStatus_DONE EmailConfirmationStatus = 3
  EmailConfirmationStatus_NEED_ENFORCED_INPUT EmailConfirmationStatus = 4
)

func (p EmailConfirmationStatus) String() string {
  switch p {
  case EmailConfirmationStatus_NOT_SPECIFIED: return "NOT_SPECIFIED"
  case EmailConfirmationStatus_NOT_YET: return "NOT_YET"
  case EmailConfirmationStatus_DONE: return "DONE"
  case EmailConfirmationStatus_NEED_ENFORCED_INPUT: return "NEED_ENFORCED_INPUT"
  }
  return "<UNSET>"
}

func EmailConfirmationStatusFromString(s string) (EmailConfirmationStatus, error) {
  switch s {
  case "NOT_SPECIFIED": return EmailConfirmationStatus_NOT_SPECIFIED, nil 
  case "NOT_YET": return EmailConfirmationStatus_NOT_YET, nil 
  case "DONE": return EmailConfirmationStatus_DONE, nil 
  case "NEED_ENFORCED_INPUT": return EmailConfirmationStatus_NEED_ENFORCED_INPUT, nil 
  }
  return EmailConfirmationStatus(0), fmt.Errorf("not a valid EmailConfirmationStatus string")
}


func EmailConfirmationStatusPtr(v EmailConfirmationStatus) *EmailConfirmationStatus { return &v }

func (p EmailConfirmationStatus) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *EmailConfirmationStatus) UnmarshalText(text []byte) error {
q, err := EmailConfirmationStatusFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *EmailConfirmationStatus) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = EmailConfirmationStatus(v)
return nil
}

func (p * EmailConfirmationStatus) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type AccountMigrationPincodeType int64
const (
  AccountMigrationPincodeType_NOT_APPLICABLE AccountMigrationPincodeType = 0
  AccountMigrationPincodeType_NOT_SET AccountMigrationPincodeType = 1
  AccountMigrationPincodeType_SET AccountMigrationPincodeType = 2
  AccountMigrationPincodeType_NEED_ENFORCED_INPUT AccountMigrationPincodeType = 3
)

func (p AccountMigrationPincodeType) String() string {
  switch p {
  case AccountMigrationPincodeType_NOT_APPLICABLE: return "NOT_APPLICABLE"
  case AccountMigrationPincodeType_NOT_SET: return "NOT_SET"
  case AccountMigrationPincodeType_SET: return "SET"
  case AccountMigrationPincodeType_NEED_ENFORCED_INPUT: return "NEED_ENFORCED_INPUT"
  }
  return "<UNSET>"
}

func AccountMigrationPincodeTypeFromString(s string) (AccountMigrationPincodeType, error) {
  switch s {
  case "NOT_APPLICABLE": return AccountMigrationPincodeType_NOT_APPLICABLE, nil 
  case "NOT_SET": return AccountMigrationPincodeType_NOT_SET, nil 
  case "SET": return AccountMigrationPincodeType_SET, nil 
  case "NEED_ENFORCED_INPUT": return AccountMigrationPincodeType_NEED_ENFORCED_INPUT, nil 
  }
  return AccountMigrationPincodeType(0), fmt.Errorf("not a valid AccountMigrationPincodeType string")
}


func AccountMigrationPincodeTypePtr(v AccountMigrationPincodeType) *AccountMigrationPincodeType { return &v }

func (p AccountMigrationPincodeType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *AccountMigrationPincodeType) UnmarshalText(text []byte) error {
q, err := AccountMigrationPincodeTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *AccountMigrationPincodeType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = AccountMigrationPincodeType(v)
return nil
}

func (p * AccountMigrationPincodeType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type C62606zb int64
const (
  C62606zb_PROMOTION_FRIENDS_INVITE C62606zb = 1
  C62606zb_CAPABILITY_SERVER_SIDE_SMS C62606zb = 2
  C62606zb_LINE_CLIENT_ANALYTICS_CONFIGURATION C62606zb = 3
)

func (p C62606zb) String() string {
  switch p {
  case C62606zb_PROMOTION_FRIENDS_INVITE: return "PROMOTION_FRIENDS_INVITE"
  case C62606zb_CAPABILITY_SERVER_SIDE_SMS: return "CAPABILITY_SERVER_SIDE_SMS"
  case C62606zb_LINE_CLIENT_ANALYTICS_CONFIGURATION: return "LINE_CLIENT_ANALYTICS_CONFIGURATION"
  }
  return "<UNSET>"
}

func C62606zbFromString(s string) (C62606zb, error) {
  switch s {
  case "PROMOTION_FRIENDS_INVITE": return C62606zb_PROMOTION_FRIENDS_INVITE, nil 
  case "CAPABILITY_SERVER_SIDE_SMS": return C62606zb_CAPABILITY_SERVER_SIDE_SMS, nil 
  case "LINE_CLIENT_ANALYTICS_CONFIGURATION": return C62606zb_LINE_CLIENT_ANALYTICS_CONFIGURATION, nil 
  }
  return C62606zb(0), fmt.Errorf("not a valid C62606zb string")
}


func C62606zbPtr(v C62606zb) *C62606zb { return &v }

func (p C62606zb) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *C62606zb) UnmarshalText(text []byte) error {
q, err := C62606zbFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *C62606zb) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = C62606zb(v)
return nil
}

func (p * C62606zb) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type PrivacyAllowProfileHistory int64
const (
  PrivacyAllowProfileHistory_OWNER PrivacyAllowProfileHistory = 0
  PrivacyAllowProfileHistory_FRIEND PrivacyAllowProfileHistory = 1
)

func (p PrivacyAllowProfileHistory) String() string {
  switch p {
  case PrivacyAllowProfileHistory_OWNER: return "OWNER"
  case PrivacyAllowProfileHistory_FRIEND: return "FRIEND"
  }
  return "<UNSET>"
}

func PrivacyAllowProfileHistoryFromString(s string) (PrivacyAllowProfileHistory, error) {
  switch s {
  case "OWNER": return PrivacyAllowProfileHistory_OWNER, nil 
  case "FRIEND": return PrivacyAllowProfileHistory_FRIEND, nil 
  }
  return PrivacyAllowProfileHistory(0), fmt.Errorf("not a valid PrivacyAllowProfileHistory string")
}


func PrivacyAllowProfileHistoryPtr(v PrivacyAllowProfileHistory) *PrivacyAllowProfileHistory { return &v }

func (p PrivacyAllowProfileHistory) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *PrivacyAllowProfileHistory) UnmarshalText(text []byte) error {
q, err := PrivacyAllowProfileHistoryFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *PrivacyAllowProfileHistory) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = PrivacyAllowProfileHistory(v)
return nil
}

func (p * PrivacyAllowProfileHistory) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type PrivacyStatusMessageHistory int64
const (
  PrivacyStatusMessageHistory_NONE PrivacyStatusMessageHistory = 1
  PrivacyStatusMessageHistory_ALL PrivacyStatusMessageHistory = 2
)

func (p PrivacyStatusMessageHistory) String() string {
  switch p {
  case PrivacyStatusMessageHistory_NONE: return "NONE"
  case PrivacyStatusMessageHistory_ALL: return "ALL"
  }
  return "<UNSET>"
}

func PrivacyStatusMessageHistoryFromString(s string) (PrivacyStatusMessageHistory, error) {
  switch s {
  case "NONE": return PrivacyStatusMessageHistory_NONE, nil 
  case "ALL": return PrivacyStatusMessageHistory_ALL, nil 
  }
  return PrivacyStatusMessageHistory(0), fmt.Errorf("not a valid PrivacyStatusMessageHistory string")
}


func PrivacyStatusMessageHistoryPtr(v PrivacyStatusMessageHistory) *PrivacyStatusMessageHistory { return &v }

func (p PrivacyStatusMessageHistory) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *PrivacyStatusMessageHistory) UnmarshalText(text []byte) error {
q, err := PrivacyStatusMessageHistoryFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *PrivacyStatusMessageHistory) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = PrivacyStatusMessageHistory(v)
return nil
}

func (p * PrivacyStatusMessageHistory) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type C59265fa int64
const (
  C59265fa_LOW C59265fa = 0
)

func (p C59265fa) String() string {
  switch p {
  case C59265fa_LOW: return "LOW"
  }
  return "<UNSET>"
}

func C59265faFromString(s string) (C59265fa, error) {
  switch s {
  case "LOW": return C59265fa_LOW, nil 
  }
  return C59265fa(0), fmt.Errorf("not a valid C59265fa string")
}


func C59265faPtr(v C59265fa) *C59265fa { return &v }

func (p C59265fa) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *C59265fa) UnmarshalText(text []byte) error {
q, err := C59265faFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *C59265fa) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = C59265fa(v)
return nil
}

func (p * C59265fa) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type Diff int64
const (
  Diff_ADDED Diff = 0
  Diff_UPDATED Diff = 1
  Diff_REMOVED Diff = 2
)

func (p Diff) String() string {
  switch p {
  case Diff_ADDED: return "ADDED"
  case Diff_UPDATED: return "UPDATED"
  case Diff_REMOVED: return "REMOVED"
  }
  return "<UNSET>"
}

func DiffFromString(s string) (Diff, error) {
  switch s {
  case "ADDED": return Diff_ADDED, nil 
  case "UPDATED": return Diff_UPDATED, nil 
  case "REMOVED": return Diff_REMOVED, nil 
  }
  return Diff(0), fmt.Errorf("not a valid Diff string")
}


func DiffPtr(v Diff) *Diff { return &v }

func (p Diff) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *Diff) UnmarshalText(text []byte) error {
q, err := DiffFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *Diff) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = Diff(v)
return nil
}

func (p * Diff) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type SyncTriggerReason int64
const (
  SyncTriggerReason_OTHER SyncTriggerReason = 0
  SyncTriggerReason_REVISION_GAP_TOO_LARGE SyncTriggerReason = 1
  SyncTriggerReason_OPERATION_EXPIRED SyncTriggerReason = 2
)

func (p SyncTriggerReason) String() string {
  switch p {
  case SyncTriggerReason_OTHER: return "OTHER"
  case SyncTriggerReason_REVISION_GAP_TOO_LARGE: return "REVISION_GAP_TOO_LARGE"
  case SyncTriggerReason_OPERATION_EXPIRED: return "OPERATION_EXPIRED"
  }
  return "<UNSET>"
}

func SyncTriggerReasonFromString(s string) (SyncTriggerReason, error) {
  switch s {
  case "OTHER": return SyncTriggerReason_OTHER, nil 
  case "REVISION_GAP_TOO_LARGE": return SyncTriggerReason_REVISION_GAP_TOO_LARGE, nil 
  case "OPERATION_EXPIRED": return SyncTriggerReason_OPERATION_EXPIRED, nil 
  }
  return SyncTriggerReason(0), fmt.Errorf("not a valid SyncTriggerReason string")
}


func SyncTriggerReasonPtr(v SyncTriggerReason) *SyncTriggerReason { return &v }

func (p SyncTriggerReason) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *SyncTriggerReason) UnmarshalText(text []byte) error {
q, err := SyncTriggerReasonFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *SyncTriggerReason) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = SyncTriggerReason(v)
return nil
}

func (p * SyncTriggerReason) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type SyncReason int64
const (
  SyncReason_UNSPECIFIED SyncReason = 0
  SyncReason_UNKNOWN SyncReason = 1
  SyncReason_INITIALIZATION SyncReason = 2
  SyncReason_OPERATION SyncReason = 3
  SyncReason_FULL_SYNC SyncReason = 4
  SyncReason_AUTO_REPAIR SyncReason = 5
  SyncReason_MANUAL_REPAIR SyncReason = 6
  SyncReason_INTERNAL SyncReason = 7
)

func (p SyncReason) String() string {
  switch p {
  case SyncReason_UNSPECIFIED: return "UNSPECIFIED"
  case SyncReason_UNKNOWN: return "UNKNOWN"
  case SyncReason_INITIALIZATION: return "INITIALIZATION"
  case SyncReason_OPERATION: return "OPERATION"
  case SyncReason_FULL_SYNC: return "FULL_SYNC"
  case SyncReason_AUTO_REPAIR: return "AUTO_REPAIR"
  case SyncReason_MANUAL_REPAIR: return "MANUAL_REPAIR"
  case SyncReason_INTERNAL: return "INTERNAL"
  }
  return "<UNSET>"
}

func SyncReasonFromString(s string) (SyncReason, error) {
  switch s {
  case "UNSPECIFIED": return SyncReason_UNSPECIFIED, nil 
  case "UNKNOWN": return SyncReason_UNKNOWN, nil 
  case "INITIALIZATION": return SyncReason_INITIALIZATION, nil 
  case "OPERATION": return SyncReason_OPERATION, nil 
  case "FULL_SYNC": return SyncReason_FULL_SYNC, nil 
  case "AUTO_REPAIR": return SyncReason_AUTO_REPAIR, nil 
  case "MANUAL_REPAIR": return SyncReason_MANUAL_REPAIR, nil 
  case "INTERNAL": return SyncReason_INTERNAL, nil 
  }
  return SyncReason(0), fmt.Errorf("not a valid SyncReason string")
}


func SyncReasonPtr(v SyncReason) *SyncReason { return &v }

func (p SyncReason) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *SyncReason) UnmarshalText(text []byte) error {
q, err := SyncReasonFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *SyncReason) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = SyncReason(v)
return nil
}

func (p * SyncReason) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type Direction int64
const (
  Direction_INCOMING Direction = 1
  Direction_OUTGOING Direction = 2
)

func (p Direction) String() string {
  switch p {
  case Direction_INCOMING: return "INCOMING"
  case Direction_OUTGOING: return "OUTGOING"
  }
  return "<UNSET>"
}

func DirectionFromString(s string) (Direction, error) {
  switch s {
  case "INCOMING": return Direction_INCOMING, nil 
  case "OUTGOING": return Direction_OUTGOING, nil 
  }
  return Direction(0), fmt.Errorf("not a valid Direction string")
}


func DirectionPtr(v Direction) *Direction { return &v }

func (p Direction) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *Direction) UnmarshalText(text []byte) error {
q, err := DirectionFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *Direction) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = Direction(v)
return nil
}

func (p * Direction) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type FriendRequestMethod int64
const (
  FriendRequestMethod_TIMELINE FriendRequestMethod = 1
  FriendRequestMethod_NEARBY FriendRequestMethod = 2
  FriendRequestMethod_SQUARE FriendRequestMethod = 3
)

func (p FriendRequestMethod) String() string {
  switch p {
  case FriendRequestMethod_TIMELINE: return "TIMELINE"
  case FriendRequestMethod_NEARBY: return "NEARBY"
  case FriendRequestMethod_SQUARE: return "SQUARE"
  }
  return "<UNSET>"
}

func FriendRequestMethodFromString(s string) (FriendRequestMethod, error) {
  switch s {
  case "TIMELINE": return FriendRequestMethod_TIMELINE, nil 
  case "NEARBY": return FriendRequestMethod_NEARBY, nil 
  case "SQUARE": return FriendRequestMethod_SQUARE, nil 
  }
  return FriendRequestMethod(0), fmt.Errorf("not a valid FriendRequestMethod string")
}


func FriendRequestMethodPtr(v FriendRequestMethod) *FriendRequestMethod { return &v }

func (p FriendRequestMethod) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *FriendRequestMethod) UnmarshalText(text []byte) error {
q, err := FriendRequestMethodFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *FriendRequestMethod) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = FriendRequestMethod(v)
return nil
}

func (p * FriendRequestMethod) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type C61914vb int64
const (
  C61914vb_NONE C61914vb = 0
  C61914vb_IMAGE C61914vb = 1
  C61914vb_VIDEO C61914vb = 2
  C61914vb_AUDIO C61914vb = 3
  C61914vb_HTML C61914vb = 4
  C61914vb_PDF C61914vb = 5
  C61914vb_CALL C61914vb = 6
  C61914vb_STICKER C61914vb = 7
  C61914vb_PRESENCE C61914vb = 8
  C61914vb_GIFT C61914vb = 9
  C61914vb_GROUPBOARD C61914vb = 10
  C61914vb_APPLINK C61914vb = 11
  C61914vb_LINK C61914vb = 12
  C61914vb_CONTACT C61914vb = 13
  C61914vb_FILE C61914vb = 14
  C61914vb_LOCATION C61914vb = 15
  C61914vb_POSTNOTIFICATION C61914vb = 16
  C61914vb_RICH C61914vb = 17
  C61914vb_CHATEVENT C61914vb = 18
  C61914vb_MUSIC C61914vb = 19
  C61914vb_PAYMENT C61914vb = 20
  C61914vb_EXTIMAGE C61914vb = 21
  C61914vb_FLEX C61914vb = 22
)

func (p C61914vb) String() string {
  switch p {
  case C61914vb_NONE: return "NONE"
  case C61914vb_IMAGE: return "IMAGE"
  case C61914vb_VIDEO: return "VIDEO"
  case C61914vb_AUDIO: return "AUDIO"
  case C61914vb_HTML: return "HTML"
  case C61914vb_PDF: return "PDF"
  case C61914vb_CALL: return "CALL"
  case C61914vb_STICKER: return "STICKER"
  case C61914vb_PRESENCE: return "PRESENCE"
  case C61914vb_GIFT: return "GIFT"
  case C61914vb_GROUPBOARD: return "GROUPBOARD"
  case C61914vb_APPLINK: return "APPLINK"
  case C61914vb_LINK: return "LINK"
  case C61914vb_CONTACT: return "CONTACT"
  case C61914vb_FILE: return "FILE"
  case C61914vb_LOCATION: return "LOCATION"
  case C61914vb_POSTNOTIFICATION: return "POSTNOTIFICATION"
  case C61914vb_RICH: return "RICH"
  case C61914vb_CHATEVENT: return "CHATEVENT"
  case C61914vb_MUSIC: return "MUSIC"
  case C61914vb_PAYMENT: return "PAYMENT"
  case C61914vb_EXTIMAGE: return "EXTIMAGE"
  case C61914vb_FLEX: return "FLEX"
  }
  return "<UNSET>"
}

func C61914vbFromString(s string) (C61914vb, error) {
  switch s {
  case "NONE": return C61914vb_NONE, nil 
  case "IMAGE": return C61914vb_IMAGE, nil 
  case "VIDEO": return C61914vb_VIDEO, nil 
  case "AUDIO": return C61914vb_AUDIO, nil 
  case "HTML": return C61914vb_HTML, nil 
  case "PDF": return C61914vb_PDF, nil 
  case "CALL": return C61914vb_CALL, nil 
  case "STICKER": return C61914vb_STICKER, nil 
  case "PRESENCE": return C61914vb_PRESENCE, nil 
  case "GIFT": return C61914vb_GIFT, nil 
  case "GROUPBOARD": return C61914vb_GROUPBOARD, nil 
  case "APPLINK": return C61914vb_APPLINK, nil 
  case "LINK": return C61914vb_LINK, nil 
  case "CONTACT": return C61914vb_CONTACT, nil 
  case "FILE": return C61914vb_FILE, nil 
  case "LOCATION": return C61914vb_LOCATION, nil 
  case "POSTNOTIFICATION": return C61914vb_POSTNOTIFICATION, nil 
  case "RICH": return C61914vb_RICH, nil 
  case "CHATEVENT": return C61914vb_CHATEVENT, nil 
  case "MUSIC": return C61914vb_MUSIC, nil 
  case "PAYMENT": return C61914vb_PAYMENT, nil 
  case "EXTIMAGE": return C61914vb_EXTIMAGE, nil 
  case "FLEX": return C61914vb_FLEX, nil 
  }
  return C61914vb(0), fmt.Errorf("not a valid C61914vb string")
}


func C61914vbPtr(v C61914vb) *C61914vb { return &v }

func (p C61914vb) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *C61914vb) UnmarshalText(text []byte) error {
q, err := C61914vbFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *C61914vb) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = C61914vb(v)
return nil
}

func (p * C61914vb) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type UpdatedAttribute int64
const (
  UpdatedAttribute_NAME UpdatedAttribute = 1
  UpdatedAttribute_PICTURE_STATUS UpdatedAttribute = 2
  UpdatedAttribute_PREVENTED_JOIN_BY_TICKET UpdatedAttribute = 4
  UpdatedAttribute_NOTIFICATION_SETTING UpdatedAttribute = 8
  UpdatedAttribute_INVITATION_TICKET UpdatedAttribute = 16
  UpdatedAttribute_FAVORITE_TIMESTAMP UpdatedAttribute = 32
  UpdatedAttribute_CHAT_TYPE UpdatedAttribute = 64
)

func (p UpdatedAttribute) String() string {
  switch p {
  case UpdatedAttribute_NAME: return "NAME"
  case UpdatedAttribute_PICTURE_STATUS: return "PICTURE_STATUS"
  case UpdatedAttribute_PREVENTED_JOIN_BY_TICKET: return "PREVENTED_JOIN_BY_TICKET"
  case UpdatedAttribute_NOTIFICATION_SETTING: return "NOTIFICATION_SETTING"
  case UpdatedAttribute_INVITATION_TICKET: return "INVITATION_TICKET"
  case UpdatedAttribute_FAVORITE_TIMESTAMP: return "FAVORITE_TIMESTAMP"
  case UpdatedAttribute_CHAT_TYPE: return "CHAT_TYPE"
  }
  return "<UNSET>"
}

func UpdatedAttributeFromString(s string) (UpdatedAttribute, error) {
  switch s {
  case "NAME": return UpdatedAttribute_NAME, nil 
  case "PICTURE_STATUS": return UpdatedAttribute_PICTURE_STATUS, nil 
  case "PREVENTED_JOIN_BY_TICKET": return UpdatedAttribute_PREVENTED_JOIN_BY_TICKET, nil 
  case "NOTIFICATION_SETTING": return UpdatedAttribute_NOTIFICATION_SETTING, nil 
  case "INVITATION_TICKET": return UpdatedAttribute_INVITATION_TICKET, nil 
  case "FAVORITE_TIMESTAMP": return UpdatedAttribute_FAVORITE_TIMESTAMP, nil 
  case "CHAT_TYPE": return UpdatedAttribute_CHAT_TYPE, nil 
  }
  return UpdatedAttribute(0), fmt.Errorf("not a valid UpdatedAttribute string")
}


func UpdatedAttributePtr(v UpdatedAttribute) *UpdatedAttribute { return &v }

func (p UpdatedAttribute) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *UpdatedAttribute) UnmarshalText(text []byte) error {
q, err := UpdatedAttributeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *UpdatedAttribute) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = UpdatedAttribute(v)
return nil
}

func (p * UpdatedAttribute) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type Carrier int64
const (
  Carrier_NOT_SPECIFIED Carrier = 0
  Carrier_JP_DOCOMO Carrier = 1
  Carrier_JP_AU Carrier = 2
  Carrier_JP_SOFTBANK Carrier = 3
  Carrier_JP_DOCOMO_LINE Carrier = 4
  Carrier_JP_SOFTBANK_LINE Carrier = 5
  Carrier_JP_AU_LINE Carrier = 6
  Carrier_KR_SKT Carrier = 17
  Carrier_KR_KT Carrier = 18
  Carrier_KR_LGT Carrier = 19
)

func (p Carrier) String() string {
  switch p {
  case Carrier_NOT_SPECIFIED: return "NOT_SPECIFIED"
  case Carrier_JP_DOCOMO: return "JP_DOCOMO"
  case Carrier_JP_AU: return "JP_AU"
  case Carrier_JP_SOFTBANK: return "JP_SOFTBANK"
  case Carrier_JP_DOCOMO_LINE: return "JP_DOCOMO_LINE"
  case Carrier_JP_SOFTBANK_LINE: return "JP_SOFTBANK_LINE"
  case Carrier_JP_AU_LINE: return "JP_AU_LINE"
  case Carrier_KR_SKT: return "KR_SKT"
  case Carrier_KR_KT: return "KR_KT"
  case Carrier_KR_LGT: return "KR_LGT"
  }
  return "<UNSET>"
}

func CarrierFromString(s string) (Carrier, error) {
  switch s {
  case "NOT_SPECIFIED": return Carrier_NOT_SPECIFIED, nil 
  case "JP_DOCOMO": return Carrier_JP_DOCOMO, nil 
  case "JP_AU": return Carrier_JP_AU, nil 
  case "JP_SOFTBANK": return Carrier_JP_SOFTBANK, nil 
  case "JP_DOCOMO_LINE": return Carrier_JP_DOCOMO_LINE, nil 
  case "JP_SOFTBANK_LINE": return Carrier_JP_SOFTBANK_LINE, nil 
  case "JP_AU_LINE": return Carrier_JP_AU_LINE, nil 
  case "KR_SKT": return Carrier_KR_SKT, nil 
  case "KR_KT": return Carrier_KR_KT, nil 
  case "KR_LGT": return Carrier_KR_LGT, nil 
  }
  return Carrier(0), fmt.Errorf("not a valid Carrier string")
}


func CarrierPtr(v Carrier) *Carrier { return &v }

func (p Carrier) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *Carrier) UnmarshalText(text []byte) error {
q, err := CarrierFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *Carrier) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = Carrier(v)
return nil
}

func (p * Carrier) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type ApplicationType int64
const (
  ApplicationType_IOS ApplicationType = 16
  ApplicationType_IOS_RC ApplicationType = 17
  ApplicationType_IOS_BETA ApplicationType = 18
  ApplicationType_IOS_ALPHA ApplicationType = 19
  ApplicationType_ANDROID ApplicationType = 32
  ApplicationType_ANDROID_RC ApplicationType = 33
  ApplicationType_ANDROID_BETA ApplicationType = 34
  ApplicationType_ANDROID_ALPHA ApplicationType = 35
  ApplicationType_WAP ApplicationType = 48
  ApplicationType_WAP_RC ApplicationType = 49
  ApplicationType_WAP_BETA ApplicationType = 50
  ApplicationType_WAP_ALPHA ApplicationType = 51
  ApplicationType_BOT ApplicationType = 64
  ApplicationType_BOT_RC ApplicationType = 65
  ApplicationType_BOT_BETA ApplicationType = 66
  ApplicationType_BOT_ALPHA ApplicationType = 67
  ApplicationType_WEB ApplicationType = 80
  ApplicationType_WEB_RC ApplicationType = 81
  ApplicationType_WEB_BETA ApplicationType = 82
  ApplicationType_WEB_ALPHA ApplicationType = 83
  ApplicationType_DESKTOPWIN ApplicationType = 96
  ApplicationType_DESKTOPWIN_RC ApplicationType = 97
  ApplicationType_DESKTOPWIN_BETA ApplicationType = 98
  ApplicationType_DESKTOPWIN_ALPHA ApplicationType = 99
  ApplicationType_DESKTOPMAC ApplicationType = 112
  ApplicationType_DESKTOPMAC_RC ApplicationType = 113
  ApplicationType_DESKTOPMAC_BETA ApplicationType = 114
  ApplicationType_DESKTOPMAC_ALPHA ApplicationType = 115
  ApplicationType_CHANNELGW ApplicationType = 128
  ApplicationType_CHANNELGW_BETA ApplicationType = 130
  ApplicationType_CHANNELCP ApplicationType = 144
  ApplicationType_CHANNELCP_RC ApplicationType = 145
  ApplicationType_CHANNELCP_BETA ApplicationType = 146
  ApplicationType_CHANNELCP_ALPHA ApplicationType = 147
  ApplicationType_WINPHONE ApplicationType = 160
  ApplicationType_WINPHONE_BETA ApplicationType = 162
  ApplicationType_BLACKBERRY_RC ApplicationType = 177
  ApplicationType_BLACKBERRY_BETA ApplicationType = 178
  ApplicationType_WINMETRO ApplicationType = 192
  ApplicationType_WINMETRO_RC ApplicationType = 193
  ApplicationType_WINMETRO_BETA ApplicationType = 194
  ApplicationType_WINMETRO_ALPHA ApplicationType = 195
  ApplicationType_S40 ApplicationType = 208
  ApplicationType_S40_RC ApplicationType = 209
  ApplicationType_S40_BETA ApplicationType = 210
  ApplicationType_S40_ALPHA ApplicationType = 211
  ApplicationType_CHRONO_BETA ApplicationType = 226
  ApplicationType_CHRONO_ALPHA ApplicationType = 227
  ApplicationType_TIZEN ApplicationType = 256
  ApplicationType_TIZEN_RC ApplicationType = 257
  ApplicationType_TIZEN_BETA ApplicationType = 258
  ApplicationType_TIZEN_ALPHA ApplicationType = 259
  ApplicationType_VIRTUAL ApplicationType = 272
  ApplicationType_FIREFOXOS ApplicationType = 288
  ApplicationType_FIREFOXOS_RC ApplicationType = 289
  ApplicationType_FIREFOXOS_BETA ApplicationType = 290
  ApplicationType_FIREFOXOS_ALPHA ApplicationType = 291
  ApplicationType_IOSIPAD ApplicationType = 304
  ApplicationType_IOSIPAD_RC ApplicationType = 305
  ApplicationType_IOSIPAD_BETA ApplicationType = 306
  ApplicationType_BIZIOS ApplicationType = 320
  ApplicationType_BIZIOS_RC ApplicationType = 321
  ApplicationType_BIZIOS_BETA ApplicationType = 322
  ApplicationType_BIZIOS_ALPHA ApplicationType = 323
  ApplicationType_BIZANDROID ApplicationType = 336
  ApplicationType_BIZANDROID_RC ApplicationType = 337
  ApplicationType_BIZANDROID_BETA ApplicationType = 338
  ApplicationType_BIZANDROID_ALPHA ApplicationType = 339
  ApplicationType_BIZBOT ApplicationType = 352
  ApplicationType_BIZBOT_RC ApplicationType = 353
  ApplicationType_BIZBOT_BETA ApplicationType = 354
  ApplicationType_BIZBOT_ALPHA ApplicationType = 355
  ApplicationType_CHROMEOS_RC ApplicationType = 369
  ApplicationType_CHROMEOS_BETA ApplicationType = 370
  ApplicationType_CHROMEOS_ALPHA ApplicationType = 371
  ApplicationType_ANDROIDLITE ApplicationType = 384
  ApplicationType_ANDROIDLITE_RC ApplicationType = 385
  ApplicationType_ANDROIDLITE_BETA ApplicationType = 386
  ApplicationType_ANDROIDLITE_ALPHA ApplicationType = 387
  ApplicationType_WIN10_RC ApplicationType = 401
  ApplicationType_BIZWEB ApplicationType = 416
  ApplicationType_BIZWEB_RC ApplicationType = 417
  ApplicationType_BIZWEB_BETA ApplicationType = 418
  ApplicationType_BIZWEB_ALPHA ApplicationType = 419
  ApplicationType_DUMMYPRIMARY ApplicationType = 432
  ApplicationType_DUMMYPRIMARY_RC ApplicationType = 433
  ApplicationType_DUMMYPRIMARY_BETA ApplicationType = 434
  ApplicationType_DUMMYPRIMARY_ALPHA ApplicationType = 435
  ApplicationType_SQUARE ApplicationType = 448
  ApplicationType_SQUARE_RC ApplicationType = 449
  ApplicationType_SQUARE_BETA ApplicationType = 450
  ApplicationType_INTERNAL ApplicationType = 464
  ApplicationType_INTERNAL_RC ApplicationType = 465
  ApplicationType_INTERNAL_BETA ApplicationType = 466
  ApplicationType_INTERNAL_ALPHA ApplicationType = 467
  ApplicationType_CLOVAFRIENDS_RC ApplicationType = 481
  ApplicationType_CLOVAFRIENDS_BETA ApplicationType = 482
  ApplicationType_CLOVAFRIENDS_ALPHA ApplicationType = 483
  ApplicationType_WATCHOS ApplicationType = 496
  ApplicationType_WATCHOS_RC ApplicationType = 497
  ApplicationType_WATCHOS_BETA ApplicationType = 498
  ApplicationType_WATCHOS_ALPHA ApplicationType = 499
)

func (p ApplicationType) String() string {
  switch p {
  case ApplicationType_IOS: return "IOS"
  case ApplicationType_IOS_RC: return "IOS_RC"
  case ApplicationType_IOS_BETA: return "IOS_BETA"
  case ApplicationType_IOS_ALPHA: return "IOS_ALPHA"
  case ApplicationType_ANDROID: return "ANDROID"
  case ApplicationType_ANDROID_RC: return "ANDROID_RC"
  case ApplicationType_ANDROID_BETA: return "ANDROID_BETA"
  case ApplicationType_ANDROID_ALPHA: return "ANDROID_ALPHA"
  case ApplicationType_WAP: return "WAP"
  case ApplicationType_WAP_RC: return "WAP_RC"
  case ApplicationType_WAP_BETA: return "WAP_BETA"
  case ApplicationType_WAP_ALPHA: return "WAP_ALPHA"
  case ApplicationType_BOT: return "BOT"
  case ApplicationType_BOT_RC: return "BOT_RC"
  case ApplicationType_BOT_BETA: return "BOT_BETA"
  case ApplicationType_BOT_ALPHA: return "BOT_ALPHA"
  case ApplicationType_WEB: return "WEB"
  case ApplicationType_WEB_RC: return "WEB_RC"
  case ApplicationType_WEB_BETA: return "WEB_BETA"
  case ApplicationType_WEB_ALPHA: return "WEB_ALPHA"
  case ApplicationType_DESKTOPWIN: return "DESKTOPWIN"
  case ApplicationType_DESKTOPWIN_RC: return "DESKTOPWIN_RC"
  case ApplicationType_DESKTOPWIN_BETA: return "DESKTOPWIN_BETA"
  case ApplicationType_DESKTOPWIN_ALPHA: return "DESKTOPWIN_ALPHA"
  case ApplicationType_DESKTOPMAC: return "DESKTOPMAC"
  case ApplicationType_DESKTOPMAC_RC: return "DESKTOPMAC_RC"
  case ApplicationType_DESKTOPMAC_BETA: return "DESKTOPMAC_BETA"
  case ApplicationType_DESKTOPMAC_ALPHA: return "DESKTOPMAC_ALPHA"
  case ApplicationType_CHANNELGW: return "CHANNELGW"
  case ApplicationType_CHANNELGW_BETA: return "CHANNELGW_BETA"
  case ApplicationType_CHANNELCP: return "CHANNELCP"
  case ApplicationType_CHANNELCP_RC: return "CHANNELCP_RC"
  case ApplicationType_CHANNELCP_BETA: return "CHANNELCP_BETA"
  case ApplicationType_CHANNELCP_ALPHA: return "CHANNELCP_ALPHA"
  case ApplicationType_WINPHONE: return "WINPHONE"
  case ApplicationType_WINPHONE_BETA: return "WINPHONE_BETA"
  case ApplicationType_BLACKBERRY_RC: return "BLACKBERRY_RC"
  case ApplicationType_BLACKBERRY_BETA: return "BLACKBERRY_BETA"
  case ApplicationType_WINMETRO: return "WINMETRO"
  case ApplicationType_WINMETRO_RC: return "WINMETRO_RC"
  case ApplicationType_WINMETRO_BETA: return "WINMETRO_BETA"
  case ApplicationType_WINMETRO_ALPHA: return "WINMETRO_ALPHA"
  case ApplicationType_S40: return "S40"
  case ApplicationType_S40_RC: return "S40_RC"
  case ApplicationType_S40_BETA: return "S40_BETA"
  case ApplicationType_S40_ALPHA: return "S40_ALPHA"
  case ApplicationType_CHRONO_BETA: return "CHRONO_BETA"
  case ApplicationType_CHRONO_ALPHA: return "CHRONO_ALPHA"
  case ApplicationType_TIZEN: return "TIZEN"
  case ApplicationType_TIZEN_RC: return "TIZEN_RC"
  case ApplicationType_TIZEN_BETA: return "TIZEN_BETA"
  case ApplicationType_TIZEN_ALPHA: return "TIZEN_ALPHA"
  case ApplicationType_VIRTUAL: return "VIRTUAL"
  case ApplicationType_FIREFOXOS: return "FIREFOXOS"
  case ApplicationType_FIREFOXOS_RC: return "FIREFOXOS_RC"
  case ApplicationType_FIREFOXOS_BETA: return "FIREFOXOS_BETA"
  case ApplicationType_FIREFOXOS_ALPHA: return "FIREFOXOS_ALPHA"
  case ApplicationType_IOSIPAD: return "IOSIPAD"
  case ApplicationType_IOSIPAD_RC: return "IOSIPAD_RC"
  case ApplicationType_IOSIPAD_BETA: return "IOSIPAD_BETA"
  case ApplicationType_BIZIOS: return "BIZIOS"
  case ApplicationType_BIZIOS_RC: return "BIZIOS_RC"
  case ApplicationType_BIZIOS_BETA: return "BIZIOS_BETA"
  case ApplicationType_BIZIOS_ALPHA: return "BIZIOS_ALPHA"
  case ApplicationType_BIZANDROID: return "BIZANDROID"
  case ApplicationType_BIZANDROID_RC: return "BIZANDROID_RC"
  case ApplicationType_BIZANDROID_BETA: return "BIZANDROID_BETA"
  case ApplicationType_BIZANDROID_ALPHA: return "BIZANDROID_ALPHA"
  case ApplicationType_BIZBOT: return "BIZBOT"
  case ApplicationType_BIZBOT_RC: return "BIZBOT_RC"
  case ApplicationType_BIZBOT_BETA: return "BIZBOT_BETA"
  case ApplicationType_BIZBOT_ALPHA: return "BIZBOT_ALPHA"
  case ApplicationType_CHROMEOS_RC: return "CHROMEOS_RC"
  case ApplicationType_CHROMEOS_BETA: return "CHROMEOS_BETA"
  case ApplicationType_CHROMEOS_ALPHA: return "CHROMEOS_ALPHA"
  case ApplicationType_ANDROIDLITE: return "ANDROIDLITE"
  case ApplicationType_ANDROIDLITE_RC: return "ANDROIDLITE_RC"
  case ApplicationType_ANDROIDLITE_BETA: return "ANDROIDLITE_BETA"
  case ApplicationType_ANDROIDLITE_ALPHA: return "ANDROIDLITE_ALPHA"
  case ApplicationType_WIN10_RC: return "WIN10_RC"
  case ApplicationType_BIZWEB: return "BIZWEB"
  case ApplicationType_BIZWEB_RC: return "BIZWEB_RC"
  case ApplicationType_BIZWEB_BETA: return "BIZWEB_BETA"
  case ApplicationType_BIZWEB_ALPHA: return "BIZWEB_ALPHA"
  case ApplicationType_DUMMYPRIMARY: return "DUMMYPRIMARY"
  case ApplicationType_DUMMYPRIMARY_RC: return "DUMMYPRIMARY_RC"
  case ApplicationType_DUMMYPRIMARY_BETA: return "DUMMYPRIMARY_BETA"
  case ApplicationType_DUMMYPRIMARY_ALPHA: return "DUMMYPRIMARY_ALPHA"
  case ApplicationType_SQUARE: return "SQUARE"
  case ApplicationType_SQUARE_RC: return "SQUARE_RC"
  case ApplicationType_SQUARE_BETA: return "SQUARE_BETA"
  case ApplicationType_INTERNAL: return "INTERNAL"
  case ApplicationType_INTERNAL_RC: return "INTERNAL_RC"
  case ApplicationType_INTERNAL_BETA: return "INTERNAL_BETA"
  case ApplicationType_INTERNAL_ALPHA: return "INTERNAL_ALPHA"
  case ApplicationType_CLOVAFRIENDS_RC: return "CLOVAFRIENDS_RC"
  case ApplicationType_CLOVAFRIENDS_BETA: return "CLOVAFRIENDS_BETA"
  case ApplicationType_CLOVAFRIENDS_ALPHA: return "CLOVAFRIENDS_ALPHA"
  case ApplicationType_WATCHOS: return "WATCHOS"
  case ApplicationType_WATCHOS_RC: return "WATCHOS_RC"
  case ApplicationType_WATCHOS_BETA: return "WATCHOS_BETA"
  case ApplicationType_WATCHOS_ALPHA: return "WATCHOS_ALPHA"
  }
  return "<UNSET>"
}

func ApplicationTypeFromString(s string) (ApplicationType, error) {
  switch s {
  case "IOS": return ApplicationType_IOS, nil 
  case "IOS_RC": return ApplicationType_IOS_RC, nil 
  case "IOS_BETA": return ApplicationType_IOS_BETA, nil 
  case "IOS_ALPHA": return ApplicationType_IOS_ALPHA, nil 
  case "ANDROID": return ApplicationType_ANDROID, nil 
  case "ANDROID_RC": return ApplicationType_ANDROID_RC, nil 
  case "ANDROID_BETA": return ApplicationType_ANDROID_BETA, nil 
  case "ANDROID_ALPHA": return ApplicationType_ANDROID_ALPHA, nil 
  case "WAP": return ApplicationType_WAP, nil 
  case "WAP_RC": return ApplicationType_WAP_RC, nil 
  case "WAP_BETA": return ApplicationType_WAP_BETA, nil 
  case "WAP_ALPHA": return ApplicationType_WAP_ALPHA, nil 
  case "BOT": return ApplicationType_BOT, nil 
  case "BOT_RC": return ApplicationType_BOT_RC, nil 
  case "BOT_BETA": return ApplicationType_BOT_BETA, nil 
  case "BOT_ALPHA": return ApplicationType_BOT_ALPHA, nil 
  case "WEB": return ApplicationType_WEB, nil 
  case "WEB_RC": return ApplicationType_WEB_RC, nil 
  case "WEB_BETA": return ApplicationType_WEB_BETA, nil 
  case "WEB_ALPHA": return ApplicationType_WEB_ALPHA, nil 
  case "DESKTOPWIN": return ApplicationType_DESKTOPWIN, nil 
  case "DESKTOPWIN_RC": return ApplicationType_DESKTOPWIN_RC, nil 
  case "DESKTOPWIN_BETA": return ApplicationType_DESKTOPWIN_BETA, nil 
  case "DESKTOPWIN_ALPHA": return ApplicationType_DESKTOPWIN_ALPHA, nil 
  case "DESKTOPMAC": return ApplicationType_DESKTOPMAC, nil 
  case "DESKTOPMAC_RC": return ApplicationType_DESKTOPMAC_RC, nil 
  case "DESKTOPMAC_BETA": return ApplicationType_DESKTOPMAC_BETA, nil 
  case "DESKTOPMAC_ALPHA": return ApplicationType_DESKTOPMAC_ALPHA, nil 
  case "CHANNELGW": return ApplicationType_CHANNELGW, nil 
  case "CHANNELGW_BETA": return ApplicationType_CHANNELGW_BETA, nil 
  case "CHANNELCP": return ApplicationType_CHANNELCP, nil 
  case "CHANNELCP_RC": return ApplicationType_CHANNELCP_RC, nil 
  case "CHANNELCP_BETA": return ApplicationType_CHANNELCP_BETA, nil 
  case "CHANNELCP_ALPHA": return ApplicationType_CHANNELCP_ALPHA, nil 
  case "WINPHONE": return ApplicationType_WINPHONE, nil 
  case "WINPHONE_BETA": return ApplicationType_WINPHONE_BETA, nil 
  case "BLACKBERRY_RC": return ApplicationType_BLACKBERRY_RC, nil 
  case "BLACKBERRY_BETA": return ApplicationType_BLACKBERRY_BETA, nil 
  case "WINMETRO": return ApplicationType_WINMETRO, nil 
  case "WINMETRO_RC": return ApplicationType_WINMETRO_RC, nil 
  case "WINMETRO_BETA": return ApplicationType_WINMETRO_BETA, nil 
  case "WINMETRO_ALPHA": return ApplicationType_WINMETRO_ALPHA, nil 
  case "S40": return ApplicationType_S40, nil 
  case "S40_RC": return ApplicationType_S40_RC, nil 
  case "S40_BETA": return ApplicationType_S40_BETA, nil 
  case "S40_ALPHA": return ApplicationType_S40_ALPHA, nil 
  case "CHRONO_BETA": return ApplicationType_CHRONO_BETA, nil 
  case "CHRONO_ALPHA": return ApplicationType_CHRONO_ALPHA, nil 
  case "TIZEN": return ApplicationType_TIZEN, nil 
  case "TIZEN_RC": return ApplicationType_TIZEN_RC, nil 
  case "TIZEN_BETA": return ApplicationType_TIZEN_BETA, nil 
  case "TIZEN_ALPHA": return ApplicationType_TIZEN_ALPHA, nil 
  case "VIRTUAL": return ApplicationType_VIRTUAL, nil 
  case "FIREFOXOS": return ApplicationType_FIREFOXOS, nil 
  case "FIREFOXOS_RC": return ApplicationType_FIREFOXOS_RC, nil 
  case "FIREFOXOS_BETA": return ApplicationType_FIREFOXOS_BETA, nil 
  case "FIREFOXOS_ALPHA": return ApplicationType_FIREFOXOS_ALPHA, nil 
  case "IOSIPAD": return ApplicationType_IOSIPAD, nil 
  case "IOSIPAD_RC": return ApplicationType_IOSIPAD_RC, nil 
  case "IOSIPAD_BETA": return ApplicationType_IOSIPAD_BETA, nil 
  case "BIZIOS": return ApplicationType_BIZIOS, nil 
  case "BIZIOS_RC": return ApplicationType_BIZIOS_RC, nil 
  case "BIZIOS_BETA": return ApplicationType_BIZIOS_BETA, nil 
  case "BIZIOS_ALPHA": return ApplicationType_BIZIOS_ALPHA, nil 
  case "BIZANDROID": return ApplicationType_BIZANDROID, nil 
  case "BIZANDROID_RC": return ApplicationType_BIZANDROID_RC, nil 
  case "BIZANDROID_BETA": return ApplicationType_BIZANDROID_BETA, nil 
  case "BIZANDROID_ALPHA": return ApplicationType_BIZANDROID_ALPHA, nil 
  case "BIZBOT": return ApplicationType_BIZBOT, nil 
  case "BIZBOT_RC": return ApplicationType_BIZBOT_RC, nil 
  case "BIZBOT_BETA": return ApplicationType_BIZBOT_BETA, nil 
  case "BIZBOT_ALPHA": return ApplicationType_BIZBOT_ALPHA, nil 
  case "CHROMEOS_RC": return ApplicationType_CHROMEOS_RC, nil 
  case "CHROMEOS_BETA": return ApplicationType_CHROMEOS_BETA, nil 
  case "CHROMEOS_ALPHA": return ApplicationType_CHROMEOS_ALPHA, nil 
  case "ANDROIDLITE": return ApplicationType_ANDROIDLITE, nil 
  case "ANDROIDLITE_RC": return ApplicationType_ANDROIDLITE_RC, nil 
  case "ANDROIDLITE_BETA": return ApplicationType_ANDROIDLITE_BETA, nil 
  case "ANDROIDLITE_ALPHA": return ApplicationType_ANDROIDLITE_ALPHA, nil 
  case "WIN10_RC": return ApplicationType_WIN10_RC, nil 
  case "BIZWEB": return ApplicationType_BIZWEB, nil 
  case "BIZWEB_RC": return ApplicationType_BIZWEB_RC, nil 
  case "BIZWEB_BETA": return ApplicationType_BIZWEB_BETA, nil 
  case "BIZWEB_ALPHA": return ApplicationType_BIZWEB_ALPHA, nil 
  case "DUMMYPRIMARY": return ApplicationType_DUMMYPRIMARY, nil 
  case "DUMMYPRIMARY_RC": return ApplicationType_DUMMYPRIMARY_RC, nil 
  case "DUMMYPRIMARY_BETA": return ApplicationType_DUMMYPRIMARY_BETA, nil 
  case "DUMMYPRIMARY_ALPHA": return ApplicationType_DUMMYPRIMARY_ALPHA, nil 
  case "SQUARE": return ApplicationType_SQUARE, nil 
  case "SQUARE_RC": return ApplicationType_SQUARE_RC, nil 
  case "SQUARE_BETA": return ApplicationType_SQUARE_BETA, nil 
  case "INTERNAL": return ApplicationType_INTERNAL, nil 
  case "INTERNAL_RC": return ApplicationType_INTERNAL_RC, nil 
  case "INTERNAL_BETA": return ApplicationType_INTERNAL_BETA, nil 
  case "INTERNAL_ALPHA": return ApplicationType_INTERNAL_ALPHA, nil 
  case "CLOVAFRIENDS_RC": return ApplicationType_CLOVAFRIENDS_RC, nil 
  case "CLOVAFRIENDS_BETA": return ApplicationType_CLOVAFRIENDS_BETA, nil 
  case "CLOVAFRIENDS_ALPHA": return ApplicationType_CLOVAFRIENDS_ALPHA, nil 
  case "WATCHOS": return ApplicationType_WATCHOS, nil 
  case "WATCHOS_RC": return ApplicationType_WATCHOS_RC, nil 
  case "WATCHOS_BETA": return ApplicationType_WATCHOS_BETA, nil 
  case "WATCHOS_ALPHA": return ApplicationType_WATCHOS_ALPHA, nil 
  }
  return ApplicationType(0), fmt.Errorf("not a valid ApplicationType string")
}


func ApplicationTypePtr(v ApplicationType) *ApplicationType { return &v }

func (p ApplicationType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *ApplicationType) UnmarshalText(text []byte) error {
q, err := ApplicationTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *ApplicationType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = ApplicationType(v)
return nil
}

func (p * ApplicationType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type VerificationSessionDataMethod int64
const (
  VerificationSessionDataMethod_NO_AVAILABLE VerificationSessionDataMethod = 0
  VerificationSessionDataMethod_PIN_VIA_SMS VerificationSessionDataMethod = 1
  VerificationSessionDataMethod_CALLERID_INDIGO VerificationSessionDataMethod = 2
  VerificationSessionDataMethod_PIN_VIA_TTS VerificationSessionDataMethod = 4
  VerificationSessionDataMethod_SKIP VerificationSessionDataMethod = 10
)

func (p VerificationSessionDataMethod) String() string {
  switch p {
  case VerificationSessionDataMethod_NO_AVAILABLE: return "NO_AVAILABLE"
  case VerificationSessionDataMethod_PIN_VIA_SMS: return "PIN_VIA_SMS"
  case VerificationSessionDataMethod_CALLERID_INDIGO: return "CALLERID_INDIGO"
  case VerificationSessionDataMethod_PIN_VIA_TTS: return "PIN_VIA_TTS"
  case VerificationSessionDataMethod_SKIP: return "SKIP"
  }
  return "<UNSET>"
}

func VerificationSessionDataMethodFromString(s string) (VerificationSessionDataMethod, error) {
  switch s {
  case "NO_AVAILABLE": return VerificationSessionDataMethod_NO_AVAILABLE, nil 
  case "PIN_VIA_SMS": return VerificationSessionDataMethod_PIN_VIA_SMS, nil 
  case "CALLERID_INDIGO": return VerificationSessionDataMethod_CALLERID_INDIGO, nil 
  case "PIN_VIA_TTS": return VerificationSessionDataMethod_PIN_VIA_TTS, nil 
  case "SKIP": return VerificationSessionDataMethod_SKIP, nil 
  }
  return VerificationSessionDataMethod(0), fmt.Errorf("not a valid VerificationSessionDataMethod string")
}


func VerificationSessionDataMethodPtr(v VerificationSessionDataMethod) *VerificationSessionDataMethod { return &v }

func (p VerificationSessionDataMethod) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *VerificationSessionDataMethod) UnmarshalText(text []byte) error {
q, err := VerificationSessionDataMethodFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *VerificationSessionDataMethod) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = VerificationSessionDataMethod(v)
return nil
}

func (p * VerificationSessionDataMethod) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type Y30 int64
const (
  Y30_NO_AVAILABLE Y30 = 0
  Y30_PIN_VIA_SMS Y30 = 1
  Y30_CALLERID_INDIGO Y30 = 2
  Y30_PIN_VIA_TTS Y30 = 4
  Y30_SKIP Y30 = 10
)

func (p Y30) String() string {
  switch p {
  case Y30_NO_AVAILABLE: return "NO_AVAILABLE"
  case Y30_PIN_VIA_SMS: return "PIN_VIA_SMS"
  case Y30_CALLERID_INDIGO: return "CALLERID_INDIGO"
  case Y30_PIN_VIA_TTS: return "PIN_VIA_TTS"
  case Y30_SKIP: return "SKIP"
  }
  return "<UNSET>"
}

func Y30FromString(s string) (Y30, error) {
  switch s {
  case "NO_AVAILABLE": return Y30_NO_AVAILABLE, nil 
  case "PIN_VIA_SMS": return Y30_PIN_VIA_SMS, nil 
  case "CALLERID_INDIGO": return Y30_CALLERID_INDIGO, nil 
  case "PIN_VIA_TTS": return Y30_PIN_VIA_TTS, nil 
  case "SKIP": return Y30_SKIP, nil 
  }
  return Y30(0), fmt.Errorf("not a valid Y30 string")
}


func Y30Ptr(v Y30) *Y30 { return &v }

func (p Y30) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *Y30) UnmarshalText(text []byte) error {
q, err := Y30FromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *Y30) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = Y30(v)
return nil
}

func (p * Y30) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type VerificationResult_ int64
const (
  VerificationResult__FAILED VerificationResult_ = 0
  VerificationResult__OK_NOT_REGISTERED_YET VerificationResult_ = 1
  VerificationResult__OK_REGISTERED_WITH_SAME_DEVICE VerificationResult_ = 2
  VerificationResult__OK_REGISTERED_WITH_ANOTHER_DEVICE VerificationResult_ = 3
)

func (p VerificationResult_) String() string {
  switch p {
  case VerificationResult__FAILED: return "FAILED"
  case VerificationResult__OK_NOT_REGISTERED_YET: return "OK_NOT_REGISTERED_YET"
  case VerificationResult__OK_REGISTERED_WITH_SAME_DEVICE: return "OK_REGISTERED_WITH_SAME_DEVICE"
  case VerificationResult__OK_REGISTERED_WITH_ANOTHER_DEVICE: return "OK_REGISTERED_WITH_ANOTHER_DEVICE"
  }
  return "<UNSET>"
}

func VerificationResult_FromString(s string) (VerificationResult_, error) {
  switch s {
  case "FAILED": return VerificationResult__FAILED, nil 
  case "OK_NOT_REGISTERED_YET": return VerificationResult__OK_NOT_REGISTERED_YET, nil 
  case "OK_REGISTERED_WITH_SAME_DEVICE": return VerificationResult__OK_REGISTERED_WITH_SAME_DEVICE, nil 
  case "OK_REGISTERED_WITH_ANOTHER_DEVICE": return VerificationResult__OK_REGISTERED_WITH_ANOTHER_DEVICE, nil 
  }
  return VerificationResult_(0), fmt.Errorf("not a valid VerificationResult_ string")
}


func VerificationResult_Ptr(v VerificationResult_) *VerificationResult_ { return &v }

func (p VerificationResult_) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *VerificationResult_) UnmarshalText(text []byte) error {
q, err := VerificationResult_FromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *VerificationResult_) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = VerificationResult_(v)
return nil
}

func (p * VerificationResult_) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type FeatureType int64
const (
  FeatureType_OBS_VIDEO FeatureType = 1
  FeatureType_OBS_GENERAL FeatureType = 2
  FeatureType_OBS_RINGBACK_TONE FeatureType = 3
)

func (p FeatureType) String() string {
  switch p {
  case FeatureType_OBS_VIDEO: return "OBS_VIDEO"
  case FeatureType_OBS_GENERAL: return "OBS_GENERAL"
  case FeatureType_OBS_RINGBACK_TONE: return "OBS_RINGBACK_TONE"
  }
  return "<UNSET>"
}

func FeatureTypeFromString(s string) (FeatureType, error) {
  switch s {
  case "OBS_VIDEO": return FeatureType_OBS_VIDEO, nil 
  case "OBS_GENERAL": return FeatureType_OBS_GENERAL, nil 
  case "OBS_RINGBACK_TONE": return FeatureType_OBS_RINGBACK_TONE, nil 
  }
  return FeatureType(0), fmt.Errorf("not a valid FeatureType string")
}


func FeatureTypePtr(v FeatureType) *FeatureType { return &v }

func (p FeatureType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *FeatureType) UnmarshalText(text []byte) error {
q, err := FeatureTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *FeatureType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = FeatureType(v)
return nil
}

func (p * FeatureType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type NetworkType int64
const (
  NetworkType_UNKNOWN NetworkType = 0
  NetworkType_WIFI NetworkType = 1
  NetworkType_CELLULAR_NETWORK NetworkType = 2
)

func (p NetworkType) String() string {
  switch p {
  case NetworkType_UNKNOWN: return "UNKNOWN"
  case NetworkType_WIFI: return "WIFI"
  case NetworkType_CELLULAR_NETWORK: return "CELLULAR_NETWORK"
  }
  return "<UNSET>"
}

func NetworkTypeFromString(s string) (NetworkType, error) {
  switch s {
  case "UNKNOWN": return NetworkType_UNKNOWN, nil 
  case "WIFI": return NetworkType_WIFI, nil 
  case "CELLULAR_NETWORK": return NetworkType_CELLULAR_NETWORK, nil 
  }
  return NetworkType(0), fmt.Errorf("not a valid NetworkType string")
}


func NetworkTypePtr(v NetworkType) *NetworkType { return &v }

func (p NetworkType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *NetworkType) UnmarshalText(text []byte) error {
q, err := NetworkTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *NetworkType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = NetworkType(v)
return nil
}

func (p * NetworkType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type TalkExceptionCode int64
const (
  TalkExceptionCode_ILLEGAL_ARGUMENT TalkExceptionCode = 0
  TalkExceptionCode_AUTHENTICATION_FAILED TalkExceptionCode = 1
  TalkExceptionCode_DB_FAILED TalkExceptionCode = 2
  TalkExceptionCode_INVALID_STATE TalkExceptionCode = 3
  TalkExceptionCode_EXCESSIVE_ACCESS TalkExceptionCode = 4
  TalkExceptionCode_NOT_FOUND TalkExceptionCode = 5
  TalkExceptionCode_INVALID_LENGTH TalkExceptionCode = 6
  TalkExceptionCode_NOT_AVAILABLE_USER TalkExceptionCode = 7
  TalkExceptionCode_NOT_AUTHORIZED_DEVICE TalkExceptionCode = 8
  TalkExceptionCode_INVALID_MID TalkExceptionCode = 9
  TalkExceptionCode_NOT_A_MEMBER TalkExceptionCode = 10
  TalkExceptionCode_INCOMPATIBLE_APP_VERSION TalkExceptionCode = 11
  TalkExceptionCode_NOT_READY TalkExceptionCode = 12
  TalkExceptionCode_NOT_AVAILABLE_SESSION TalkExceptionCode = 13
  TalkExceptionCode_NOT_AUTHORIZED_SESSION TalkExceptionCode = 14
  TalkExceptionCode_SYSTEM_ERROR TalkExceptionCode = 15
  TalkExceptionCode_NO_AVAILABLE_VERIFICATION_METHOD TalkExceptionCode = 16
  TalkExceptionCode_NOT_AUTHENTICATED TalkExceptionCode = 17
  TalkExceptionCode_INVALID_IDENTITY_CREDENTIAL TalkExceptionCode = 18
  TalkExceptionCode_NOT_AVAILABLE_IDENTITY_IDENTIFIER TalkExceptionCode = 19
  TalkExceptionCode_INTERNAL_ERROR TalkExceptionCode = 20
  TalkExceptionCode_NO_SUCH_IDENTITY_IDENFIER TalkExceptionCode = 21
  TalkExceptionCode_DEACTIVATED_ACCOUNT_BOUND_TO_THIS_IDENTITY TalkExceptionCode = 22
  TalkExceptionCode_ILLEGAL_IDENTITY_CREDENTIAL TalkExceptionCode = 23
  TalkExceptionCode_UNKNOWN_CHANNEL TalkExceptionCode = 24
  TalkExceptionCode_NO_SUCH_MESSAGE_BOX TalkExceptionCode = 25
  TalkExceptionCode_NOT_AVAILABLE_MESSAGE_BOX TalkExceptionCode = 26
  TalkExceptionCode_CHANNEL_DOES_NOT_MATCH TalkExceptionCode = 27
  TalkExceptionCode_NOT_YOUR_MESSAGE TalkExceptionCode = 28
  TalkExceptionCode_MESSAGE_DEFINED_ERROR TalkExceptionCode = 29
  TalkExceptionCode_USER_CANNOT_ACCEPT_PRESENTS TalkExceptionCode = 30
  TalkExceptionCode_USER_NOT_STICKER_OWNER TalkExceptionCode = 32
  TalkExceptionCode_MAINTENANCE_ERROR TalkExceptionCode = 33
  TalkExceptionCode_ACCOUNT_NOT_MATCHED TalkExceptionCode = 34
  TalkExceptionCode_ABUSE_BLOCK TalkExceptionCode = 35
  TalkExceptionCode_NOT_FRIEND TalkExceptionCode = 36
  TalkExceptionCode_NOT_ALLOWED_CALL TalkExceptionCode = 37
  TalkExceptionCode_BLOCK_FRIEND TalkExceptionCode = 38
  TalkExceptionCode_INCOMPATIBLE_VOIP_VERSION TalkExceptionCode = 39
  TalkExceptionCode_INVALID_SNS_ACCESS_TOKEN TalkExceptionCode = 40
  TalkExceptionCode_EXTERNAL_SERVICE_NOT_AVAILABLE TalkExceptionCode = 41
  TalkExceptionCode_NOT_ALLOWED_ADD_CONTACT TalkExceptionCode = 42
  TalkExceptionCode_NOT_CERTIFICATED TalkExceptionCode = 43
  TalkExceptionCode_NOT_ALLOWED_SECONDARY_DEVICE TalkExceptionCode = 44
  TalkExceptionCode_INVALID_PIN_CODE TalkExceptionCode = 45
  TalkExceptionCode_NOT_FOUND_IDENTITY_CREDENTIAL TalkExceptionCode = 46
  TalkExceptionCode_EXCEED_FILE_MAX_SIZE TalkExceptionCode = 47
  TalkExceptionCode_EXCEED_DAILY_QUOTA TalkExceptionCode = 48
  TalkExceptionCode_NOT_SUPPORT_SEND_FILE TalkExceptionCode = 49
  TalkExceptionCode_MUST_UPGRADE TalkExceptionCode = 50
  TalkExceptionCode_NOT_AVAILABLE_PIN_CODE_SESSION TalkExceptionCode = 51
  TalkExceptionCode_EXPIRED_REVISION TalkExceptionCode = 52
  TalkExceptionCode_NOT_YET_PHONE_NUMBER TalkExceptionCode = 54
  TalkExceptionCode_BAD_CALL_NUMBER TalkExceptionCode = 55
  TalkExceptionCode_UNAVAILABLE_CALL_NUMBER TalkExceptionCode = 56
  TalkExceptionCode_NOT_SUPPORT_CALL_SERVICE TalkExceptionCode = 57
  TalkExceptionCode_CONGESTION_CONTROL TalkExceptionCode = 58
  TalkExceptionCode_NO_BALANCE TalkExceptionCode = 59
  TalkExceptionCode_NOT_PERMITTED_CALLER_ID TalkExceptionCode = 60
  TalkExceptionCode_NO_CALLER_ID_LIMIT_EXCEEDED TalkExceptionCode = 61
  TalkExceptionCode_CALLER_ID_VERIFICATION_REQUIRED TalkExceptionCode = 62
  TalkExceptionCode_NO_CALLER_ID_LIMIT_EXCEEDED_AND_VERIFICATION_REQUIRED TalkExceptionCode = 63
  TalkExceptionCode_MESSAGE_NOT_FOUND TalkExceptionCode = 64
  TalkExceptionCode_INVALID_ACCOUNT_MIGRATION_PINCODE_FORMAT TalkExceptionCode = 65
  TalkExceptionCode_ACCOUNT_MIGRATION_PINCODE_NOT_MATCHED TalkExceptionCode = 66
  TalkExceptionCode_ACCOUNT_MIGRATION_PINCODE_BLOCKED TalkExceptionCode = 67
  TalkExceptionCode_INVALID_PASSWORD_FORMAT TalkExceptionCode = 69
  TalkExceptionCode_FEATURE_RESTRICTED TalkExceptionCode = 70
  TalkExceptionCode_MESSAGE_NOT_DESTRUCTIBLE TalkExceptionCode = 71
  TalkExceptionCode_PAID_CALL_REDEEM_FAILED TalkExceptionCode = 72
  TalkExceptionCode_PREVENTED_JOIN_BY_TICKET TalkExceptionCode = 73
  TalkExceptionCode_SEND_MESSAGE_NOT_PERMITTED_FROM_LINE_AT TalkExceptionCode = 75
  TalkExceptionCode_SEND_MESSAGE_NOT_PERMITTED_WHILE_AUTO_REPLY TalkExceptionCode = 76
  TalkExceptionCode_SECURITY_CENTER_NOT_VERIFIED TalkExceptionCode = 77
  TalkExceptionCode_SECURITY_CENTER_BLOCKED_BY_SETTING TalkExceptionCode = 78
  TalkExceptionCode_SECURITY_CENTER_BLOCKED TalkExceptionCode = 79
  TalkExceptionCode_TALK_PROXY_EXCEPTION TalkExceptionCode = 80
  TalkExceptionCode_E2EE_INVALID_PROTOCOL TalkExceptionCode = 81
  TalkExceptionCode_E2EE_RETRY_ENCRYPT TalkExceptionCode = 82
  TalkExceptionCode_E2EE_UPDATE_SENDER_KEY TalkExceptionCode = 83
  TalkExceptionCode_E2EE_UPDATE_RECEIVER_KEY TalkExceptionCode = 84
  TalkExceptionCode_E2EE_INVALID_ARGUMENT TalkExceptionCode = 85
  TalkExceptionCode_E2EE_INVALID_VERSION TalkExceptionCode = 86
  TalkExceptionCode_E2EE_SENDER_DISABLED TalkExceptionCode = 87
  TalkExceptionCode_E2EE_RECEIVER_DISABLED TalkExceptionCode = 88
  TalkExceptionCode_E2EE_SENDER_NOT_ALLOWED TalkExceptionCode = 89
  TalkExceptionCode_E2EE_RECEIVER_NOT_ALLOWED TalkExceptionCode = 90
  TalkExceptionCode_E2EE_RESEND_FAIL TalkExceptionCode = 91
  TalkExceptionCode_E2EE_RESEND_OK TalkExceptionCode = 92
  TalkExceptionCode_HITOKOTO_BACKUP_NO_AVAILABLE_DATA TalkExceptionCode = 93
  TalkExceptionCode_E2EE_UPDATE_PRIMARY_DEVICE TalkExceptionCode = 94
  TalkExceptionCode_SUCCESS TalkExceptionCode = 95
  TalkExceptionCode_CANCEL TalkExceptionCode = 96
  TalkExceptionCode_E2EE_PRIMARY_NOT_SUPPORT TalkExceptionCode = 97
  TalkExceptionCode_E2EE_RETRY_PLAIN TalkExceptionCode = 98
  TalkExceptionCode_E2EE_RECREATE_GROUP_KEY TalkExceptionCode = 99
  TalkExceptionCode_E2EE_GROUP_TOO_MANY_MEMBERS TalkExceptionCode = 100
  TalkExceptionCode_SERVER_BUSY TalkExceptionCode = 101
  TalkExceptionCode_NOT_ALLOWED_ADD_FOLLOW TalkExceptionCode = 102
  TalkExceptionCode_INCOMING_FRIEND_REQUEST_LIMIT TalkExceptionCode = 103
  TalkExceptionCode_OUTGOING_FRIEND_REQUEST_LIMIT TalkExceptionCode = 104
  TalkExceptionCode_OUTGOING_FRIEND_REQUEST_QUOTA TalkExceptionCode = 105
  TalkExceptionCode_DUPLICATED TalkExceptionCode = 106
  TalkExceptionCode_BANNED TalkExceptionCode = 107
  TalkExceptionCode_NOT_AN_INVITEE TalkExceptionCode = 108
  TalkExceptionCode_NOT_AN_OUTSIDER TalkExceptionCode = 109
  TalkExceptionCode_EMPTY_GROUP TalkExceptionCode = 111
  TalkExceptionCode_EXCEED_FOLLOW_LIMIT TalkExceptionCode = 112
  TalkExceptionCode_UNSUPPORTED_ACCOUNT_TYPE TalkExceptionCode = 113
  TalkExceptionCode_AGREEMENT_REQUIRED TalkExceptionCode = 114
)

func (p TalkExceptionCode) String() string {
  switch p {
  case TalkExceptionCode_ILLEGAL_ARGUMENT: return "ILLEGAL_ARGUMENT"
  case TalkExceptionCode_AUTHENTICATION_FAILED: return "AUTHENTICATION_FAILED"
  case TalkExceptionCode_DB_FAILED: return "DB_FAILED"
  case TalkExceptionCode_INVALID_STATE: return "INVALID_STATE"
  case TalkExceptionCode_EXCESSIVE_ACCESS: return "EXCESSIVE_ACCESS"
  case TalkExceptionCode_NOT_FOUND: return "NOT_FOUND"
  case TalkExceptionCode_INVALID_LENGTH: return "INVALID_LENGTH"
  case TalkExceptionCode_NOT_AVAILABLE_USER: return "NOT_AVAILABLE_USER"
  case TalkExceptionCode_NOT_AUTHORIZED_DEVICE: return "NOT_AUTHORIZED_DEVICE"
  case TalkExceptionCode_INVALID_MID: return "INVALID_MID"
  case TalkExceptionCode_NOT_A_MEMBER: return "NOT_A_MEMBER"
  case TalkExceptionCode_INCOMPATIBLE_APP_VERSION: return "INCOMPATIBLE_APP_VERSION"
  case TalkExceptionCode_NOT_READY: return "NOT_READY"
  case TalkExceptionCode_NOT_AVAILABLE_SESSION: return "NOT_AVAILABLE_SESSION"
  case TalkExceptionCode_NOT_AUTHORIZED_SESSION: return "NOT_AUTHORIZED_SESSION"
  case TalkExceptionCode_SYSTEM_ERROR: return "SYSTEM_ERROR"
  case TalkExceptionCode_NO_AVAILABLE_VERIFICATION_METHOD: return "NO_AVAILABLE_VERIFICATION_METHOD"
  case TalkExceptionCode_NOT_AUTHENTICATED: return "NOT_AUTHENTICATED"
  case TalkExceptionCode_INVALID_IDENTITY_CREDENTIAL: return "INVALID_IDENTITY_CREDENTIAL"
  case TalkExceptionCode_NOT_AVAILABLE_IDENTITY_IDENTIFIER: return "NOT_AVAILABLE_IDENTITY_IDENTIFIER"
  case TalkExceptionCode_INTERNAL_ERROR: return "INTERNAL_ERROR"
  case TalkExceptionCode_NO_SUCH_IDENTITY_IDENFIER: return "NO_SUCH_IDENTITY_IDENFIER"
  case TalkExceptionCode_DEACTIVATED_ACCOUNT_BOUND_TO_THIS_IDENTITY: return "DEACTIVATED_ACCOUNT_BOUND_TO_THIS_IDENTITY"
  case TalkExceptionCode_ILLEGAL_IDENTITY_CREDENTIAL: return "ILLEGAL_IDENTITY_CREDENTIAL"
  case TalkExceptionCode_UNKNOWN_CHANNEL: return "UNKNOWN_CHANNEL"
  case TalkExceptionCode_NO_SUCH_MESSAGE_BOX: return "NO_SUCH_MESSAGE_BOX"
  case TalkExceptionCode_NOT_AVAILABLE_MESSAGE_BOX: return "NOT_AVAILABLE_MESSAGE_BOX"
  case TalkExceptionCode_CHANNEL_DOES_NOT_MATCH: return "CHANNEL_DOES_NOT_MATCH"
  case TalkExceptionCode_NOT_YOUR_MESSAGE: return "NOT_YOUR_MESSAGE"
  case TalkExceptionCode_MESSAGE_DEFINED_ERROR: return "MESSAGE_DEFINED_ERROR"
  case TalkExceptionCode_USER_CANNOT_ACCEPT_PRESENTS: return "USER_CANNOT_ACCEPT_PRESENTS"
  case TalkExceptionCode_USER_NOT_STICKER_OWNER: return "USER_NOT_STICKER_OWNER"
  case TalkExceptionCode_MAINTENANCE_ERROR: return "MAINTENANCE_ERROR"
  case TalkExceptionCode_ACCOUNT_NOT_MATCHED: return "ACCOUNT_NOT_MATCHED"
  case TalkExceptionCode_ABUSE_BLOCK: return "ABUSE_BLOCK"
  case TalkExceptionCode_NOT_FRIEND: return "NOT_FRIEND"
  case TalkExceptionCode_NOT_ALLOWED_CALL: return "NOT_ALLOWED_CALL"
  case TalkExceptionCode_BLOCK_FRIEND: return "BLOCK_FRIEND"
  case TalkExceptionCode_INCOMPATIBLE_VOIP_VERSION: return "INCOMPATIBLE_VOIP_VERSION"
  case TalkExceptionCode_INVALID_SNS_ACCESS_TOKEN: return "INVALID_SNS_ACCESS_TOKEN"
  case TalkExceptionCode_EXTERNAL_SERVICE_NOT_AVAILABLE: return "EXTERNAL_SERVICE_NOT_AVAILABLE"
  case TalkExceptionCode_NOT_ALLOWED_ADD_CONTACT: return "NOT_ALLOWED_ADD_CONTACT"
  case TalkExceptionCode_NOT_CERTIFICATED: return "NOT_CERTIFICATED"
  case TalkExceptionCode_NOT_ALLOWED_SECONDARY_DEVICE: return "NOT_ALLOWED_SECONDARY_DEVICE"
  case TalkExceptionCode_INVALID_PIN_CODE: return "INVALID_PIN_CODE"
  case TalkExceptionCode_NOT_FOUND_IDENTITY_CREDENTIAL: return "NOT_FOUND_IDENTITY_CREDENTIAL"
  case TalkExceptionCode_EXCEED_FILE_MAX_SIZE: return "EXCEED_FILE_MAX_SIZE"
  case TalkExceptionCode_EXCEED_DAILY_QUOTA: return "EXCEED_DAILY_QUOTA"
  case TalkExceptionCode_NOT_SUPPORT_SEND_FILE: return "NOT_SUPPORT_SEND_FILE"
  case TalkExceptionCode_MUST_UPGRADE: return "MUST_UPGRADE"
  case TalkExceptionCode_NOT_AVAILABLE_PIN_CODE_SESSION: return "NOT_AVAILABLE_PIN_CODE_SESSION"
  case TalkExceptionCode_EXPIRED_REVISION: return "EXPIRED_REVISION"
  case TalkExceptionCode_NOT_YET_PHONE_NUMBER: return "NOT_YET_PHONE_NUMBER"
  case TalkExceptionCode_BAD_CALL_NUMBER: return "BAD_CALL_NUMBER"
  case TalkExceptionCode_UNAVAILABLE_CALL_NUMBER: return "UNAVAILABLE_CALL_NUMBER"
  case TalkExceptionCode_NOT_SUPPORT_CALL_SERVICE: return "NOT_SUPPORT_CALL_SERVICE"
  case TalkExceptionCode_CONGESTION_CONTROL: return "CONGESTION_CONTROL"
  case TalkExceptionCode_NO_BALANCE: return "NO_BALANCE"
  case TalkExceptionCode_NOT_PERMITTED_CALLER_ID: return "NOT_PERMITTED_CALLER_ID"
  case TalkExceptionCode_NO_CALLER_ID_LIMIT_EXCEEDED: return "NO_CALLER_ID_LIMIT_EXCEEDED"
  case TalkExceptionCode_CALLER_ID_VERIFICATION_REQUIRED: return "CALLER_ID_VERIFICATION_REQUIRED"
  case TalkExceptionCode_NO_CALLER_ID_LIMIT_EXCEEDED_AND_VERIFICATION_REQUIRED: return "NO_CALLER_ID_LIMIT_EXCEEDED_AND_VERIFICATION_REQUIRED"
  case TalkExceptionCode_MESSAGE_NOT_FOUND: return "MESSAGE_NOT_FOUND"
  case TalkExceptionCode_INVALID_ACCOUNT_MIGRATION_PINCODE_FORMAT: return "INVALID_ACCOUNT_MIGRATION_PINCODE_FORMAT"
  case TalkExceptionCode_ACCOUNT_MIGRATION_PINCODE_NOT_MATCHED: return "ACCOUNT_MIGRATION_PINCODE_NOT_MATCHED"
  case TalkExceptionCode_ACCOUNT_MIGRATION_PINCODE_BLOCKED: return "ACCOUNT_MIGRATION_PINCODE_BLOCKED"
  case TalkExceptionCode_INVALID_PASSWORD_FORMAT: return "INVALID_PASSWORD_FORMAT"
  case TalkExceptionCode_FEATURE_RESTRICTED: return "FEATURE_RESTRICTED"
  case TalkExceptionCode_MESSAGE_NOT_DESTRUCTIBLE: return "MESSAGE_NOT_DESTRUCTIBLE"
  case TalkExceptionCode_PAID_CALL_REDEEM_FAILED: return "PAID_CALL_REDEEM_FAILED"
  case TalkExceptionCode_PREVENTED_JOIN_BY_TICKET: return "PREVENTED_JOIN_BY_TICKET"
  case TalkExceptionCode_SEND_MESSAGE_NOT_PERMITTED_FROM_LINE_AT: return "SEND_MESSAGE_NOT_PERMITTED_FROM_LINE_AT"
  case TalkExceptionCode_SEND_MESSAGE_NOT_PERMITTED_WHILE_AUTO_REPLY: return "SEND_MESSAGE_NOT_PERMITTED_WHILE_AUTO_REPLY"
  case TalkExceptionCode_SECURITY_CENTER_NOT_VERIFIED: return "SECURITY_CENTER_NOT_VERIFIED"
  case TalkExceptionCode_SECURITY_CENTER_BLOCKED_BY_SETTING: return "SECURITY_CENTER_BLOCKED_BY_SETTING"
  case TalkExceptionCode_SECURITY_CENTER_BLOCKED: return "SECURITY_CENTER_BLOCKED"
  case TalkExceptionCode_TALK_PROXY_EXCEPTION: return "TALK_PROXY_EXCEPTION"
  case TalkExceptionCode_E2EE_INVALID_PROTOCOL: return "E2EE_INVALID_PROTOCOL"
  case TalkExceptionCode_E2EE_RETRY_ENCRYPT: return "E2EE_RETRY_ENCRYPT"
  case TalkExceptionCode_E2EE_UPDATE_SENDER_KEY: return "E2EE_UPDATE_SENDER_KEY"
  case TalkExceptionCode_E2EE_UPDATE_RECEIVER_KEY: return "E2EE_UPDATE_RECEIVER_KEY"
  case TalkExceptionCode_E2EE_INVALID_ARGUMENT: return "E2EE_INVALID_ARGUMENT"
  case TalkExceptionCode_E2EE_INVALID_VERSION: return "E2EE_INVALID_VERSION"
  case TalkExceptionCode_E2EE_SENDER_DISABLED: return "E2EE_SENDER_DISABLED"
  case TalkExceptionCode_E2EE_RECEIVER_DISABLED: return "E2EE_RECEIVER_DISABLED"
  case TalkExceptionCode_E2EE_SENDER_NOT_ALLOWED: return "E2EE_SENDER_NOT_ALLOWED"
  case TalkExceptionCode_E2EE_RECEIVER_NOT_ALLOWED: return "E2EE_RECEIVER_NOT_ALLOWED"
  case TalkExceptionCode_E2EE_RESEND_FAIL: return "E2EE_RESEND_FAIL"
  case TalkExceptionCode_E2EE_RESEND_OK: return "E2EE_RESEND_OK"
  case TalkExceptionCode_HITOKOTO_BACKUP_NO_AVAILABLE_DATA: return "HITOKOTO_BACKUP_NO_AVAILABLE_DATA"
  case TalkExceptionCode_E2EE_UPDATE_PRIMARY_DEVICE: return "E2EE_UPDATE_PRIMARY_DEVICE"
  case TalkExceptionCode_SUCCESS: return "SUCCESS"
  case TalkExceptionCode_CANCEL: return "CANCEL"
  case TalkExceptionCode_E2EE_PRIMARY_NOT_SUPPORT: return "E2EE_PRIMARY_NOT_SUPPORT"
  case TalkExceptionCode_E2EE_RETRY_PLAIN: return "E2EE_RETRY_PLAIN"
  case TalkExceptionCode_E2EE_RECREATE_GROUP_KEY: return "E2EE_RECREATE_GROUP_KEY"
  case TalkExceptionCode_E2EE_GROUP_TOO_MANY_MEMBERS: return "E2EE_GROUP_TOO_MANY_MEMBERS"
  case TalkExceptionCode_SERVER_BUSY: return "SERVER_BUSY"
  case TalkExceptionCode_NOT_ALLOWED_ADD_FOLLOW: return "NOT_ALLOWED_ADD_FOLLOW"
  case TalkExceptionCode_INCOMING_FRIEND_REQUEST_LIMIT: return "INCOMING_FRIEND_REQUEST_LIMIT"
  case TalkExceptionCode_OUTGOING_FRIEND_REQUEST_LIMIT: return "OUTGOING_FRIEND_REQUEST_LIMIT"
  case TalkExceptionCode_OUTGOING_FRIEND_REQUEST_QUOTA: return "OUTGOING_FRIEND_REQUEST_QUOTA"
  case TalkExceptionCode_DUPLICATED: return "DUPLICATED"
  case TalkExceptionCode_BANNED: return "BANNED"
  case TalkExceptionCode_NOT_AN_INVITEE: return "NOT_AN_INVITEE"
  case TalkExceptionCode_NOT_AN_OUTSIDER: return "NOT_AN_OUTSIDER"
  case TalkExceptionCode_EMPTY_GROUP: return "EMPTY_GROUP"
  case TalkExceptionCode_EXCEED_FOLLOW_LIMIT: return "EXCEED_FOLLOW_LIMIT"
  case TalkExceptionCode_UNSUPPORTED_ACCOUNT_TYPE: return "UNSUPPORTED_ACCOUNT_TYPE"
  case TalkExceptionCode_AGREEMENT_REQUIRED: return "AGREEMENT_REQUIRED"
  }
  return "<UNSET>"
}

func TalkExceptionCodeFromString(s string) (TalkExceptionCode, error) {
  switch s {
  case "ILLEGAL_ARGUMENT": return TalkExceptionCode_ILLEGAL_ARGUMENT, nil 
  case "AUTHENTICATION_FAILED": return TalkExceptionCode_AUTHENTICATION_FAILED, nil 
  case "DB_FAILED": return TalkExceptionCode_DB_FAILED, nil 
  case "INVALID_STATE": return TalkExceptionCode_INVALID_STATE, nil 
  case "EXCESSIVE_ACCESS": return TalkExceptionCode_EXCESSIVE_ACCESS, nil 
  case "NOT_FOUND": return TalkExceptionCode_NOT_FOUND, nil 
  case "INVALID_LENGTH": return TalkExceptionCode_INVALID_LENGTH, nil 
  case "NOT_AVAILABLE_USER": return TalkExceptionCode_NOT_AVAILABLE_USER, nil 
  case "NOT_AUTHORIZED_DEVICE": return TalkExceptionCode_NOT_AUTHORIZED_DEVICE, nil 
  case "INVALID_MID": return TalkExceptionCode_INVALID_MID, nil 
  case "NOT_A_MEMBER": return TalkExceptionCode_NOT_A_MEMBER, nil 
  case "INCOMPATIBLE_APP_VERSION": return TalkExceptionCode_INCOMPATIBLE_APP_VERSION, nil 
  case "NOT_READY": return TalkExceptionCode_NOT_READY, nil 
  case "NOT_AVAILABLE_SESSION": return TalkExceptionCode_NOT_AVAILABLE_SESSION, nil 
  case "NOT_AUTHORIZED_SESSION": return TalkExceptionCode_NOT_AUTHORIZED_SESSION, nil 
  case "SYSTEM_ERROR": return TalkExceptionCode_SYSTEM_ERROR, nil 
  case "NO_AVAILABLE_VERIFICATION_METHOD": return TalkExceptionCode_NO_AVAILABLE_VERIFICATION_METHOD, nil 
  case "NOT_AUTHENTICATED": return TalkExceptionCode_NOT_AUTHENTICATED, nil 
  case "INVALID_IDENTITY_CREDENTIAL": return TalkExceptionCode_INVALID_IDENTITY_CREDENTIAL, nil 
  case "NOT_AVAILABLE_IDENTITY_IDENTIFIER": return TalkExceptionCode_NOT_AVAILABLE_IDENTITY_IDENTIFIER, nil 
  case "INTERNAL_ERROR": return TalkExceptionCode_INTERNAL_ERROR, nil 
  case "NO_SUCH_IDENTITY_IDENFIER": return TalkExceptionCode_NO_SUCH_IDENTITY_IDENFIER, nil 
  case "DEACTIVATED_ACCOUNT_BOUND_TO_THIS_IDENTITY": return TalkExceptionCode_DEACTIVATED_ACCOUNT_BOUND_TO_THIS_IDENTITY, nil 
  case "ILLEGAL_IDENTITY_CREDENTIAL": return TalkExceptionCode_ILLEGAL_IDENTITY_CREDENTIAL, nil 
  case "UNKNOWN_CHANNEL": return TalkExceptionCode_UNKNOWN_CHANNEL, nil 
  case "NO_SUCH_MESSAGE_BOX": return TalkExceptionCode_NO_SUCH_MESSAGE_BOX, nil 
  case "NOT_AVAILABLE_MESSAGE_BOX": return TalkExceptionCode_NOT_AVAILABLE_MESSAGE_BOX, nil 
  case "CHANNEL_DOES_NOT_MATCH": return TalkExceptionCode_CHANNEL_DOES_NOT_MATCH, nil 
  case "NOT_YOUR_MESSAGE": return TalkExceptionCode_NOT_YOUR_MESSAGE, nil 
  case "MESSAGE_DEFINED_ERROR": return TalkExceptionCode_MESSAGE_DEFINED_ERROR, nil 
  case "USER_CANNOT_ACCEPT_PRESENTS": return TalkExceptionCode_USER_CANNOT_ACCEPT_PRESENTS, nil 
  case "USER_NOT_STICKER_OWNER": return TalkExceptionCode_USER_NOT_STICKER_OWNER, nil 
  case "MAINTENANCE_ERROR": return TalkExceptionCode_MAINTENANCE_ERROR, nil 
  case "ACCOUNT_NOT_MATCHED": return TalkExceptionCode_ACCOUNT_NOT_MATCHED, nil 
  case "ABUSE_BLOCK": return TalkExceptionCode_ABUSE_BLOCK, nil 
  case "NOT_FRIEND": return TalkExceptionCode_NOT_FRIEND, nil 
  case "NOT_ALLOWED_CALL": return TalkExceptionCode_NOT_ALLOWED_CALL, nil 
  case "BLOCK_FRIEND": return TalkExceptionCode_BLOCK_FRIEND, nil 
  case "INCOMPATIBLE_VOIP_VERSION": return TalkExceptionCode_INCOMPATIBLE_VOIP_VERSION, nil 
  case "INVALID_SNS_ACCESS_TOKEN": return TalkExceptionCode_INVALID_SNS_ACCESS_TOKEN, nil 
  case "EXTERNAL_SERVICE_NOT_AVAILABLE": return TalkExceptionCode_EXTERNAL_SERVICE_NOT_AVAILABLE, nil 
  case "NOT_ALLOWED_ADD_CONTACT": return TalkExceptionCode_NOT_ALLOWED_ADD_CONTACT, nil 
  case "NOT_CERTIFICATED": return TalkExceptionCode_NOT_CERTIFICATED, nil 
  case "NOT_ALLOWED_SECONDARY_DEVICE": return TalkExceptionCode_NOT_ALLOWED_SECONDARY_DEVICE, nil 
  case "INVALID_PIN_CODE": return TalkExceptionCode_INVALID_PIN_CODE, nil 
  case "NOT_FOUND_IDENTITY_CREDENTIAL": return TalkExceptionCode_NOT_FOUND_IDENTITY_CREDENTIAL, nil 
  case "EXCEED_FILE_MAX_SIZE": return TalkExceptionCode_EXCEED_FILE_MAX_SIZE, nil 
  case "EXCEED_DAILY_QUOTA": return TalkExceptionCode_EXCEED_DAILY_QUOTA, nil 
  case "NOT_SUPPORT_SEND_FILE": return TalkExceptionCode_NOT_SUPPORT_SEND_FILE, nil 
  case "MUST_UPGRADE": return TalkExceptionCode_MUST_UPGRADE, nil 
  case "NOT_AVAILABLE_PIN_CODE_SESSION": return TalkExceptionCode_NOT_AVAILABLE_PIN_CODE_SESSION, nil 
  case "EXPIRED_REVISION": return TalkExceptionCode_EXPIRED_REVISION, nil 
  case "NOT_YET_PHONE_NUMBER": return TalkExceptionCode_NOT_YET_PHONE_NUMBER, nil 
  case "BAD_CALL_NUMBER": return TalkExceptionCode_BAD_CALL_NUMBER, nil 
  case "UNAVAILABLE_CALL_NUMBER": return TalkExceptionCode_UNAVAILABLE_CALL_NUMBER, nil 
  case "NOT_SUPPORT_CALL_SERVICE": return TalkExceptionCode_NOT_SUPPORT_CALL_SERVICE, nil 
  case "CONGESTION_CONTROL": return TalkExceptionCode_CONGESTION_CONTROL, nil 
  case "NO_BALANCE": return TalkExceptionCode_NO_BALANCE, nil 
  case "NOT_PERMITTED_CALLER_ID": return TalkExceptionCode_NOT_PERMITTED_CALLER_ID, nil 
  case "NO_CALLER_ID_LIMIT_EXCEEDED": return TalkExceptionCode_NO_CALLER_ID_LIMIT_EXCEEDED, nil 
  case "CALLER_ID_VERIFICATION_REQUIRED": return TalkExceptionCode_CALLER_ID_VERIFICATION_REQUIRED, nil 
  case "NO_CALLER_ID_LIMIT_EXCEEDED_AND_VERIFICATION_REQUIRED": return TalkExceptionCode_NO_CALLER_ID_LIMIT_EXCEEDED_AND_VERIFICATION_REQUIRED, nil 
  case "MESSAGE_NOT_FOUND": return TalkExceptionCode_MESSAGE_NOT_FOUND, nil 
  case "INVALID_ACCOUNT_MIGRATION_PINCODE_FORMAT": return TalkExceptionCode_INVALID_ACCOUNT_MIGRATION_PINCODE_FORMAT, nil 
  case "ACCOUNT_MIGRATION_PINCODE_NOT_MATCHED": return TalkExceptionCode_ACCOUNT_MIGRATION_PINCODE_NOT_MATCHED, nil 
  case "ACCOUNT_MIGRATION_PINCODE_BLOCKED": return TalkExceptionCode_ACCOUNT_MIGRATION_PINCODE_BLOCKED, nil 
  case "INVALID_PASSWORD_FORMAT": return TalkExceptionCode_INVALID_PASSWORD_FORMAT, nil 
  case "FEATURE_RESTRICTED": return TalkExceptionCode_FEATURE_RESTRICTED, nil 
  case "MESSAGE_NOT_DESTRUCTIBLE": return TalkExceptionCode_MESSAGE_NOT_DESTRUCTIBLE, nil 
  case "PAID_CALL_REDEEM_FAILED": return TalkExceptionCode_PAID_CALL_REDEEM_FAILED, nil 
  case "PREVENTED_JOIN_BY_TICKET": return TalkExceptionCode_PREVENTED_JOIN_BY_TICKET, nil 
  case "SEND_MESSAGE_NOT_PERMITTED_FROM_LINE_AT": return TalkExceptionCode_SEND_MESSAGE_NOT_PERMITTED_FROM_LINE_AT, nil 
  case "SEND_MESSAGE_NOT_PERMITTED_WHILE_AUTO_REPLY": return TalkExceptionCode_SEND_MESSAGE_NOT_PERMITTED_WHILE_AUTO_REPLY, nil 
  case "SECURITY_CENTER_NOT_VERIFIED": return TalkExceptionCode_SECURITY_CENTER_NOT_VERIFIED, nil 
  case "SECURITY_CENTER_BLOCKED_BY_SETTING": return TalkExceptionCode_SECURITY_CENTER_BLOCKED_BY_SETTING, nil 
  case "SECURITY_CENTER_BLOCKED": return TalkExceptionCode_SECURITY_CENTER_BLOCKED, nil 
  case "TALK_PROXY_EXCEPTION": return TalkExceptionCode_TALK_PROXY_EXCEPTION, nil 
  case "E2EE_INVALID_PROTOCOL": return TalkExceptionCode_E2EE_INVALID_PROTOCOL, nil 
  case "E2EE_RETRY_ENCRYPT": return TalkExceptionCode_E2EE_RETRY_ENCRYPT, nil 
  case "E2EE_UPDATE_SENDER_KEY": return TalkExceptionCode_E2EE_UPDATE_SENDER_KEY, nil 
  case "E2EE_UPDATE_RECEIVER_KEY": return TalkExceptionCode_E2EE_UPDATE_RECEIVER_KEY, nil 
  case "E2EE_INVALID_ARGUMENT": return TalkExceptionCode_E2EE_INVALID_ARGUMENT, nil 
  case "E2EE_INVALID_VERSION": return TalkExceptionCode_E2EE_INVALID_VERSION, nil 
  case "E2EE_SENDER_DISABLED": return TalkExceptionCode_E2EE_SENDER_DISABLED, nil 
  case "E2EE_RECEIVER_DISABLED": return TalkExceptionCode_E2EE_RECEIVER_DISABLED, nil 
  case "E2EE_SENDER_NOT_ALLOWED": return TalkExceptionCode_E2EE_SENDER_NOT_ALLOWED, nil 
  case "E2EE_RECEIVER_NOT_ALLOWED": return TalkExceptionCode_E2EE_RECEIVER_NOT_ALLOWED, nil 
  case "E2EE_RESEND_FAIL": return TalkExceptionCode_E2EE_RESEND_FAIL, nil 
  case "E2EE_RESEND_OK": return TalkExceptionCode_E2EE_RESEND_OK, nil 
  case "HITOKOTO_BACKUP_NO_AVAILABLE_DATA": return TalkExceptionCode_HITOKOTO_BACKUP_NO_AVAILABLE_DATA, nil 
  case "E2EE_UPDATE_PRIMARY_DEVICE": return TalkExceptionCode_E2EE_UPDATE_PRIMARY_DEVICE, nil 
  case "SUCCESS": return TalkExceptionCode_SUCCESS, nil 
  case "CANCEL": return TalkExceptionCode_CANCEL, nil 
  case "E2EE_PRIMARY_NOT_SUPPORT": return TalkExceptionCode_E2EE_PRIMARY_NOT_SUPPORT, nil 
  case "E2EE_RETRY_PLAIN": return TalkExceptionCode_E2EE_RETRY_PLAIN, nil 
  case "E2EE_RECREATE_GROUP_KEY": return TalkExceptionCode_E2EE_RECREATE_GROUP_KEY, nil 
  case "E2EE_GROUP_TOO_MANY_MEMBERS": return TalkExceptionCode_E2EE_GROUP_TOO_MANY_MEMBERS, nil 
  case "SERVER_BUSY": return TalkExceptionCode_SERVER_BUSY, nil 
  case "NOT_ALLOWED_ADD_FOLLOW": return TalkExceptionCode_NOT_ALLOWED_ADD_FOLLOW, nil 
  case "INCOMING_FRIEND_REQUEST_LIMIT": return TalkExceptionCode_INCOMING_FRIEND_REQUEST_LIMIT, nil 
  case "OUTGOING_FRIEND_REQUEST_LIMIT": return TalkExceptionCode_OUTGOING_FRIEND_REQUEST_LIMIT, nil 
  case "OUTGOING_FRIEND_REQUEST_QUOTA": return TalkExceptionCode_OUTGOING_FRIEND_REQUEST_QUOTA, nil 
  case "DUPLICATED": return TalkExceptionCode_DUPLICATED, nil 
  case "BANNED": return TalkExceptionCode_BANNED, nil 
  case "NOT_AN_INVITEE": return TalkExceptionCode_NOT_AN_INVITEE, nil 
  case "NOT_AN_OUTSIDER": return TalkExceptionCode_NOT_AN_OUTSIDER, nil 
  case "EMPTY_GROUP": return TalkExceptionCode_EMPTY_GROUP, nil 
  case "EXCEED_FOLLOW_LIMIT": return TalkExceptionCode_EXCEED_FOLLOW_LIMIT, nil 
  case "UNSUPPORTED_ACCOUNT_TYPE": return TalkExceptionCode_UNSUPPORTED_ACCOUNT_TYPE, nil 
  case "AGREEMENT_REQUIRED": return TalkExceptionCode_AGREEMENT_REQUIRED, nil 
  }
  return TalkExceptionCode(0), fmt.Errorf("not a valid TalkExceptionCode string")
}


func TalkExceptionCodePtr(v TalkExceptionCode) *TalkExceptionCode { return &v }

func (p TalkExceptionCode) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *TalkExceptionCode) UnmarshalText(text []byte) error {
q, err := TalkExceptionCodeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *TalkExceptionCode) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = TalkExceptionCode(v)
return nil
}

func (p * TalkExceptionCode) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type ContactModificationType int64
const (
  ContactModificationType_ADD ContactModificationType = 0
  ContactModificationType_REMOVE ContactModificationType = 1
  ContactModificationType_MODIFY ContactModificationType = 2
)

func (p ContactModificationType) String() string {
  switch p {
  case ContactModificationType_ADD: return "ADD"
  case ContactModificationType_REMOVE: return "REMOVE"
  case ContactModificationType_MODIFY: return "MODIFY"
  }
  return "<UNSET>"
}

func ContactModificationTypeFromString(s string) (ContactModificationType, error) {
  switch s {
  case "ADD": return ContactModificationType_ADD, nil 
  case "REMOVE": return ContactModificationType_REMOVE, nil 
  case "MODIFY": return ContactModificationType_MODIFY, nil 
  }
  return ContactModificationType(0), fmt.Errorf("not a valid ContactModificationType string")
}


func ContactModificationTypePtr(v ContactModificationType) *ContactModificationType { return &v }

func (p ContactModificationType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *ContactModificationType) UnmarshalText(text []byte) error {
q, err := ContactModificationTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *ContactModificationType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = ContactModificationType(v)
return nil
}

func (p * ContactModificationType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type UpdateNotificationTokenType int64
const (
  UpdateNotificationTokenType_APPLE_APNS UpdateNotificationTokenType = 1
  UpdateNotificationTokenType_GOOGLE_C2DM UpdateNotificationTokenType = 2
  UpdateNotificationTokenType_NHN_NNI UpdateNotificationTokenType = 3
  UpdateNotificationTokenType_SKT_AOM UpdateNotificationTokenType = 4
  UpdateNotificationTokenType_MS_MPNS UpdateNotificationTokenType = 5
  UpdateNotificationTokenType_RIM_BIS UpdateNotificationTokenType = 6
  UpdateNotificationTokenType_GOOGLE_GCM UpdateNotificationTokenType = 7
  UpdateNotificationTokenType_NOKIA_NNAPI UpdateNotificationTokenType = 8
  UpdateNotificationTokenType_TIZEN UpdateNotificationTokenType = 9
  UpdateNotificationTokenType_MOZILLA_SIMPLE UpdateNotificationTokenType = 10
  UpdateNotificationTokenType_LINE_BOT UpdateNotificationTokenType = 17
  UpdateNotificationTokenType_LINE_WAP UpdateNotificationTokenType = 18
  UpdateNotificationTokenType_APPLE_APNS_VOIP UpdateNotificationTokenType = 19
  UpdateNotificationTokenType_MS_WNS UpdateNotificationTokenType = 20
  UpdateNotificationTokenType_GOOGLE_FCM UpdateNotificationTokenType = 21
  UpdateNotificationTokenType_CLOVA UpdateNotificationTokenType = 22
  UpdateNotificationTokenType_CLOVA_VOIP UpdateNotificationTokenType = 23
  UpdateNotificationTokenType_HUAWEI_HCM UpdateNotificationTokenType = 24
)

func (p UpdateNotificationTokenType) String() string {
  switch p {
  case UpdateNotificationTokenType_APPLE_APNS: return "APPLE_APNS"
  case UpdateNotificationTokenType_GOOGLE_C2DM: return "GOOGLE_C2DM"
  case UpdateNotificationTokenType_NHN_NNI: return "NHN_NNI"
  case UpdateNotificationTokenType_SKT_AOM: return "SKT_AOM"
  case UpdateNotificationTokenType_MS_MPNS: return "MS_MPNS"
  case UpdateNotificationTokenType_RIM_BIS: return "RIM_BIS"
  case UpdateNotificationTokenType_GOOGLE_GCM: return "GOOGLE_GCM"
  case UpdateNotificationTokenType_NOKIA_NNAPI: return "NOKIA_NNAPI"
  case UpdateNotificationTokenType_TIZEN: return "TIZEN"
  case UpdateNotificationTokenType_MOZILLA_SIMPLE: return "MOZILLA_SIMPLE"
  case UpdateNotificationTokenType_LINE_BOT: return "LINE_BOT"
  case UpdateNotificationTokenType_LINE_WAP: return "LINE_WAP"
  case UpdateNotificationTokenType_APPLE_APNS_VOIP: return "APPLE_APNS_VOIP"
  case UpdateNotificationTokenType_MS_WNS: return "MS_WNS"
  case UpdateNotificationTokenType_GOOGLE_FCM: return "GOOGLE_FCM"
  case UpdateNotificationTokenType_CLOVA: return "CLOVA"
  case UpdateNotificationTokenType_CLOVA_VOIP: return "CLOVA_VOIP"
  case UpdateNotificationTokenType_HUAWEI_HCM: return "HUAWEI_HCM"
  }
  return "<UNSET>"
}

func UpdateNotificationTokenTypeFromString(s string) (UpdateNotificationTokenType, error) {
  switch s {
  case "APPLE_APNS": return UpdateNotificationTokenType_APPLE_APNS, nil 
  case "GOOGLE_C2DM": return UpdateNotificationTokenType_GOOGLE_C2DM, nil 
  case "NHN_NNI": return UpdateNotificationTokenType_NHN_NNI, nil 
  case "SKT_AOM": return UpdateNotificationTokenType_SKT_AOM, nil 
  case "MS_MPNS": return UpdateNotificationTokenType_MS_MPNS, nil 
  case "RIM_BIS": return UpdateNotificationTokenType_RIM_BIS, nil 
  case "GOOGLE_GCM": return UpdateNotificationTokenType_GOOGLE_GCM, nil 
  case "NOKIA_NNAPI": return UpdateNotificationTokenType_NOKIA_NNAPI, nil 
  case "TIZEN": return UpdateNotificationTokenType_TIZEN, nil 
  case "MOZILLA_SIMPLE": return UpdateNotificationTokenType_MOZILLA_SIMPLE, nil 
  case "LINE_BOT": return UpdateNotificationTokenType_LINE_BOT, nil 
  case "LINE_WAP": return UpdateNotificationTokenType_LINE_WAP, nil 
  case "APPLE_APNS_VOIP": return UpdateNotificationTokenType_APPLE_APNS_VOIP, nil 
  case "MS_WNS": return UpdateNotificationTokenType_MS_WNS, nil 
  case "GOOGLE_FCM": return UpdateNotificationTokenType_GOOGLE_FCM, nil 
  case "CLOVA": return UpdateNotificationTokenType_CLOVA, nil 
  case "CLOVA_VOIP": return UpdateNotificationTokenType_CLOVA_VOIP, nil 
  case "HUAWEI_HCM": return UpdateNotificationTokenType_HUAWEI_HCM, nil 
  }
  return UpdateNotificationTokenType(0), fmt.Errorf("not a valid UpdateNotificationTokenType string")
}


func UpdateNotificationTokenTypePtr(v UpdateNotificationTokenType) *UpdateNotificationTokenType { return &v }

func (p UpdateNotificationTokenType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *UpdateNotificationTokenType) UnmarshalText(text []byte) error {
q, err := UpdateNotificationTokenTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *UpdateNotificationTokenType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = UpdateNotificationTokenType(v)
return nil
}

func (p * UpdateNotificationTokenType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type UpdateExtendedProfileAttributeAttr int64
const (
  UpdateExtendedProfileAttributeAttr_BIRTHDAY UpdateExtendedProfileAttributeAttr = 0
)

func (p UpdateExtendedProfileAttributeAttr) String() string {
  switch p {
  case UpdateExtendedProfileAttributeAttr_BIRTHDAY: return "BIRTHDAY"
  }
  return "<UNSET>"
}

func UpdateExtendedProfileAttributeAttrFromString(s string) (UpdateExtendedProfileAttributeAttr, error) {
  switch s {
  case "BIRTHDAY": return UpdateExtendedProfileAttributeAttr_BIRTHDAY, nil 
  }
  return UpdateExtendedProfileAttributeAttr(0), fmt.Errorf("not a valid UpdateExtendedProfileAttributeAttr string")
}


func UpdateExtendedProfileAttributeAttrPtr(v UpdateExtendedProfileAttributeAttr) *UpdateExtendedProfileAttributeAttr { return &v }

func (p UpdateExtendedProfileAttributeAttr) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *UpdateExtendedProfileAttributeAttr) UnmarshalText(text []byte) error {
q, err := UpdateExtendedProfileAttributeAttrFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *UpdateExtendedProfileAttributeAttr) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = UpdateExtendedProfileAttributeAttr(v)
return nil
}

func (p * UpdateExtendedProfileAttributeAttr) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type C59122ec int64
const (
  C59122ec_BEACON_AGREEMENT C59122ec = 1
  C59122ec_BLUETOOTH C59122ec = 2
  C59122ec_SHAKE_AGREEMENT C59122ec = 3
  C59122ec_AUTO_SUGGEST C59122ec = 4
  C59122ec_CHATROOM_CAPTURE C59122ec = 5
  C59122ec_CHATROOM_MINIMIZEBROWSER C59122ec = 6
  C59122ec_CHATROOM_MOBILESAFARI C59122ec = 7
  C59122ec_VIDEO_HIGHTLIGHT_WIZARD C59122ec = 8
  C59122ec_CHAT_FOLDER C59122ec = 9
)

func (p C59122ec) String() string {
  switch p {
  case C59122ec_BEACON_AGREEMENT: return "BEACON_AGREEMENT"
  case C59122ec_BLUETOOTH: return "BLUETOOTH"
  case C59122ec_SHAKE_AGREEMENT: return "SHAKE_AGREEMENT"
  case C59122ec_AUTO_SUGGEST: return "AUTO_SUGGEST"
  case C59122ec_CHATROOM_CAPTURE: return "CHATROOM_CAPTURE"
  case C59122ec_CHATROOM_MINIMIZEBROWSER: return "CHATROOM_MINIMIZEBROWSER"
  case C59122ec_CHATROOM_MOBILESAFARI: return "CHATROOM_MOBILESAFARI"
  case C59122ec_VIDEO_HIGHTLIGHT_WIZARD: return "VIDEO_HIGHTLIGHT_WIZARD"
  case C59122ec_CHAT_FOLDER: return "CHAT_FOLDER"
  }
  return "<UNSET>"
}

func C59122ecFromString(s string) (C59122ec, error) {
  switch s {
  case "BEACON_AGREEMENT": return C59122ec_BEACON_AGREEMENT, nil 
  case "BLUETOOTH": return C59122ec_BLUETOOTH, nil 
  case "SHAKE_AGREEMENT": return C59122ec_SHAKE_AGREEMENT, nil 
  case "AUTO_SUGGEST": return C59122ec_AUTO_SUGGEST, nil 
  case "CHATROOM_CAPTURE": return C59122ec_CHATROOM_CAPTURE, nil 
  case "CHATROOM_MINIMIZEBROWSER": return C59122ec_CHATROOM_MINIMIZEBROWSER, nil 
  case "CHATROOM_MOBILESAFARI": return C59122ec_CHATROOM_MOBILESAFARI, nil 
  case "VIDEO_HIGHTLIGHT_WIZARD": return C59122ec_VIDEO_HIGHTLIGHT_WIZARD, nil 
  case "CHAT_FOLDER": return C59122ec_CHAT_FOLDER, nil 
  }
  return C59122ec(0), fmt.Errorf("not a valid C59122ec string")
}


func C59122ecPtr(v C59122ec) *C59122ec { return &v }

func (p C59122ec) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *C59122ec) UnmarshalText(text []byte) error {
q, err := C59122ecFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *C59122ec) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = C59122ec(v)
return nil
}

func (p * C59122ec) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type C59430gc int64
const (
  C59430gc_LOCATION_OS C59430gc = 1
  C59430gc_LOCATION_APP C59430gc = 2
  C59430gc_VIDEO_AUTO_PLAY C59430gc = 3
  C59430gc_HNI C59430gc = 4
  C59430gc_AUTO_SUGGEST_LANG C59430gc = 5
  C59430gc_CHAT_EFFECT_CACHED_CONTENT_LIST C59430gc = 6
)

func (p C59430gc) String() string {
  switch p {
  case C59430gc_LOCATION_OS: return "LOCATION_OS"
  case C59430gc_LOCATION_APP: return "LOCATION_APP"
  case C59430gc_VIDEO_AUTO_PLAY: return "VIDEO_AUTO_PLAY"
  case C59430gc_HNI: return "HNI"
  case C59430gc_AUTO_SUGGEST_LANG: return "AUTO_SUGGEST_LANG"
  case C59430gc_CHAT_EFFECT_CACHED_CONTENT_LIST: return "CHAT_EFFECT_CACHED_CONTENT_LIST"
  }
  return "<UNSET>"
}

func C59430gcFromString(s string) (C59430gc, error) {
  switch s {
  case "LOCATION_OS": return C59430gc_LOCATION_OS, nil 
  case "LOCATION_APP": return C59430gc_LOCATION_APP, nil 
  case "VIDEO_AUTO_PLAY": return C59430gc_VIDEO_AUTO_PLAY, nil 
  case "HNI": return C59430gc_HNI, nil 
  case "AUTO_SUGGEST_LANG": return C59430gc_AUTO_SUGGEST_LANG, nil 
  case "CHAT_EFFECT_CACHED_CONTENT_LIST": return C59430gc_CHAT_EFFECT_CACHED_CONTENT_LIST, nil 
  }
  return C59430gc(0), fmt.Errorf("not a valid C59430gc string")
}


func C59430gcPtr(v C59430gc) *C59430gc { return &v }

func (p C59430gc) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *C59430gc) UnmarshalText(text []byte) error {
q, err := C59430gcFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *C59430gc) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = C59430gc(v)
return nil
}

func (p * C59430gc) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type SettingAttribute int64
const (
  SettingAttribute_NOTIFICATION_ENABLE SettingAttribute = 0
  SettingAttribute_NOTIFICATION_MUTE_EXPIRATION SettingAttribute = 1
  SettingAttribute_NOTIFICATION_NEW_MESSAGE SettingAttribute = 2
  SettingAttribute_NOTIFICATION_GROUP_INVITATION SettingAttribute = 3
  SettingAttribute_NOTIFICATION_SHOW_MESSAGE SettingAttribute = 4
  SettingAttribute_NOTIFICATION_INCOMING_CALL SettingAttribute = 5
  SettingAttribute_PRIVACY_SYNC_CONTACTS SettingAttribute = 6
  SettingAttribute_PRIVACY_SEARCH_BY_PHONE_NUMBER SettingAttribute = 7
  SettingAttribute_NOTIFICATION_SOUND_MESSAGE SettingAttribute = 8
  SettingAttribute_NOTIFICATION_SOUND_GROUP SettingAttribute = 9
  SettingAttribute_CONTACT_MY_TICKET SettingAttribute = 10
  SettingAttribute_IDENTITY_PROVIDER SettingAttribute = 11
  SettingAttribute_IDENTITY_IDENTIFIER SettingAttribute = 12
  SettingAttribute_PRIVACY_SEARCH_BY_USERID SettingAttribute = 13
  SettingAttribute_PRIVACY_SEARCH_BY_EMAIL SettingAttribute = 14
  SettingAttribute_PREFERENCE_LOCALE SettingAttribute = 15
  SettingAttribute_NOTIFICATION_DISABLED_WITH_SUB SettingAttribute = 16
  SettingAttribute_NOTIFICATION_PAYMENT SettingAttribute = 17
  SettingAttribute_SECURITY_CENTER_SETTINGS SettingAttribute = 18
  SettingAttribute_SNS_ACCOUNT SettingAttribute = 19
  SettingAttribute_PHONE_REGISTRATION SettingAttribute = 20
  SettingAttribute_PRIVACY_ALLOW_SECONDARY_DEVICE_LOGIN SettingAttribute = 21
  SettingAttribute_CUSTOM_MODE SettingAttribute = 22
  SettingAttribute_PRIVACY_PROFILE_IMAGE_POST_TO_MYHOME SettingAttribute = 23
  SettingAttribute_EMAIL_CONFIRMATION_STATUS SettingAttribute = 24
  SettingAttribute_PRIVACY_RECV_MESSAGES_FROM_NOT_FRIEND SettingAttribute = 25
  SettingAttribute_PRIVACY_AGREE_USE_LINECOIN_TO_PAIDCALL SettingAttribute = 26
  SettingAttribute_PRIVACY_AGREE_USE_PAIDCALL SettingAttribute = 27
  SettingAttribute_ACCOUNT_MIGRATION_PINCODE SettingAttribute = 28
  SettingAttribute_ENFORCED_INPUT_ACCOUNT_MIGRATION_PINCODE SettingAttribute = 29
  SettingAttribute_PRIVACY_ALLOW_FRIEND_REQUEST SettingAttribute = 30
  SettingAttribute_E2EE_ENABLE SettingAttribute = 33
  SettingAttribute_HITOKOTO_BACKUP_REQUESTED SettingAttribute = 34
  SettingAttribute_PRIVACY_PROFILE_MUSIC_POST_TO_MYHOME SettingAttribute = 35
  SettingAttribute_CONTACT_ALLOW_FOLLOWING SettingAttribute = 36
  SettingAttribute_PRIVACY_ALLOW_NEARBY SettingAttribute = 37
  SettingAttribute_AGREEMENT_NEARBY SettingAttribute = 38
  SettingAttribute_AGREEMENT_SQUARE SettingAttribute = 39
  SettingAttribute_NOTIFICATION_MENTION SettingAttribute = 40
  SettingAttribute_ALLOW_UNREGISTRATION_SECONDARY_DEVICE SettingAttribute = 41
  SettingAttribute_AGREEMENT_BOT_USE SettingAttribute = 42
  SettingAttribute_AGREEMENT_SHAKE_FUNCTION SettingAttribute = 43
  SettingAttribute_AGREEMENT_MOBILE_CONTACT_NAME SettingAttribute = 44
  SettingAttribute_NOTIFICATION_THUMBNAIL SettingAttribute = 45
  SettingAttribute_AGREEMENT_SOUND_TO_TEXT SettingAttribute = 46
  SettingAttribute_AGREEMENT_PRIVACY_POLICY_VERSION SettingAttribute = 47
  SettingAttribute_AGREEMENT_AD_BY_WEB_ACCESS SettingAttribute = 48
  SettingAttribute_AGREEMENT_PHONE_NUMBER_MATCHING SettingAttribute = 49
  SettingAttribute_AGREEMENT_COMMUNICATION_INFO SettingAttribute = 50
  SettingAttribute_PRIVACY_SHARE_PERSONAL_INFO_TO_FRIENDS SettingAttribute = 51
  SettingAttribute_AGREEMENT_THINGS_WIRELESS_COMMUNICATION SettingAttribute = 52
  SettingAttribute_AGREEMENT_GDPR SettingAttribute = 53
  SettingAttribute_PRIVACY_STATUS_MESSAGE_HISTORY SettingAttribute = 54
  SettingAttribute_AGREEMENT_PROVIDE_LOCATION SettingAttribute = 55
  SettingAttribute_AGREEMENT_BEACON SettingAttribute = 56
  SettingAttribute_PRIVACY_PROFILE_HISTORY SettingAttribute = 57
  SettingAttribute_AGREEMENT_CONTENTS_SUGGEST SettingAttribute = 58
  SettingAttribute_AGREEMENT_CONTENTS_SUGGEST_DATA_COLLECTION SettingAttribute = 59
  SettingAttribute_PRIVACY_AGE_RESULT SettingAttribute = 60
  SettingAttribute_PRIVACY_AGE_RESULT_RECEIVED SettingAttribute = 61
  SettingAttribute_AGREEMENT_OCR_IMAGE_COLLECTION SettingAttribute = 62
  SettingAttribute_PRIVACY_ALLOW_FOLLOW SettingAttribute = 63
  SettingAttribute_PRIVACY_SHOW_FOLLOW_LIST SettingAttribute = 64
  SettingAttribute_NOTIFICATION_BADGE_TALK_ONLY SettingAttribute = 65
)

func (p SettingAttribute) String() string {
  switch p {
  case SettingAttribute_NOTIFICATION_ENABLE: return "NOTIFICATION_ENABLE"
  case SettingAttribute_NOTIFICATION_MUTE_EXPIRATION: return "NOTIFICATION_MUTE_EXPIRATION"
  case SettingAttribute_NOTIFICATION_NEW_MESSAGE: return "NOTIFICATION_NEW_MESSAGE"
  case SettingAttribute_NOTIFICATION_GROUP_INVITATION: return "NOTIFICATION_GROUP_INVITATION"
  case SettingAttribute_NOTIFICATION_SHOW_MESSAGE: return "NOTIFICATION_SHOW_MESSAGE"
  case SettingAttribute_NOTIFICATION_INCOMING_CALL: return "NOTIFICATION_INCOMING_CALL"
  case SettingAttribute_PRIVACY_SYNC_CONTACTS: return "PRIVACY_SYNC_CONTACTS"
  case SettingAttribute_PRIVACY_SEARCH_BY_PHONE_NUMBER: return "PRIVACY_SEARCH_BY_PHONE_NUMBER"
  case SettingAttribute_NOTIFICATION_SOUND_MESSAGE: return "NOTIFICATION_SOUND_MESSAGE"
  case SettingAttribute_NOTIFICATION_SOUND_GROUP: return "NOTIFICATION_SOUND_GROUP"
  case SettingAttribute_CONTACT_MY_TICKET: return "CONTACT_MY_TICKET"
  case SettingAttribute_IDENTITY_PROVIDER: return "IDENTITY_PROVIDER"
  case SettingAttribute_IDENTITY_IDENTIFIER: return "IDENTITY_IDENTIFIER"
  case SettingAttribute_PRIVACY_SEARCH_BY_USERID: return "PRIVACY_SEARCH_BY_USERID"
  case SettingAttribute_PRIVACY_SEARCH_BY_EMAIL: return "PRIVACY_SEARCH_BY_EMAIL"
  case SettingAttribute_PREFERENCE_LOCALE: return "PREFERENCE_LOCALE"
  case SettingAttribute_NOTIFICATION_DISABLED_WITH_SUB: return "NOTIFICATION_DISABLED_WITH_SUB"
  case SettingAttribute_NOTIFICATION_PAYMENT: return "NOTIFICATION_PAYMENT"
  case SettingAttribute_SECURITY_CENTER_SETTINGS: return "SECURITY_CENTER_SETTINGS"
  case SettingAttribute_SNS_ACCOUNT: return "SNS_ACCOUNT"
  case SettingAttribute_PHONE_REGISTRATION: return "PHONE_REGISTRATION"
  case SettingAttribute_PRIVACY_ALLOW_SECONDARY_DEVICE_LOGIN: return "PRIVACY_ALLOW_SECONDARY_DEVICE_LOGIN"
  case SettingAttribute_CUSTOM_MODE: return "CUSTOM_MODE"
  case SettingAttribute_PRIVACY_PROFILE_IMAGE_POST_TO_MYHOME: return "PRIVACY_PROFILE_IMAGE_POST_TO_MYHOME"
  case SettingAttribute_EMAIL_CONFIRMATION_STATUS: return "EMAIL_CONFIRMATION_STATUS"
  case SettingAttribute_PRIVACY_RECV_MESSAGES_FROM_NOT_FRIEND: return "PRIVACY_RECV_MESSAGES_FROM_NOT_FRIEND"
  case SettingAttribute_PRIVACY_AGREE_USE_LINECOIN_TO_PAIDCALL: return "PRIVACY_AGREE_USE_LINECOIN_TO_PAIDCALL"
  case SettingAttribute_PRIVACY_AGREE_USE_PAIDCALL: return "PRIVACY_AGREE_USE_PAIDCALL"
  case SettingAttribute_ACCOUNT_MIGRATION_PINCODE: return "ACCOUNT_MIGRATION_PINCODE"
  case SettingAttribute_ENFORCED_INPUT_ACCOUNT_MIGRATION_PINCODE: return "ENFORCED_INPUT_ACCOUNT_MIGRATION_PINCODE"
  case SettingAttribute_PRIVACY_ALLOW_FRIEND_REQUEST: return "PRIVACY_ALLOW_FRIEND_REQUEST"
  case SettingAttribute_E2EE_ENABLE: return "E2EE_ENABLE"
  case SettingAttribute_HITOKOTO_BACKUP_REQUESTED: return "HITOKOTO_BACKUP_REQUESTED"
  case SettingAttribute_PRIVACY_PROFILE_MUSIC_POST_TO_MYHOME: return "PRIVACY_PROFILE_MUSIC_POST_TO_MYHOME"
  case SettingAttribute_CONTACT_ALLOW_FOLLOWING: return "CONTACT_ALLOW_FOLLOWING"
  case SettingAttribute_PRIVACY_ALLOW_NEARBY: return "PRIVACY_ALLOW_NEARBY"
  case SettingAttribute_AGREEMENT_NEARBY: return "AGREEMENT_NEARBY"
  case SettingAttribute_AGREEMENT_SQUARE: return "AGREEMENT_SQUARE"
  case SettingAttribute_NOTIFICATION_MENTION: return "NOTIFICATION_MENTION"
  case SettingAttribute_ALLOW_UNREGISTRATION_SECONDARY_DEVICE: return "ALLOW_UNREGISTRATION_SECONDARY_DEVICE"
  case SettingAttribute_AGREEMENT_BOT_USE: return "AGREEMENT_BOT_USE"
  case SettingAttribute_AGREEMENT_SHAKE_FUNCTION: return "AGREEMENT_SHAKE_FUNCTION"
  case SettingAttribute_AGREEMENT_MOBILE_CONTACT_NAME: return "AGREEMENT_MOBILE_CONTACT_NAME"
  case SettingAttribute_NOTIFICATION_THUMBNAIL: return "NOTIFICATION_THUMBNAIL"
  case SettingAttribute_AGREEMENT_SOUND_TO_TEXT: return "AGREEMENT_SOUND_TO_TEXT"
  case SettingAttribute_AGREEMENT_PRIVACY_POLICY_VERSION: return "AGREEMENT_PRIVACY_POLICY_VERSION"
  case SettingAttribute_AGREEMENT_AD_BY_WEB_ACCESS: return "AGREEMENT_AD_BY_WEB_ACCESS"
  case SettingAttribute_AGREEMENT_PHONE_NUMBER_MATCHING: return "AGREEMENT_PHONE_NUMBER_MATCHING"
  case SettingAttribute_AGREEMENT_COMMUNICATION_INFO: return "AGREEMENT_COMMUNICATION_INFO"
  case SettingAttribute_PRIVACY_SHARE_PERSONAL_INFO_TO_FRIENDS: return "PRIVACY_SHARE_PERSONAL_INFO_TO_FRIENDS"
  case SettingAttribute_AGREEMENT_THINGS_WIRELESS_COMMUNICATION: return "AGREEMENT_THINGS_WIRELESS_COMMUNICATION"
  case SettingAttribute_AGREEMENT_GDPR: return "AGREEMENT_GDPR"
  case SettingAttribute_PRIVACY_STATUS_MESSAGE_HISTORY: return "PRIVACY_STATUS_MESSAGE_HISTORY"
  case SettingAttribute_AGREEMENT_PROVIDE_LOCATION: return "AGREEMENT_PROVIDE_LOCATION"
  case SettingAttribute_AGREEMENT_BEACON: return "AGREEMENT_BEACON"
  case SettingAttribute_PRIVACY_PROFILE_HISTORY: return "PRIVACY_PROFILE_HISTORY"
  case SettingAttribute_AGREEMENT_CONTENTS_SUGGEST: return "AGREEMENT_CONTENTS_SUGGEST"
  case SettingAttribute_AGREEMENT_CONTENTS_SUGGEST_DATA_COLLECTION: return "AGREEMENT_CONTENTS_SUGGEST_DATA_COLLECTION"
  case SettingAttribute_PRIVACY_AGE_RESULT: return "PRIVACY_AGE_RESULT"
  case SettingAttribute_PRIVACY_AGE_RESULT_RECEIVED: return "PRIVACY_AGE_RESULT_RECEIVED"
  case SettingAttribute_AGREEMENT_OCR_IMAGE_COLLECTION: return "AGREEMENT_OCR_IMAGE_COLLECTION"
  case SettingAttribute_PRIVACY_ALLOW_FOLLOW: return "PRIVACY_ALLOW_FOLLOW"
  case SettingAttribute_PRIVACY_SHOW_FOLLOW_LIST: return "PRIVACY_SHOW_FOLLOW_LIST"
  case SettingAttribute_NOTIFICATION_BADGE_TALK_ONLY: return "NOTIFICATION_BADGE_TALK_ONLY"
  }
  return "<UNSET>"
}

func SettingAttributeFromString(s string) (SettingAttribute, error) {
  switch s {
  case "NOTIFICATION_ENABLE": return SettingAttribute_NOTIFICATION_ENABLE, nil 
  case "NOTIFICATION_MUTE_EXPIRATION": return SettingAttribute_NOTIFICATION_MUTE_EXPIRATION, nil 
  case "NOTIFICATION_NEW_MESSAGE": return SettingAttribute_NOTIFICATION_NEW_MESSAGE, nil 
  case "NOTIFICATION_GROUP_INVITATION": return SettingAttribute_NOTIFICATION_GROUP_INVITATION, nil 
  case "NOTIFICATION_SHOW_MESSAGE": return SettingAttribute_NOTIFICATION_SHOW_MESSAGE, nil 
  case "NOTIFICATION_INCOMING_CALL": return SettingAttribute_NOTIFICATION_INCOMING_CALL, nil 
  case "PRIVACY_SYNC_CONTACTS": return SettingAttribute_PRIVACY_SYNC_CONTACTS, nil 
  case "PRIVACY_SEARCH_BY_PHONE_NUMBER": return SettingAttribute_PRIVACY_SEARCH_BY_PHONE_NUMBER, nil 
  case "NOTIFICATION_SOUND_MESSAGE": return SettingAttribute_NOTIFICATION_SOUND_MESSAGE, nil 
  case "NOTIFICATION_SOUND_GROUP": return SettingAttribute_NOTIFICATION_SOUND_GROUP, nil 
  case "CONTACT_MY_TICKET": return SettingAttribute_CONTACT_MY_TICKET, nil 
  case "IDENTITY_PROVIDER": return SettingAttribute_IDENTITY_PROVIDER, nil 
  case "IDENTITY_IDENTIFIER": return SettingAttribute_IDENTITY_IDENTIFIER, nil 
  case "PRIVACY_SEARCH_BY_USERID": return SettingAttribute_PRIVACY_SEARCH_BY_USERID, nil 
  case "PRIVACY_SEARCH_BY_EMAIL": return SettingAttribute_PRIVACY_SEARCH_BY_EMAIL, nil 
  case "PREFERENCE_LOCALE": return SettingAttribute_PREFERENCE_LOCALE, nil 
  case "NOTIFICATION_DISABLED_WITH_SUB": return SettingAttribute_NOTIFICATION_DISABLED_WITH_SUB, nil 
  case "NOTIFICATION_PAYMENT": return SettingAttribute_NOTIFICATION_PAYMENT, nil 
  case "SECURITY_CENTER_SETTINGS": return SettingAttribute_SECURITY_CENTER_SETTINGS, nil 
  case "SNS_ACCOUNT": return SettingAttribute_SNS_ACCOUNT, nil 
  case "PHONE_REGISTRATION": return SettingAttribute_PHONE_REGISTRATION, nil 
  case "PRIVACY_ALLOW_SECONDARY_DEVICE_LOGIN": return SettingAttribute_PRIVACY_ALLOW_SECONDARY_DEVICE_LOGIN, nil 
  case "CUSTOM_MODE": return SettingAttribute_CUSTOM_MODE, nil 
  case "PRIVACY_PROFILE_IMAGE_POST_TO_MYHOME": return SettingAttribute_PRIVACY_PROFILE_IMAGE_POST_TO_MYHOME, nil 
  case "EMAIL_CONFIRMATION_STATUS": return SettingAttribute_EMAIL_CONFIRMATION_STATUS, nil 
  case "PRIVACY_RECV_MESSAGES_FROM_NOT_FRIEND": return SettingAttribute_PRIVACY_RECV_MESSAGES_FROM_NOT_FRIEND, nil 
  case "PRIVACY_AGREE_USE_LINECOIN_TO_PAIDCALL": return SettingAttribute_PRIVACY_AGREE_USE_LINECOIN_TO_PAIDCALL, nil 
  case "PRIVACY_AGREE_USE_PAIDCALL": return SettingAttribute_PRIVACY_AGREE_USE_PAIDCALL, nil 
  case "ACCOUNT_MIGRATION_PINCODE": return SettingAttribute_ACCOUNT_MIGRATION_PINCODE, nil 
  case "ENFORCED_INPUT_ACCOUNT_MIGRATION_PINCODE": return SettingAttribute_ENFORCED_INPUT_ACCOUNT_MIGRATION_PINCODE, nil 
  case "PRIVACY_ALLOW_FRIEND_REQUEST": return SettingAttribute_PRIVACY_ALLOW_FRIEND_REQUEST, nil 
  case "E2EE_ENABLE": return SettingAttribute_E2EE_ENABLE, nil 
  case "HITOKOTO_BACKUP_REQUESTED": return SettingAttribute_HITOKOTO_BACKUP_REQUESTED, nil 
  case "PRIVACY_PROFILE_MUSIC_POST_TO_MYHOME": return SettingAttribute_PRIVACY_PROFILE_MUSIC_POST_TO_MYHOME, nil 
  case "CONTACT_ALLOW_FOLLOWING": return SettingAttribute_CONTACT_ALLOW_FOLLOWING, nil 
  case "PRIVACY_ALLOW_NEARBY": return SettingAttribute_PRIVACY_ALLOW_NEARBY, nil 
  case "AGREEMENT_NEARBY": return SettingAttribute_AGREEMENT_NEARBY, nil 
  case "AGREEMENT_SQUARE": return SettingAttribute_AGREEMENT_SQUARE, nil 
  case "NOTIFICATION_MENTION": return SettingAttribute_NOTIFICATION_MENTION, nil 
  case "ALLOW_UNREGISTRATION_SECONDARY_DEVICE": return SettingAttribute_ALLOW_UNREGISTRATION_SECONDARY_DEVICE, nil 
  case "AGREEMENT_BOT_USE": return SettingAttribute_AGREEMENT_BOT_USE, nil 
  case "AGREEMENT_SHAKE_FUNCTION": return SettingAttribute_AGREEMENT_SHAKE_FUNCTION, nil 
  case "AGREEMENT_MOBILE_CONTACT_NAME": return SettingAttribute_AGREEMENT_MOBILE_CONTACT_NAME, nil 
  case "NOTIFICATION_THUMBNAIL": return SettingAttribute_NOTIFICATION_THUMBNAIL, nil 
  case "AGREEMENT_SOUND_TO_TEXT": return SettingAttribute_AGREEMENT_SOUND_TO_TEXT, nil 
  case "AGREEMENT_PRIVACY_POLICY_VERSION": return SettingAttribute_AGREEMENT_PRIVACY_POLICY_VERSION, nil 
  case "AGREEMENT_AD_BY_WEB_ACCESS": return SettingAttribute_AGREEMENT_AD_BY_WEB_ACCESS, nil 
  case "AGREEMENT_PHONE_NUMBER_MATCHING": return SettingAttribute_AGREEMENT_PHONE_NUMBER_MATCHING, nil 
  case "AGREEMENT_COMMUNICATION_INFO": return SettingAttribute_AGREEMENT_COMMUNICATION_INFO, nil 
  case "PRIVACY_SHARE_PERSONAL_INFO_TO_FRIENDS": return SettingAttribute_PRIVACY_SHARE_PERSONAL_INFO_TO_FRIENDS, nil 
  case "AGREEMENT_THINGS_WIRELESS_COMMUNICATION": return SettingAttribute_AGREEMENT_THINGS_WIRELESS_COMMUNICATION, nil 
  case "AGREEMENT_GDPR": return SettingAttribute_AGREEMENT_GDPR, nil 
  case "PRIVACY_STATUS_MESSAGE_HISTORY": return SettingAttribute_PRIVACY_STATUS_MESSAGE_HISTORY, nil 
  case "AGREEMENT_PROVIDE_LOCATION": return SettingAttribute_AGREEMENT_PROVIDE_LOCATION, nil 
  case "AGREEMENT_BEACON": return SettingAttribute_AGREEMENT_BEACON, nil 
  case "PRIVACY_PROFILE_HISTORY": return SettingAttribute_PRIVACY_PROFILE_HISTORY, nil 
  case "AGREEMENT_CONTENTS_SUGGEST": return SettingAttribute_AGREEMENT_CONTENTS_SUGGEST, nil 
  case "AGREEMENT_CONTENTS_SUGGEST_DATA_COLLECTION": return SettingAttribute_AGREEMENT_CONTENTS_SUGGEST_DATA_COLLECTION, nil 
  case "PRIVACY_AGE_RESULT": return SettingAttribute_PRIVACY_AGE_RESULT, nil 
  case "PRIVACY_AGE_RESULT_RECEIVED": return SettingAttribute_PRIVACY_AGE_RESULT_RECEIVED, nil 
  case "AGREEMENT_OCR_IMAGE_COLLECTION": return SettingAttribute_AGREEMENT_OCR_IMAGE_COLLECTION, nil 
  case "PRIVACY_ALLOW_FOLLOW": return SettingAttribute_PRIVACY_ALLOW_FOLLOW, nil 
  case "PRIVACY_SHOW_FOLLOW_LIST": return SettingAttribute_PRIVACY_SHOW_FOLLOW_LIST, nil 
  case "NOTIFICATION_BADGE_TALK_ONLY": return SettingAttribute_NOTIFICATION_BADGE_TALK_ONLY, nil 
  }
  return SettingAttribute(0), fmt.Errorf("not a valid SettingAttribute string")
}


func SettingAttributePtr(v SettingAttribute) *SettingAttribute { return &v }

func (p SettingAttribute) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *SettingAttribute) UnmarshalText(text []byte) error {
q, err := SettingAttributeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *SettingAttribute) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = SettingAttribute(v)
return nil
}

func (p * SettingAttribute) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type BotType int64
const (
  BotType_RESERVED BotType = 0
  BotType_OFFICIAL BotType = 1
  BotType_LINE_AT_0 BotType = 2
  BotType_LINE_AT BotType = 3
)

func (p BotType) String() string {
  switch p {
  case BotType_RESERVED: return "RESERVED"
  case BotType_OFFICIAL: return "OFFICIAL"
  case BotType_LINE_AT_0: return "LINE_AT_0"
  case BotType_LINE_AT: return "LINE_AT"
  }
  return "<UNSET>"
}

func BotTypeFromString(s string) (BotType, error) {
  switch s {
  case "RESERVED": return BotType_RESERVED, nil 
  case "OFFICIAL": return BotType_OFFICIAL, nil 
  case "LINE_AT_0": return BotType_LINE_AT_0, nil 
  case "LINE_AT": return BotType_LINE_AT, nil 
  }
  return BotType(0), fmt.Errorf("not a valid BotType string")
}


func BotTypePtr(v BotType) *BotType { return &v }

func (p BotType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *BotType) UnmarshalText(text []byte) error {
q, err := BotTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *BotType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = BotType(v)
return nil
}

func (p * BotType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type OnAirLabel int64
const (
  OnAirLabel_ON_AIR OnAirLabel = 0
  OnAirLabel_LIVE OnAirLabel = 1
)

func (p OnAirLabel) String() string {
  switch p {
  case OnAirLabel_ON_AIR: return "ON_AIR"
  case OnAirLabel_LIVE: return "LIVE"
  }
  return "<UNSET>"
}

func OnAirLabelFromString(s string) (OnAirLabel, error) {
  switch s {
  case "ON_AIR": return OnAirLabel_ON_AIR, nil 
  case "LIVE": return OnAirLabel_LIVE, nil 
  }
  return OnAirLabel(0), fmt.Errorf("not a valid OnAirLabel string")
}


func OnAirLabelPtr(v OnAirLabel) *OnAirLabel { return &v }

func (p OnAirLabel) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *OnAirLabel) UnmarshalText(text []byte) error {
q, err := OnAirLabelFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *OnAirLabel) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = OnAirLabel(v)
return nil
}

func (p * OnAirLabel) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type BatteryMode int64
const (
  BatteryMode_NORMAL BatteryMode = 1
  BatteryMode_LOW_BATTERY BatteryMode = 2
)

func (p BatteryMode) String() string {
  switch p {
  case BatteryMode_NORMAL: return "NORMAL"
  case BatteryMode_LOW_BATTERY: return "LOW_BATTERY"
  }
  return "<UNSET>"
}

func BatteryModeFromString(s string) (BatteryMode, error) {
  switch s {
  case "NORMAL": return BatteryMode_NORMAL, nil 
  case "LOW_BATTERY": return BatteryMode_LOW_BATTERY, nil 
  }
  return BatteryMode(0), fmt.Errorf("not a valid BatteryMode string")
}


func BatteryModePtr(v BatteryMode) *BatteryMode { return &v }

func (p BatteryMode) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *BatteryMode) UnmarshalText(text []byte) error {
q, err := BatteryModeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *BatteryMode) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = BatteryMode(v)
return nil
}

func (p * BatteryMode) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type C58964da int64
const (
  C58964da_BACKGROUND C58964da = 0
  C58964da_KEYWORD C58964da = 1
)

func (p C58964da) String() string {
  switch p {
  case C58964da_BACKGROUND: return "BACKGROUND"
  case C58964da_KEYWORD: return "KEYWORD"
  }
  return "<UNSET>"
}

func C58964daFromString(s string) (C58964da, error) {
  switch s {
  case "BACKGROUND": return C58964da_BACKGROUND, nil 
  case "KEYWORD": return C58964da_KEYWORD, nil 
  }
  return C58964da(0), fmt.Errorf("not a valid C58964da string")
}


func C58964daPtr(v C58964da) *C58964da { return &v }

func (p C58964da) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *C58964da) UnmarshalText(text []byte) error {
q, err := C58964daFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *C58964da) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = C58964da(v)
return nil
}

func (p * C58964da) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type ProfileAttribute int64
const (
  ProfileAttribute_ALL ProfileAttribute = 511
  ProfileAttribute_EMAIL ProfileAttribute = 1
  ProfileAttribute_DISPLAY_NAME ProfileAttribute = 2
  ProfileAttribute_PHONETIC_NAME ProfileAttribute = 4
  ProfileAttribute_PICTURE ProfileAttribute = 8
  ProfileAttribute_STATUS_MESSAGE ProfileAttribute = 16
  ProfileAttribute_ALLOW_SEARCH_BY_USERID ProfileAttribute = 32
  ProfileAttribute_ALLOW_SEARCH_BY_EMAIL ProfileAttribute = 64
  ProfileAttribute_BUDDY_STATUS ProfileAttribute = 128
  ProfileAttribute_MUSIC_PROFILE ProfileAttribute = 256
  ProfileAttribute_AVATAR_PROFILE ProfileAttribute = 512
)

func (p ProfileAttribute) String() string {
  switch p {
  case ProfileAttribute_ALL: return "ALL"
  case ProfileAttribute_EMAIL: return "EMAIL"
  case ProfileAttribute_DISPLAY_NAME: return "DISPLAY_NAME"
  case ProfileAttribute_PHONETIC_NAME: return "PHONETIC_NAME"
  case ProfileAttribute_PICTURE: return "PICTURE"
  case ProfileAttribute_STATUS_MESSAGE: return "STATUS_MESSAGE"
  case ProfileAttribute_ALLOW_SEARCH_BY_USERID: return "ALLOW_SEARCH_BY_USERID"
  case ProfileAttribute_ALLOW_SEARCH_BY_EMAIL: return "ALLOW_SEARCH_BY_EMAIL"
  case ProfileAttribute_BUDDY_STATUS: return "BUDDY_STATUS"
  case ProfileAttribute_MUSIC_PROFILE: return "MUSIC_PROFILE"
  case ProfileAttribute_AVATAR_PROFILE: return "AVATAR_PROFILE"
  }
  return "<UNSET>"
}

func ProfileAttributeFromString(s string) (ProfileAttribute, error) {
  switch s {
  case "ALL": return ProfileAttribute_ALL, nil 
  case "EMAIL": return ProfileAttribute_EMAIL, nil 
  case "DISPLAY_NAME": return ProfileAttribute_DISPLAY_NAME, nil 
  case "PHONETIC_NAME": return ProfileAttribute_PHONETIC_NAME, nil 
  case "PICTURE": return ProfileAttribute_PICTURE, nil 
  case "STATUS_MESSAGE": return ProfileAttribute_STATUS_MESSAGE, nil 
  case "ALLOW_SEARCH_BY_USERID": return ProfileAttribute_ALLOW_SEARCH_BY_USERID, nil 
  case "ALLOW_SEARCH_BY_EMAIL": return ProfileAttribute_ALLOW_SEARCH_BY_EMAIL, nil 
  case "BUDDY_STATUS": return ProfileAttribute_BUDDY_STATUS, nil 
  case "MUSIC_PROFILE": return ProfileAttribute_MUSIC_PROFILE, nil 
  case "AVATAR_PROFILE": return ProfileAttribute_AVATAR_PROFILE, nil 
  }
  return ProfileAttribute(0), fmt.Errorf("not a valid ProfileAttribute string")
}


func ProfileAttributePtr(v ProfileAttribute) *ProfileAttribute { return &v }

func (p ProfileAttribute) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *ProfileAttribute) UnmarshalText(text []byte) error {
q, err := ProfileAttributeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *ProfileAttribute) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = ProfileAttribute(v)
return nil
}

func (p * ProfileAttribute) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type ContactSettingAttribute int64
const (
  ContactSettingAttribute_CONTACT_SETTING_NOTIFICATION_DISABLE ContactSettingAttribute = 1
  ContactSettingAttribute_CONTACT_SETTING_DISPLAY_NAME_OVERRIDE ContactSettingAttribute = 2
  ContactSettingAttribute_CONTACT_SETTING_CONTACT_HIDE ContactSettingAttribute = 4
  ContactSettingAttribute_CONTACT_SETTING_FAVORITE ContactSettingAttribute = 8
  ContactSettingAttribute_CONTACT_SETTING_DELETE ContactSettingAttribute = 16
)

func (p ContactSettingAttribute) String() string {
  switch p {
  case ContactSettingAttribute_CONTACT_SETTING_NOTIFICATION_DISABLE: return "CONTACT_SETTING_NOTIFICATION_DISABLE"
  case ContactSettingAttribute_CONTACT_SETTING_DISPLAY_NAME_OVERRIDE: return "CONTACT_SETTING_DISPLAY_NAME_OVERRIDE"
  case ContactSettingAttribute_CONTACT_SETTING_CONTACT_HIDE: return "CONTACT_SETTING_CONTACT_HIDE"
  case ContactSettingAttribute_CONTACT_SETTING_FAVORITE: return "CONTACT_SETTING_FAVORITE"
  case ContactSettingAttribute_CONTACT_SETTING_DELETE: return "CONTACT_SETTING_DELETE"
  }
  return "<UNSET>"
}

func ContactSettingAttributeFromString(s string) (ContactSettingAttribute, error) {
  switch s {
  case "CONTACT_SETTING_NOTIFICATION_DISABLE": return ContactSettingAttribute_CONTACT_SETTING_NOTIFICATION_DISABLE, nil 
  case "CONTACT_SETTING_DISPLAY_NAME_OVERRIDE": return ContactSettingAttribute_CONTACT_SETTING_DISPLAY_NAME_OVERRIDE, nil 
  case "CONTACT_SETTING_CONTACT_HIDE": return ContactSettingAttribute_CONTACT_SETTING_CONTACT_HIDE, nil 
  case "CONTACT_SETTING_FAVORITE": return ContactSettingAttribute_CONTACT_SETTING_FAVORITE, nil 
  case "CONTACT_SETTING_DELETE": return ContactSettingAttribute_CONTACT_SETTING_DELETE, nil 
  }
  return ContactSettingAttribute(0), fmt.Errorf("not a valid ContactSettingAttribute string")
}


func ContactSettingAttributePtr(v ContactSettingAttribute) *ContactSettingAttribute { return &v }

func (p ContactSettingAttribute) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *ContactSettingAttribute) UnmarshalText(text []byte) error {
q, err := ContactSettingAttributeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *ContactSettingAttribute) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = ContactSettingAttribute(v)
return nil
}

func (p * ContactSettingAttribute) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type SecondaryQrCodeErrorCode int64
const (
  SecondaryQrCodeErrorCode_INTERNAL_ERROR SecondaryQrCodeErrorCode = 0
  SecondaryQrCodeErrorCode_ILLEGAL_ARGUMENT SecondaryQrCodeErrorCode = 1
  SecondaryQrCodeErrorCode_VERIFICATION_FAILED SecondaryQrCodeErrorCode = 2
  SecondaryQrCodeErrorCode_NOT_ALLOWED_QR_CODE_LOGIN SecondaryQrCodeErrorCode = 3
  SecondaryQrCodeErrorCode_VERIFICATION_NOTICE_FAILED SecondaryQrCodeErrorCode = 4
  SecondaryQrCodeErrorCode_RETRY_LATER SecondaryQrCodeErrorCode = 5
  SecondaryQrCodeErrorCode_INVALID_CONTEXT SecondaryQrCodeErrorCode = 100
  SecondaryQrCodeErrorCode_APP_UPGRADE_REQUIRED SecondaryQrCodeErrorCode = 101
)

func (p SecondaryQrCodeErrorCode) String() string {
  switch p {
  case SecondaryQrCodeErrorCode_INTERNAL_ERROR: return "INTERNAL_ERROR"
  case SecondaryQrCodeErrorCode_ILLEGAL_ARGUMENT: return "ILLEGAL_ARGUMENT"
  case SecondaryQrCodeErrorCode_VERIFICATION_FAILED: return "VERIFICATION_FAILED"
  case SecondaryQrCodeErrorCode_NOT_ALLOWED_QR_CODE_LOGIN: return "NOT_ALLOWED_QR_CODE_LOGIN"
  case SecondaryQrCodeErrorCode_VERIFICATION_NOTICE_FAILED: return "VERIFICATION_NOTICE_FAILED"
  case SecondaryQrCodeErrorCode_RETRY_LATER: return "RETRY_LATER"
  case SecondaryQrCodeErrorCode_INVALID_CONTEXT: return "INVALID_CONTEXT"
  case SecondaryQrCodeErrorCode_APP_UPGRADE_REQUIRED: return "APP_UPGRADE_REQUIRED"
  }
  return "<UNSET>"
}

func SecondaryQrCodeErrorCodeFromString(s string) (SecondaryQrCodeErrorCode, error) {
  switch s {
  case "INTERNAL_ERROR": return SecondaryQrCodeErrorCode_INTERNAL_ERROR, nil 
  case "ILLEGAL_ARGUMENT": return SecondaryQrCodeErrorCode_ILLEGAL_ARGUMENT, nil 
  case "VERIFICATION_FAILED": return SecondaryQrCodeErrorCode_VERIFICATION_FAILED, nil 
  case "NOT_ALLOWED_QR_CODE_LOGIN": return SecondaryQrCodeErrorCode_NOT_ALLOWED_QR_CODE_LOGIN, nil 
  case "VERIFICATION_NOTICE_FAILED": return SecondaryQrCodeErrorCode_VERIFICATION_NOTICE_FAILED, nil 
  case "RETRY_LATER": return SecondaryQrCodeErrorCode_RETRY_LATER, nil 
  case "INVALID_CONTEXT": return SecondaryQrCodeErrorCode_INVALID_CONTEXT, nil 
  case "APP_UPGRADE_REQUIRED": return SecondaryQrCodeErrorCode_APP_UPGRADE_REQUIRED, nil 
  }
  return SecondaryQrCodeErrorCode(0), fmt.Errorf("not a valid SecondaryQrCodeErrorCode string")
}


func SecondaryQrCodeErrorCodePtr(v SecondaryQrCodeErrorCode) *SecondaryQrCodeErrorCode { return &v }

func (p SecondaryQrCodeErrorCode) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *SecondaryQrCodeErrorCode) UnmarshalText(text []byte) error {
q, err := SecondaryQrCodeErrorCodeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *SecondaryQrCodeErrorCode) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = SecondaryQrCodeErrorCode(v)
return nil
}

func (p * SecondaryQrCodeErrorCode) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
// Attributes:
//  - Creator
//  - PreventedJoinByTicket
//  - InvitationTicket
//  - MemberMids
//  - InviteeMids
type GroupExtra struct {
  Creator string `thrift:"creator,1" db:"creator" json:"creator"`
  PreventedJoinByTicket bool `thrift:"preventedJoinByTicket,2" db:"preventedJoinByTicket" json:"preventedJoinByTicket"`
  InvitationTicket string `thrift:"invitationTicket,3" db:"invitationTicket" json:"invitationTicket"`
  MemberMids map[string]int64 `thrift:"memberMids,4" db:"memberMids" json:"memberMids"`
  InviteeMids map[string]int64 `thrift:"inviteeMids,5" db:"inviteeMids" json:"inviteeMids"`
}

func NewGroupExtra() *GroupExtra {
  return &GroupExtra{}
}


func (p *GroupExtra) GetCreator() string {
  return p.Creator
}

func (p *GroupExtra) GetPreventedJoinByTicket() bool {
  return p.PreventedJoinByTicket
}

func (p *GroupExtra) GetInvitationTicket() string {
  return p.InvitationTicket
}

func (p *GroupExtra) GetMemberMids() map[string]int64 {
  return p.MemberMids
}

func (p *GroupExtra) GetInviteeMids() map[string]int64 {
  return p.InviteeMids
}
func (p *GroupExtra) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GroupExtra)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Creator = v
}
  return nil
}

func (p *GroupExtra)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.PreventedJoinByTicket = v
}
  return nil
}

func (p *GroupExtra)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.InvitationTicket = v
}
  return nil
}

func (p *GroupExtra)  ReadField4(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]int64, size)
  p.MemberMids =  tMap
  for i := 0; i < size; i ++ {
var _key0 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key0 = v
}
var _val1 int64
    if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val1 = v
}
    p.MemberMids[_key0] = _val1
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *GroupExtra)  ReadField5(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]int64, size)
  p.InviteeMids =  tMap
  for i := 0; i < size; i ++ {
var _key2 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key2 = v
}
var _val3 int64
    if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val3 = v
}
    p.InviteeMids[_key2] = _val3
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *GroupExtra) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GroupExtra"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GroupExtra) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("creator", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:creator: ", p), err) }
  if err := oprot.WriteString(string(p.Creator)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.creator (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:creator: ", p), err) }
  return err
}

func (p *GroupExtra) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("preventedJoinByTicket", thrift.BOOL, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:preventedJoinByTicket: ", p), err) }
  if err := oprot.WriteBool(bool(p.PreventedJoinByTicket)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.preventedJoinByTicket (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:preventedJoinByTicket: ", p), err) }
  return err
}

func (p *GroupExtra) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("invitationTicket", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:invitationTicket: ", p), err) }
  if err := oprot.WriteString(string(p.InvitationTicket)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.invitationTicket (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:invitationTicket: ", p), err) }
  return err
}

func (p *GroupExtra) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("memberMids", thrift.MAP, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:memberMids: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.I64, len(p.MemberMids)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.MemberMids {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteI64(int64(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:memberMids: ", p), err) }
  return err
}

func (p *GroupExtra) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("inviteeMids", thrift.MAP, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:inviteeMids: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.I64, len(p.InviteeMids)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.InviteeMids {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteI64(int64(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:inviteeMids: ", p), err) }
  return err
}

func (p *GroupExtra) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GroupExtra(%+v)", *p)
}

type PeerExtra struct {
}

func NewPeerExtra() *PeerExtra {
  return &PeerExtra{}
}

func (p *PeerExtra) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PeerExtra) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("PeerExtra"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PeerExtra) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PeerExtra(%+v)", *p)
}

// Attributes:
//  - GroupExtra
//  - PeerExtra
type Extra struct {
  GroupExtra *GroupExtra `thrift:"groupExtra,1" db:"groupExtra" json:"groupExtra"`
  PeerExtra *PeerExtra `thrift:"peerExtra,2" db:"peerExtra" json:"peerExtra"`
}

func NewExtra() *Extra {
  return &Extra{}
}

var Extra_GroupExtra_DEFAULT *GroupExtra
func (p *Extra) GetGroupExtra() *GroupExtra {
  if !p.IsSetGroupExtra() {
    return Extra_GroupExtra_DEFAULT
  }
return p.GroupExtra
}
var Extra_PeerExtra_DEFAULT *PeerExtra
func (p *Extra) GetPeerExtra() *PeerExtra {
  if !p.IsSetPeerExtra() {
    return Extra_PeerExtra_DEFAULT
  }
return p.PeerExtra
}
func (p *Extra) IsSetGroupExtra() bool {
  return p.GroupExtra != nil
}

func (p *Extra) IsSetPeerExtra() bool {
  return p.PeerExtra != nil
}

func (p *Extra) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Extra)  ReadField1(iprot thrift.TProtocol) error {
  p.GroupExtra = &GroupExtra{}
  if err := p.GroupExtra.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.GroupExtra), err)
  }
  return nil
}

func (p *Extra)  ReadField2(iprot thrift.TProtocol) error {
  p.PeerExtra = &PeerExtra{}
  if err := p.PeerExtra.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.PeerExtra), err)
  }
  return nil
}

func (p *Extra) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Extra"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Extra) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("groupExtra", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:groupExtra: ", p), err) }
  if err := p.GroupExtra.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.GroupExtra), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:groupExtra: ", p), err) }
  return err
}

func (p *Extra) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("peerExtra", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:peerExtra: ", p), err) }
  if err := p.PeerExtra.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.PeerExtra), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:peerExtra: ", p), err) }
  return err
}

func (p *Extra) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Extra(%+v)", *p)
}

// Attributes:
//  - Type
//  - ChatMid
//  - CreatedTime
//  - NotificationDisabled
//  - FavoriteTimestamp
//  - ChatName
//  - PicturePath
//  - Extra
type Chat struct {
  Type ChatType `thrift:"type,1" db:"type" json:"type"`
  ChatMid string `thrift:"chatMid,2" db:"chatMid" json:"chatMid"`
  CreatedTime int64 `thrift:"createdTime,3" db:"createdTime" json:"createdTime"`
  NotificationDisabled bool `thrift:"notificationDisabled,4" db:"notificationDisabled" json:"notificationDisabled"`
  FavoriteTimestamp int64 `thrift:"favoriteTimestamp,5" db:"favoriteTimestamp" json:"favoriteTimestamp"`
  ChatName string `thrift:"chatName,6" db:"chatName" json:"chatName"`
  PicturePath string `thrift:"picturePath,7" db:"picturePath" json:"picturePath"`
  Extra *Extra `thrift:"extra,8" db:"extra" json:"extra"`
}

func NewChat() *Chat {
  return &Chat{}
}


func (p *Chat) GetType() ChatType {
  return p.Type
}

func (p *Chat) GetChatMid() string {
  return p.ChatMid
}

func (p *Chat) GetCreatedTime() int64 {
  return p.CreatedTime
}

func (p *Chat) GetNotificationDisabled() bool {
  return p.NotificationDisabled
}

func (p *Chat) GetFavoriteTimestamp() int64 {
  return p.FavoriteTimestamp
}

func (p *Chat) GetChatName() string {
  return p.ChatName
}

func (p *Chat) GetPicturePath() string {
  return p.PicturePath
}
var Chat_Extra_DEFAULT *Extra
func (p *Chat) GetExtra() *Extra {
  if !p.IsSetExtra() {
    return Chat_Extra_DEFAULT
  }
return p.Extra
}
func (p *Chat) IsSetExtra() bool {
  return p.Extra != nil
}

func (p *Chat) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Chat)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := ChatType(v)
  p.Type = temp
}
  return nil
}

func (p *Chat)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ChatMid = v
}
  return nil
}

func (p *Chat)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.CreatedTime = v
}
  return nil
}

func (p *Chat)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.NotificationDisabled = v
}
  return nil
}

func (p *Chat)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.FavoriteTimestamp = v
}
  return nil
}

func (p *Chat)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.ChatName = v
}
  return nil
}

func (p *Chat)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.PicturePath = v
}
  return nil
}

func (p *Chat)  ReadField8(iprot thrift.TProtocol) error {
  p.Extra = &Extra{}
  if err := p.Extra.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Extra), err)
  }
  return nil
}

func (p *Chat) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Chat"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Chat) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("type", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:type: ", p), err) }
  if err := oprot.WriteI32(int32(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:type: ", p), err) }
  return err
}

func (p *Chat) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("chatMid", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:chatMid: ", p), err) }
  if err := oprot.WriteString(string(p.ChatMid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.chatMid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:chatMid: ", p), err) }
  return err
}

func (p *Chat) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("createdTime", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:createdTime: ", p), err) }
  if err := oprot.WriteI64(int64(p.CreatedTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.createdTime (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:createdTime: ", p), err) }
  return err
}

func (p *Chat) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("notificationDisabled", thrift.BOOL, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:notificationDisabled: ", p), err) }
  if err := oprot.WriteBool(bool(p.NotificationDisabled)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.notificationDisabled (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:notificationDisabled: ", p), err) }
  return err
}

func (p *Chat) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("favoriteTimestamp", thrift.I64, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:favoriteTimestamp: ", p), err) }
  if err := oprot.WriteI64(int64(p.FavoriteTimestamp)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.favoriteTimestamp (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:favoriteTimestamp: ", p), err) }
  return err
}

func (p *Chat) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("chatName", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:chatName: ", p), err) }
  if err := oprot.WriteString(string(p.ChatName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.chatName (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:chatName: ", p), err) }
  return err
}

func (p *Chat) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("picturePath", thrift.STRING, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:picturePath: ", p), err) }
  if err := oprot.WriteString(string(p.PicturePath)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.picturePath (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:picturePath: ", p), err) }
  return err
}

func (p *Chat) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("extra", thrift.STRUCT, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:extra: ", p), err) }
  if err := p.Extra.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Extra), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:extra: ", p), err) }
  return err
}

func (p *Chat) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Chat(%+v)", *p)
}

// Attributes:
//  - Version
//  - UpdatedMillis
//  - Thumbnail
type AvatarProfile struct {
  Version string `thrift:"version,1" db:"version" json:"version"`
  UpdatedMillis int64 `thrift:"updatedMillis,2" db:"updatedMillis" json:"updatedMillis"`
  Thumbnail string `thrift:"thumbnail,3" db:"thumbnail" json:"thumbnail"`
}

func NewAvatarProfile() *AvatarProfile {
  return &AvatarProfile{}
}


func (p *AvatarProfile) GetVersion() string {
  return p.Version
}

func (p *AvatarProfile) GetUpdatedMillis() int64 {
  return p.UpdatedMillis
}

func (p *AvatarProfile) GetThumbnail() string {
  return p.Thumbnail
}
func (p *AvatarProfile) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AvatarProfile)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Version = v
}
  return nil
}

func (p *AvatarProfile)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.UpdatedMillis = v
}
  return nil
}

func (p *AvatarProfile)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Thumbnail = v
}
  return nil
}

func (p *AvatarProfile) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("AvatarProfile"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AvatarProfile) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("version", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:version: ", p), err) }
  if err := oprot.WriteString(string(p.Version)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.version (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:version: ", p), err) }
  return err
}

func (p *AvatarProfile) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("updatedMillis", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:updatedMillis: ", p), err) }
  if err := oprot.WriteI64(int64(p.UpdatedMillis)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.updatedMillis (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:updatedMillis: ", p), err) }
  return err
}

func (p *AvatarProfile) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("thumbnail", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:thumbnail: ", p), err) }
  if err := oprot.WriteString(string(p.Thumbnail)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.thumbnail (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:thumbnail: ", p), err) }
  return err
}

func (p *AvatarProfile) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AvatarProfile(%+v)", *p)
}

// Attributes:
//  - Mid
//  - CreatedTime
//  - Type
//  - Status
//  - Relation
//  - DisplayName
//  - PhoneticName
//  - PictureStatus
//  - ThumbnailUrl
//  - StatusMessage
//  - DisplayNameOverridden
//  - FavoriteTime
//  - CapableVoiceCall
//  - CapableVideoCall
//  - CapableMyhome
//  - CapableBuddy
//  - Attributes
//  - Settings
//  - PicturePath
//  - RecommendParams
//  - FriendRequestStatus
//  - MusicProfile
//  - VideoProfile
//  - StatusMessageContentMetadata
//  - AvatarProfile
type Contact struct {
  Mid string `thrift:"mid,1" db:"mid" json:"mid"`
  CreatedTime int64 `thrift:"createdTime,2" db:"createdTime" json:"createdTime"`
  // unused fields # 3 to 9
  Type ContactType `thrift:"type,10" db:"type" json:"type"`
  Status ContactStatus `thrift:"status,11" db:"status" json:"status"`
  // unused fields # 12 to 20
  Relation Relation `thrift:"relation,21" db:"relation" json:"relation"`
  DisplayName string `thrift:"displayName,22" db:"displayName" json:"displayName"`
  PhoneticName string `thrift:"phoneticName,23" db:"phoneticName" json:"phoneticName"`
  PictureStatus string `thrift:"pictureStatus,24" db:"pictureStatus" json:"pictureStatus"`
  ThumbnailUrl string `thrift:"thumbnailUrl,25" db:"thumbnailUrl" json:"thumbnailUrl"`
  StatusMessage string `thrift:"statusMessage,26" db:"statusMessage" json:"statusMessage"`
  DisplayNameOverridden string `thrift:"displayNameOverridden,27" db:"displayNameOverridden" json:"displayNameOverridden"`
  FavoriteTime int64 `thrift:"favoriteTime,28" db:"favoriteTime" json:"favoriteTime"`
  // unused fields # 29 to 30
  CapableVoiceCall int64 `thrift:"capableVoiceCall,31" db:"capableVoiceCall" json:"capableVoiceCall"`
  CapableVideoCall bool `thrift:"capableVideoCall,32" db:"capableVideoCall" json:"capableVideoCall"`
  CapableMyhome bool `thrift:"capableMyhome,33" db:"capableMyhome" json:"capableMyhome"`
  CapableBuddy bool `thrift:"capableBuddy,34" db:"capableBuddy" json:"capableBuddy"`
  Attributes bool `thrift:"attributes,35" db:"attributes" json:"attributes"`
  Settings int32 `thrift:"settings,36" db:"settings" json:"settings"`
  PicturePath string `thrift:"picturePath,37" db:"picturePath" json:"picturePath"`
  RecommendParams string `thrift:"recommendParams,38" db:"recommendParams" json:"recommendParams"`
  FriendRequestStatus FriendRequestStatus `thrift:"friendRequestStatus,39" db:"friendRequestStatus" json:"friendRequestStatus"`
  MusicProfile string `thrift:"musicProfile,40" db:"musicProfile" json:"musicProfile"`
  // unused field # 41
  VideoProfile string `thrift:"videoProfile,42" db:"videoProfile" json:"videoProfile"`
  StatusMessageContentMetadata map[string]string `thrift:"statusMessageContentMetadata,43" db:"statusMessageContentMetadata" json:"statusMessageContentMetadata"`
  AvatarProfile *AvatarProfile `thrift:"avatarProfile,44" db:"avatarProfile" json:"avatarProfile"`
}

func NewContact() *Contact {
  return &Contact{}
}


func (p *Contact) GetMid() string {
  return p.Mid
}

func (p *Contact) GetCreatedTime() int64 {
  return p.CreatedTime
}

func (p *Contact) GetType() ContactType {
  return p.Type
}

func (p *Contact) GetStatus() ContactStatus {
  return p.Status
}

func (p *Contact) GetRelation() Relation {
  return p.Relation
}

func (p *Contact) GetDisplayName() string {
  return p.DisplayName
}

func (p *Contact) GetPhoneticName() string {
  return p.PhoneticName
}

func (p *Contact) GetPictureStatus() string {
  return p.PictureStatus
}

func (p *Contact) GetThumbnailUrl() string {
  return p.ThumbnailUrl
}

func (p *Contact) GetStatusMessage() string {
  return p.StatusMessage
}

func (p *Contact) GetDisplayNameOverridden() string {
  return p.DisplayNameOverridden
}

func (p *Contact) GetFavoriteTime() int64 {
  return p.FavoriteTime
}

func (p *Contact) GetCapableVoiceCall() int64 {
  return p.CapableVoiceCall
}

func (p *Contact) GetCapableVideoCall() bool {
  return p.CapableVideoCall
}

func (p *Contact) GetCapableMyhome() bool {
  return p.CapableMyhome
}

func (p *Contact) GetCapableBuddy() bool {
  return p.CapableBuddy
}

func (p *Contact) GetAttributes() bool {
  return p.Attributes
}

func (p *Contact) GetSettings() int32 {
  return p.Settings
}

func (p *Contact) GetPicturePath() string {
  return p.PicturePath
}

func (p *Contact) GetRecommendParams() string {
  return p.RecommendParams
}

func (p *Contact) GetFriendRequestStatus() FriendRequestStatus {
  return p.FriendRequestStatus
}

func (p *Contact) GetMusicProfile() string {
  return p.MusicProfile
}

func (p *Contact) GetVideoProfile() string {
  return p.VideoProfile
}

func (p *Contact) GetStatusMessageContentMetadata() map[string]string {
  return p.StatusMessageContentMetadata
}
var Contact_AvatarProfile_DEFAULT *AvatarProfile
func (p *Contact) GetAvatarProfile() *AvatarProfile {
  if !p.IsSetAvatarProfile() {
    return Contact_AvatarProfile_DEFAULT
  }
return p.AvatarProfile
}
func (p *Contact) IsSetAvatarProfile() bool {
  return p.AvatarProfile != nil
}

func (p *Contact) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField10(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField11(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 21:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField21(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 22:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField22(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 23:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField23(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 24:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField24(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 25:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField25(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 26:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField26(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 27:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField27(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 28:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField28(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 31:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField31(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 32:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField32(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 33:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField33(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 34:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField34(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 35:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField35(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 36:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField36(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 37:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField37(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 38:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField38(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 39:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField39(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 40:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField40(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 42:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField42(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 43:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField43(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 44:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField44(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Contact)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Mid = v
}
  return nil
}

func (p *Contact)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.CreatedTime = v
}
  return nil
}

func (p *Contact)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  temp := ContactType(v)
  p.Type = temp
}
  return nil
}

func (p *Contact)  ReadField11(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  temp := ContactStatus(v)
  p.Status = temp
}
  return nil
}

func (p *Contact)  ReadField21(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 21: ", err)
} else {
  temp := Relation(v)
  p.Relation = temp
}
  return nil
}

func (p *Contact)  ReadField22(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 22: ", err)
} else {
  p.DisplayName = v
}
  return nil
}

func (p *Contact)  ReadField23(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 23: ", err)
} else {
  p.PhoneticName = v
}
  return nil
}

func (p *Contact)  ReadField24(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 24: ", err)
} else {
  p.PictureStatus = v
}
  return nil
}

func (p *Contact)  ReadField25(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 25: ", err)
} else {
  p.ThumbnailUrl = v
}
  return nil
}

func (p *Contact)  ReadField26(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 26: ", err)
} else {
  p.StatusMessage = v
}
  return nil
}

func (p *Contact)  ReadField27(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 27: ", err)
} else {
  p.DisplayNameOverridden = v
}
  return nil
}

func (p *Contact)  ReadField28(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 28: ", err)
} else {
  p.FavoriteTime = v
}
  return nil
}

func (p *Contact)  ReadField31(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 31: ", err)
} else {
  p.CapableVoiceCall = v
}
  return nil
}

func (p *Contact)  ReadField32(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 32: ", err)
} else {
  p.CapableVideoCall = v
}
  return nil
}

func (p *Contact)  ReadField33(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 33: ", err)
} else {
  p.CapableMyhome = v
}
  return nil
}

func (p *Contact)  ReadField34(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 34: ", err)
} else {
  p.CapableBuddy = v
}
  return nil
}

func (p *Contact)  ReadField35(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 35: ", err)
} else {
  p.Attributes = v
}
  return nil
}

func (p *Contact)  ReadField36(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 36: ", err)
} else {
  p.Settings = v
}
  return nil
}

func (p *Contact)  ReadField37(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 37: ", err)
} else {
  p.PicturePath = v
}
  return nil
}

func (p *Contact)  ReadField38(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 38: ", err)
} else {
  p.RecommendParams = v
}
  return nil
}

func (p *Contact)  ReadField39(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 39: ", err)
} else {
  temp := FriendRequestStatus(v)
  p.FriendRequestStatus = temp
}
  return nil
}

func (p *Contact)  ReadField40(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 40: ", err)
} else {
  p.MusicProfile = v
}
  return nil
}

func (p *Contact)  ReadField42(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 42: ", err)
} else {
  p.VideoProfile = v
}
  return nil
}

func (p *Contact)  ReadField43(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.StatusMessageContentMetadata =  tMap
  for i := 0; i < size; i ++ {
var _key4 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key4 = v
}
var _val5 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val5 = v
}
    p.StatusMessageContentMetadata[_key4] = _val5
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *Contact)  ReadField44(iprot thrift.TProtocol) error {
  p.AvatarProfile = &AvatarProfile{}
  if err := p.AvatarProfile.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AvatarProfile), err)
  }
  return nil
}

func (p *Contact) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Contact"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField11(oprot); err != nil { return err }
    if err := p.writeField21(oprot); err != nil { return err }
    if err := p.writeField22(oprot); err != nil { return err }
    if err := p.writeField23(oprot); err != nil { return err }
    if err := p.writeField24(oprot); err != nil { return err }
    if err := p.writeField25(oprot); err != nil { return err }
    if err := p.writeField26(oprot); err != nil { return err }
    if err := p.writeField27(oprot); err != nil { return err }
    if err := p.writeField28(oprot); err != nil { return err }
    if err := p.writeField31(oprot); err != nil { return err }
    if err := p.writeField32(oprot); err != nil { return err }
    if err := p.writeField33(oprot); err != nil { return err }
    if err := p.writeField34(oprot); err != nil { return err }
    if err := p.writeField35(oprot); err != nil { return err }
    if err := p.writeField36(oprot); err != nil { return err }
    if err := p.writeField37(oprot); err != nil { return err }
    if err := p.writeField38(oprot); err != nil { return err }
    if err := p.writeField39(oprot); err != nil { return err }
    if err := p.writeField40(oprot); err != nil { return err }
    if err := p.writeField42(oprot); err != nil { return err }
    if err := p.writeField43(oprot); err != nil { return err }
    if err := p.writeField44(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Contact) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("mid", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:mid: ", p), err) }
  if err := oprot.WriteString(string(p.Mid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.mid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:mid: ", p), err) }
  return err
}

func (p *Contact) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("createdTime", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:createdTime: ", p), err) }
  if err := oprot.WriteI64(int64(p.CreatedTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.createdTime (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:createdTime: ", p), err) }
  return err
}

func (p *Contact) writeField10(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("type", thrift.I32, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:type: ", p), err) }
  if err := oprot.WriteI32(int32(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:type: ", p), err) }
  return err
}

func (p *Contact) writeField11(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("status", thrift.I32, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:status: ", p), err) }
  if err := oprot.WriteI32(int32(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.status (11) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:status: ", p), err) }
  return err
}

func (p *Contact) writeField21(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("relation", thrift.I32, 21); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 21:relation: ", p), err) }
  if err := oprot.WriteI32(int32(p.Relation)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.relation (21) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 21:relation: ", p), err) }
  return err
}

func (p *Contact) writeField22(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("displayName", thrift.STRING, 22); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 22:displayName: ", p), err) }
  if err := oprot.WriteString(string(p.DisplayName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.displayName (22) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 22:displayName: ", p), err) }
  return err
}

func (p *Contact) writeField23(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("phoneticName", thrift.STRING, 23); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 23:phoneticName: ", p), err) }
  if err := oprot.WriteString(string(p.PhoneticName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.phoneticName (23) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 23:phoneticName: ", p), err) }
  return err
}

func (p *Contact) writeField24(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("pictureStatus", thrift.STRING, 24); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 24:pictureStatus: ", p), err) }
  if err := oprot.WriteString(string(p.PictureStatus)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.pictureStatus (24) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 24:pictureStatus: ", p), err) }
  return err
}

func (p *Contact) writeField25(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("thumbnailUrl", thrift.STRING, 25); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 25:thumbnailUrl: ", p), err) }
  if err := oprot.WriteString(string(p.ThumbnailUrl)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.thumbnailUrl (25) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 25:thumbnailUrl: ", p), err) }
  return err
}

func (p *Contact) writeField26(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("statusMessage", thrift.STRING, 26); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 26:statusMessage: ", p), err) }
  if err := oprot.WriteString(string(p.StatusMessage)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.statusMessage (26) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 26:statusMessage: ", p), err) }
  return err
}

func (p *Contact) writeField27(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("displayNameOverridden", thrift.STRING, 27); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 27:displayNameOverridden: ", p), err) }
  if err := oprot.WriteString(string(p.DisplayNameOverridden)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.displayNameOverridden (27) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 27:displayNameOverridden: ", p), err) }
  return err
}

func (p *Contact) writeField28(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("favoriteTime", thrift.I64, 28); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 28:favoriteTime: ", p), err) }
  if err := oprot.WriteI64(int64(p.FavoriteTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.favoriteTime (28) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 28:favoriteTime: ", p), err) }
  return err
}

func (p *Contact) writeField31(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("capableVoiceCall", thrift.I64, 31); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 31:capableVoiceCall: ", p), err) }
  if err := oprot.WriteI64(int64(p.CapableVoiceCall)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.capableVoiceCall (31) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 31:capableVoiceCall: ", p), err) }
  return err
}

func (p *Contact) writeField32(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("capableVideoCall", thrift.BOOL, 32); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 32:capableVideoCall: ", p), err) }
  if err := oprot.WriteBool(bool(p.CapableVideoCall)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.capableVideoCall (32) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 32:capableVideoCall: ", p), err) }
  return err
}

func (p *Contact) writeField33(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("capableMyhome", thrift.BOOL, 33); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 33:capableMyhome: ", p), err) }
  if err := oprot.WriteBool(bool(p.CapableMyhome)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.capableMyhome (33) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 33:capableMyhome: ", p), err) }
  return err
}

func (p *Contact) writeField34(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("capableBuddy", thrift.BOOL, 34); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 34:capableBuddy: ", p), err) }
  if err := oprot.WriteBool(bool(p.CapableBuddy)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.capableBuddy (34) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 34:capableBuddy: ", p), err) }
  return err
}

func (p *Contact) writeField35(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("attributes", thrift.BOOL, 35); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 35:attributes: ", p), err) }
  if err := oprot.WriteBool(bool(p.Attributes)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.attributes (35) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 35:attributes: ", p), err) }
  return err
}

func (p *Contact) writeField36(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("settings", thrift.I32, 36); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 36:settings: ", p), err) }
  if err := oprot.WriteI32(int32(p.Settings)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.settings (36) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 36:settings: ", p), err) }
  return err
}

func (p *Contact) writeField37(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("picturePath", thrift.STRING, 37); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 37:picturePath: ", p), err) }
  if err := oprot.WriteString(string(p.PicturePath)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.picturePath (37) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 37:picturePath: ", p), err) }
  return err
}

func (p *Contact) writeField38(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("recommendParams", thrift.STRING, 38); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 38:recommendParams: ", p), err) }
  if err := oprot.WriteString(string(p.RecommendParams)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.recommendParams (38) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 38:recommendParams: ", p), err) }
  return err
}

func (p *Contact) writeField39(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("friendRequestStatus", thrift.I32, 39); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 39:friendRequestStatus: ", p), err) }
  if err := oprot.WriteI32(int32(p.FriendRequestStatus)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.friendRequestStatus (39) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 39:friendRequestStatus: ", p), err) }
  return err
}

func (p *Contact) writeField40(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("musicProfile", thrift.STRING, 40); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 40:musicProfile: ", p), err) }
  if err := oprot.WriteString(string(p.MusicProfile)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.musicProfile (40) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 40:musicProfile: ", p), err) }
  return err
}

func (p *Contact) writeField42(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("videoProfile", thrift.STRING, 42); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 42:videoProfile: ", p), err) }
  if err := oprot.WriteString(string(p.VideoProfile)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.videoProfile (42) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 42:videoProfile: ", p), err) }
  return err
}

func (p *Contact) writeField43(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("statusMessageContentMetadata", thrift.MAP, 43); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 43:statusMessageContentMetadata: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.StatusMessageContentMetadata)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.StatusMessageContentMetadata {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 43:statusMessageContentMetadata: ", p), err) }
  return err
}

func (p *Contact) writeField44(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("avatarProfile", thrift.STRUCT, 44); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 44:avatarProfile: ", p), err) }
  if err := p.AvatarProfile.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AvatarProfile), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 44:avatarProfile: ", p), err) }
  return err
}

func (p *Contact) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Contact(%+v)", *p)
}

// Attributes:
//  - Mid
//  - CreatedTime
//  - Contacts
//  - NotificationDisabled
//  - MemberMids
type Room struct {
  Mid string `thrift:"mid,1" db:"mid" json:"mid"`
  CreatedTime int64 `thrift:"createdTime,2" db:"createdTime" json:"createdTime"`
  // unused fields # 3 to 9
  Contacts []*Contact `thrift:"contacts,10" db:"contacts" json:"contacts"`
  // unused fields # 11 to 30
  NotificationDisabled bool `thrift:"notificationDisabled,31" db:"notificationDisabled" json:"notificationDisabled"`
  // unused fields # 32 to 39
  MemberMids []string `thrift:"memberMids,40" db:"memberMids" json:"memberMids"`
}

func NewRoom() *Room {
  return &Room{}
}


func (p *Room) GetMid() string {
  return p.Mid
}

func (p *Room) GetCreatedTime() int64 {
  return p.CreatedTime
}

func (p *Room) GetContacts() []*Contact {
  return p.Contacts
}

func (p *Room) GetNotificationDisabled() bool {
  return p.NotificationDisabled
}

func (p *Room) GetMemberMids() []string {
  return p.MemberMids
}
func (p *Room) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField10(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 31:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField31(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 40:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField40(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Room)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Mid = v
}
  return nil
}

func (p *Room)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.CreatedTime = v
}
  return nil
}

func (p *Room)  ReadField10(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Contact, 0, size)
  p.Contacts =  tSlice
  for i := 0; i < size; i ++ {
    _elem6 := &Contact{}
    if err := _elem6.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem6), err)
    }
    p.Contacts = append(p.Contacts, _elem6)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *Room)  ReadField31(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 31: ", err)
} else {
  p.NotificationDisabled = v
}
  return nil
}

func (p *Room)  ReadField40(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.MemberMids =  tSlice
  for i := 0; i < size; i ++ {
var _elem7 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem7 = v
}
    p.MemberMids = append(p.MemberMids, _elem7)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *Room) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Room"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField31(oprot); err != nil { return err }
    if err := p.writeField40(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Room) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("mid", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:mid: ", p), err) }
  if err := oprot.WriteString(string(p.Mid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.mid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:mid: ", p), err) }
  return err
}

func (p *Room) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("createdTime", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:createdTime: ", p), err) }
  if err := oprot.WriteI64(int64(p.CreatedTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.createdTime (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:createdTime: ", p), err) }
  return err
}

func (p *Room) writeField10(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("contacts", thrift.LIST, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:contacts: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Contacts)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Contacts {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:contacts: ", p), err) }
  return err
}

func (p *Room) writeField31(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("notificationDisabled", thrift.BOOL, 31); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 31:notificationDisabled: ", p), err) }
  if err := oprot.WriteBool(bool(p.NotificationDisabled)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.notificationDisabled (31) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 31:notificationDisabled: ", p), err) }
  return err
}

func (p *Room) writeField40(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("memberMids", thrift.LIST, 40); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 40:memberMids: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.MemberMids)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.MemberMids {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 40:memberMids: ", p), err) }
  return err
}

func (p *Room) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Room(%+v)", *p)
}

// Attributes:
//  - Revision
//  - ConfigMap
type Configurations struct {
  Revision int64 `thrift:"revision,1" db:"revision" json:"revision"`
  ConfigMap map[string]string `thrift:"configMap,2" db:"configMap" json:"configMap"`
}

func NewConfigurations() *Configurations {
  return &Configurations{}
}


func (p *Configurations) GetRevision() int64 {
  return p.Revision
}

func (p *Configurations) GetConfigMap() map[string]string {
  return p.ConfigMap
}
func (p *Configurations) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Configurations)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Revision = v
}
  return nil
}

func (p *Configurations)  ReadField2(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.ConfigMap =  tMap
  for i := 0; i < size; i ++ {
var _key8 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key8 = v
}
var _val9 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val9 = v
}
    p.ConfigMap[_key8] = _val9
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *Configurations) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Configurations"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Configurations) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("revision", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:revision: ", p), err) }
  if err := oprot.WriteI64(int64(p.Revision)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.revision (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:revision: ", p), err) }
  return err
}

func (p *Configurations) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("configMap", thrift.MAP, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:configMap: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.ConfigMap)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.ConfigMap {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:configMap: ", p), err) }
  return err
}

func (p *Configurations) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Configurations(%+v)", *p)
}

type DeleteOtherFromChatResponse struct {
}

func NewDeleteOtherFromChatResponse() *DeleteOtherFromChatResponse {
  return &DeleteOtherFromChatResponse{}
}

func (p *DeleteOtherFromChatResponse) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DeleteOtherFromChatResponse) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("DeleteOtherFromChatResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DeleteOtherFromChatResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DeleteOtherFromChatResponse(%+v)", *p)
}

type InviteIntoChatResponse struct {
}

func NewInviteIntoChatResponse() *InviteIntoChatResponse {
  return &InviteIntoChatResponse{}
}

func (p *InviteIntoChatResponse) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *InviteIntoChatResponse) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("InviteIntoChatResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *InviteIntoChatResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("InviteIntoChatResponse(%+v)", *p)
}

type AcceptChatInvitationByTicketResponse struct {
}

func NewAcceptChatInvitationByTicketResponse() *AcceptChatInvitationByTicketResponse {
  return &AcceptChatInvitationByTicketResponse{}
}

func (p *AcceptChatInvitationByTicketResponse) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AcceptChatInvitationByTicketResponse) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("AcceptChatInvitationByTicketResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AcceptChatInvitationByTicketResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AcceptChatInvitationByTicketResponse(%+v)", *p)
}

type DeleteSelfFromChatResponse struct {
}

func NewDeleteSelfFromChatResponse() *DeleteSelfFromChatResponse {
  return &DeleteSelfFromChatResponse{}
}

func (p *DeleteSelfFromChatResponse) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DeleteSelfFromChatResponse) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("DeleteSelfFromChatResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DeleteSelfFromChatResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DeleteSelfFromChatResponse(%+v)", *p)
}

// Attributes:
//  - Chat
type FindChatByTicketResponse struct {
  Chat *Chat `thrift:"chat,1" db:"chat" json:"chat"`
}

func NewFindChatByTicketResponse() *FindChatByTicketResponse {
  return &FindChatByTicketResponse{}
}

var FindChatByTicketResponse_Chat_DEFAULT *Chat
func (p *FindChatByTicketResponse) GetChat() *Chat {
  if !p.IsSetChat() {
    return FindChatByTicketResponse_Chat_DEFAULT
  }
return p.Chat
}
func (p *FindChatByTicketResponse) IsSetChat() bool {
  return p.Chat != nil
}

func (p *FindChatByTicketResponse) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *FindChatByTicketResponse)  ReadField1(iprot thrift.TProtocol) error {
  p.Chat = &Chat{}
  if err := p.Chat.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Chat), err)
  }
  return nil
}

func (p *FindChatByTicketResponse) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("FindChatByTicketResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *FindChatByTicketResponse) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("chat", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:chat: ", p), err) }
  if err := p.Chat.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Chat), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:chat: ", p), err) }
  return err
}

func (p *FindChatByTicketResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("FindChatByTicketResponse(%+v)", *p)
}

type CancelChatInvitationResponse struct {
}

func NewCancelChatInvitationResponse() *CancelChatInvitationResponse {
  return &CancelChatInvitationResponse{}
}

func (p *CancelChatInvitationResponse) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CancelChatInvitationResponse) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("CancelChatInvitationResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CancelChatInvitationResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CancelChatInvitationResponse(%+v)", *p)
}

type AcceptChatInvitationResponse struct {
}

func NewAcceptChatInvitationResponse() *AcceptChatInvitationResponse {
  return &AcceptChatInvitationResponse{}
}

func (p *AcceptChatInvitationResponse) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AcceptChatInvitationResponse) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("AcceptChatInvitationResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AcceptChatInvitationResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AcceptChatInvitationResponse(%+v)", *p)
}

// Attributes:
//  - DeliveredTime
//  - MessageId
type MessageBoxV2MessageId struct {
  DeliveredTime int64 `thrift:"deliveredTime,1" db:"deliveredTime" json:"deliveredTime"`
  MessageId int64 `thrift:"messageId,2" db:"messageId" json:"messageId"`
}

func NewMessageBoxV2MessageId() *MessageBoxV2MessageId {
  return &MessageBoxV2MessageId{}
}


func (p *MessageBoxV2MessageId) GetDeliveredTime() int64 {
  return p.DeliveredTime
}

func (p *MessageBoxV2MessageId) GetMessageId() int64 {
  return p.MessageId
}
func (p *MessageBoxV2MessageId) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MessageBoxV2MessageId)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.DeliveredTime = v
}
  return nil
}

func (p *MessageBoxV2MessageId)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.MessageId = v
}
  return nil
}

func (p *MessageBoxV2MessageId) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("MessageBoxV2MessageId"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MessageBoxV2MessageId) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("deliveredTime", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:deliveredTime: ", p), err) }
  if err := oprot.WriteI64(int64(p.DeliveredTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.deliveredTime (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:deliveredTime: ", p), err) }
  return err
}

func (p *MessageBoxV2MessageId) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("messageId", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:messageId: ", p), err) }
  if err := oprot.WriteI64(int64(p.MessageId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.messageId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:messageId: ", p), err) }
  return err
}

func (p *MessageBoxV2MessageId) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MessageBoxV2MessageId(%+v)", *p)
}

// Attributes:
//  - RadiusMeters
//  - RadiusConfidence
//  - AltitudeAccuracy
//  - VelocityAccuracy
//  - BearingAccuracy
type GeolocationAccuracy struct {
  RadiusMeters float64 `thrift:"radiusMeters,1" db:"radiusMeters" json:"radiusMeters"`
  RadiusConfidence float64 `thrift:"radiusConfidence,2" db:"radiusConfidence" json:"radiusConfidence"`
  AltitudeAccuracy float64 `thrift:"altitudeAccuracy,3" db:"altitudeAccuracy" json:"altitudeAccuracy"`
  VelocityAccuracy float64 `thrift:"velocityAccuracy,4" db:"velocityAccuracy" json:"velocityAccuracy"`
  BearingAccuracy float64 `thrift:"bearingAccuracy,5" db:"bearingAccuracy" json:"bearingAccuracy"`
}

func NewGeolocationAccuracy() *GeolocationAccuracy {
  return &GeolocationAccuracy{}
}


func (p *GeolocationAccuracy) GetRadiusMeters() float64 {
  return p.RadiusMeters
}

func (p *GeolocationAccuracy) GetRadiusConfidence() float64 {
  return p.RadiusConfidence
}

func (p *GeolocationAccuracy) GetAltitudeAccuracy() float64 {
  return p.AltitudeAccuracy
}

func (p *GeolocationAccuracy) GetVelocityAccuracy() float64 {
  return p.VelocityAccuracy
}

func (p *GeolocationAccuracy) GetBearingAccuracy() float64 {
  return p.BearingAccuracy
}
func (p *GeolocationAccuracy) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GeolocationAccuracy)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.RadiusMeters = v
}
  return nil
}

func (p *GeolocationAccuracy)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.RadiusConfidence = v
}
  return nil
}

func (p *GeolocationAccuracy)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.AltitudeAccuracy = v
}
  return nil
}

func (p *GeolocationAccuracy)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.VelocityAccuracy = v
}
  return nil
}

func (p *GeolocationAccuracy)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.BearingAccuracy = v
}
  return nil
}

func (p *GeolocationAccuracy) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GeolocationAccuracy"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GeolocationAccuracy) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("radiusMeters", thrift.DOUBLE, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:radiusMeters: ", p), err) }
  if err := oprot.WriteDouble(float64(p.RadiusMeters)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.radiusMeters (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:radiusMeters: ", p), err) }
  return err
}

func (p *GeolocationAccuracy) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("radiusConfidence", thrift.DOUBLE, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:radiusConfidence: ", p), err) }
  if err := oprot.WriteDouble(float64(p.RadiusConfidence)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.radiusConfidence (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:radiusConfidence: ", p), err) }
  return err
}

func (p *GeolocationAccuracy) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("altitudeAccuracy", thrift.DOUBLE, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:altitudeAccuracy: ", p), err) }
  if err := oprot.WriteDouble(float64(p.AltitudeAccuracy)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.altitudeAccuracy (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:altitudeAccuracy: ", p), err) }
  return err
}

func (p *GeolocationAccuracy) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("velocityAccuracy", thrift.DOUBLE, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:velocityAccuracy: ", p), err) }
  if err := oprot.WriteDouble(float64(p.VelocityAccuracy)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.velocityAccuracy (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:velocityAccuracy: ", p), err) }
  return err
}

func (p *GeolocationAccuracy) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("bearingAccuracy", thrift.DOUBLE, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:bearingAccuracy: ", p), err) }
  if err := oprot.WriteDouble(float64(p.BearingAccuracy)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.bearingAccuracy (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:bearingAccuracy: ", p), err) }
  return err
}

func (p *GeolocationAccuracy) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GeolocationAccuracy(%+v)", *p)
}

// Attributes:
//  - Title
//  - Address
//  - Latitude
//  - Longitude
//  - Phone
//  - CategoryId
//  - Provider
//  - Accuracy
//  - AltitudeMeters
type Location struct {
  Title string `thrift:"title,1" db:"title" json:"title"`
  Address string `thrift:"address,2" db:"address" json:"address"`
  Latitude float64 `thrift:"latitude,3" db:"latitude" json:"latitude"`
  Longitude float64 `thrift:"longitude,4" db:"longitude" json:"longitude"`
  Phone string `thrift:"phone,5" db:"phone" json:"phone"`
  CategoryId string `thrift:"categoryId,6" db:"categoryId" json:"categoryId"`
  Provider Provider `thrift:"provider,7" db:"provider" json:"provider"`
  Accuracy *GeolocationAccuracy `thrift:"accuracy,8" db:"accuracy" json:"accuracy"`
  AltitudeMeters float64 `thrift:"altitudeMeters,9" db:"altitudeMeters" json:"altitudeMeters"`
}

func NewLocation() *Location {
  return &Location{}
}


func (p *Location) GetTitle() string {
  return p.Title
}

func (p *Location) GetAddress() string {
  return p.Address
}

func (p *Location) GetLatitude() float64 {
  return p.Latitude
}

func (p *Location) GetLongitude() float64 {
  return p.Longitude
}

func (p *Location) GetPhone() string {
  return p.Phone
}

func (p *Location) GetCategoryId() string {
  return p.CategoryId
}

func (p *Location) GetProvider() Provider {
  return p.Provider
}
var Location_Accuracy_DEFAULT *GeolocationAccuracy
func (p *Location) GetAccuracy() *GeolocationAccuracy {
  if !p.IsSetAccuracy() {
    return Location_Accuracy_DEFAULT
  }
return p.Accuracy
}

func (p *Location) GetAltitudeMeters() float64 {
  return p.AltitudeMeters
}
func (p *Location) IsSetAccuracy() bool {
  return p.Accuracy != nil
}

func (p *Location) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField9(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Location)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Title = v
}
  return nil
}

func (p *Location)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Address = v
}
  return nil
}

func (p *Location)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Latitude = v
}
  return nil
}

func (p *Location)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Longitude = v
}
  return nil
}

func (p *Location)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Phone = v
}
  return nil
}

func (p *Location)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.CategoryId = v
}
  return nil
}

func (p *Location)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  temp := Provider(v)
  p.Provider = temp
}
  return nil
}

func (p *Location)  ReadField8(iprot thrift.TProtocol) error {
  p.Accuracy = &GeolocationAccuracy{}
  if err := p.Accuracy.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Accuracy), err)
  }
  return nil
}

func (p *Location)  ReadField9(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.AltitudeMeters = v
}
  return nil
}

func (p *Location) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Location"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Location) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("title", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:title: ", p), err) }
  if err := oprot.WriteString(string(p.Title)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.title (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:title: ", p), err) }
  return err
}

func (p *Location) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("address", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:address: ", p), err) }
  if err := oprot.WriteString(string(p.Address)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.address (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:address: ", p), err) }
  return err
}

func (p *Location) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("latitude", thrift.DOUBLE, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:latitude: ", p), err) }
  if err := oprot.WriteDouble(float64(p.Latitude)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.latitude (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:latitude: ", p), err) }
  return err
}

func (p *Location) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("longitude", thrift.DOUBLE, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:longitude: ", p), err) }
  if err := oprot.WriteDouble(float64(p.Longitude)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.longitude (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:longitude: ", p), err) }
  return err
}

func (p *Location) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("phone", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:phone: ", p), err) }
  if err := oprot.WriteString(string(p.Phone)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.phone (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:phone: ", p), err) }
  return err
}

func (p *Location) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("categoryId", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:categoryId: ", p), err) }
  if err := oprot.WriteString(string(p.CategoryId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.categoryId (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:categoryId: ", p), err) }
  return err
}

func (p *Location) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("provider", thrift.I32, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:provider: ", p), err) }
  if err := oprot.WriteI32(int32(p.Provider)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.provider (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:provider: ", p), err) }
  return err
}

func (p *Location) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("accuracy", thrift.STRUCT, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:accuracy: ", p), err) }
  if err := p.Accuracy.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Accuracy), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:accuracy: ", p), err) }
  return err
}

func (p *Location) writeField9(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("altitudeMeters", thrift.DOUBLE, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:altitudeMeters: ", p), err) }
  if err := oprot.WriteDouble(float64(p.AltitudeMeters)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.altitudeMeters (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:altitudeMeters: ", p), err) }
  return err
}

func (p *Location) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Location(%+v)", *p)
}

// Attributes:
//  - From_
//  - To
//  - ToType
//  - ID
//  - CreatedTime
//  - DeliveredTime
//  - Text
//  - Location
//  - HasContent
//  - ContentType
//  - ContentPreview
//  - ContentMetadata
//  - SessionId
//  - Chunks
//  - RelatedMessageId
//  - MessageRelationType
//  - ReadCount
//  - RelatedMessageServiceCode
//  - AppExtensionType
type Message struct {
  From_ string `thrift:"from_,1" db:"from_" json:"from_"`
  To string `thrift:"to,2" db:"to" json:"to"`
  ToType MidType `thrift:"toType,3" db:"toType" json:"toType"`
  ID string `thrift:"id,4" db:"id" json:"id"`
  CreatedTime int64 `thrift:"createdTime,5" db:"createdTime" json:"createdTime"`
  DeliveredTime int64 `thrift:"deliveredTime,6" db:"deliveredTime" json:"deliveredTime"`
  // unused fields # 7 to 9
  Text string `thrift:"text,10" db:"text" json:"text"`
  Location *Location `thrift:"location,11" db:"location" json:"location,omitempty"`
  // unused fields # 12 to 13
  HasContent bool `thrift:"hasContent,14" db:"hasContent" json:"hasContent"`
  ContentType ContentType `thrift:"contentType,15" db:"contentType" json:"contentType"`
  // unused field # 16
  ContentPreview []byte `thrift:"contentPreview,17" db:"contentPreview" json:"contentPreview"`
  ContentMetadata map[string]string `thrift:"contentMetadata,18" db:"contentMetadata" json:"contentMetadata"`
  SessionId int32 `thrift:"sessionId,19" db:"sessionId" json:"sessionId"`
  Chunks [][]byte `thrift:"chunks,20" db:"chunks" json:"chunks"`
  RelatedMessageId string `thrift:"relatedMessageId,21" db:"relatedMessageId" json:"relatedMessageId"`
  MessageRelationType MessageRelationType `thrift:"messageRelationType,22" db:"messageRelationType" json:"messageRelationType"`
  ReadCount int32 `thrift:"readCount,23" db:"readCount" json:"readCount"`
  RelatedMessageServiceCode RelatedMessageServiceCode `thrift:"relatedMessageServiceCode,24" db:"relatedMessageServiceCode" json:"relatedMessageServiceCode"`
  AppExtensionType AppExtensionType `thrift:"appExtensionType,25" db:"appExtensionType" json:"appExtensionType"`
}

func NewMessage() *Message {
  return &Message{}
}


func (p *Message) GetFrom_() string {
  return p.From_
}

func (p *Message) GetTo() string {
  return p.To
}

func (p *Message) GetToType() MidType {
  return p.ToType
}

func (p *Message) GetID() string {
  return p.ID
}

func (p *Message) GetCreatedTime() int64 {
  return p.CreatedTime
}

func (p *Message) GetDeliveredTime() int64 {
  return p.DeliveredTime
}

func (p *Message) GetText() string {
  return p.Text
}
var Message_Location_DEFAULT *Location
func (p *Message) GetLocation() *Location {
  if !p.IsSetLocation() {
    return Message_Location_DEFAULT
  }
return p.Location
}

func (p *Message) GetHasContent() bool {
  return p.HasContent
}

func (p *Message) GetContentType() ContentType {
  return p.ContentType
}

func (p *Message) GetContentPreview() []byte {
  return p.ContentPreview
}

func (p *Message) GetContentMetadata() map[string]string {
  return p.ContentMetadata
}

func (p *Message) GetSessionId() int32 {
  return p.SessionId
}

func (p *Message) GetChunks() [][]byte {
  return p.Chunks
}

func (p *Message) GetRelatedMessageId() string {
  return p.RelatedMessageId
}

func (p *Message) GetMessageRelationType() MessageRelationType {
  return p.MessageRelationType
}

func (p *Message) GetReadCount() int32 {
  return p.ReadCount
}

func (p *Message) GetRelatedMessageServiceCode() RelatedMessageServiceCode {
  return p.RelatedMessageServiceCode
}

func (p *Message) GetAppExtensionType() AppExtensionType {
  return p.AppExtensionType
}
func (p *Message) IsSetLocation() bool {
  return p.Location != nil
}

func (p *Message) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField10(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField11(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 14:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField14(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 15:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField15(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 17:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField17(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 18:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField18(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 19:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField19(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 20:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField20(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 21:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField21(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 22:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField22(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 23:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField23(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 24:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField24(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 25:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField25(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Message)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.From_ = v
}
  return nil
}

func (p *Message)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.To = v
}
  return nil
}

func (p *Message)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := MidType(v)
  p.ToType = temp
}
  return nil
}

func (p *Message)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *Message)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.CreatedTime = v
}
  return nil
}

func (p *Message)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.DeliveredTime = v
}
  return nil
}

func (p *Message)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.Text = v
}
  return nil
}

func (p *Message)  ReadField11(iprot thrift.TProtocol) error {
  p.Location = &Location{}
  if err := p.Location.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Location), err)
  }
  return nil
}

func (p *Message)  ReadField14(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 14: ", err)
} else {
  p.HasContent = v
}
  return nil
}

func (p *Message)  ReadField15(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 15: ", err)
} else {
  temp := ContentType(v)
  p.ContentType = temp
}
  return nil
}

func (p *Message)  ReadField17(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 17: ", err)
} else {
  p.ContentPreview = v
}
  return nil
}

func (p *Message)  ReadField18(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.ContentMetadata =  tMap
  for i := 0; i < size; i ++ {
var _key10 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key10 = v
}
var _val11 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val11 = v
}
    p.ContentMetadata[_key10] = _val11
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *Message)  ReadField19(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 19: ", err)
} else {
  p.SessionId = v
}
  return nil
}

func (p *Message)  ReadField20(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([][]byte, 0, size)
  p.Chunks =  tSlice
  for i := 0; i < size; i ++ {
var _elem12 []byte
    if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem12 = v
}
    p.Chunks = append(p.Chunks, _elem12)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *Message)  ReadField21(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 21: ", err)
} else {
  p.RelatedMessageId = v
}
  return nil
}

func (p *Message)  ReadField22(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 22: ", err)
} else {
  temp := MessageRelationType(v)
  p.MessageRelationType = temp
}
  return nil
}

func (p *Message)  ReadField23(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 23: ", err)
} else {
  p.ReadCount = v
}
  return nil
}

func (p *Message)  ReadField24(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 24: ", err)
} else {
  temp := RelatedMessageServiceCode(v)
  p.RelatedMessageServiceCode = temp
}
  return nil
}

func (p *Message)  ReadField25(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 25: ", err)
} else {
  temp := AppExtensionType(v)
  p.AppExtensionType = temp
}
  return nil
}

func (p *Message) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Message"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField11(oprot); err != nil { return err }
    if err := p.writeField14(oprot); err != nil { return err }
    if err := p.writeField15(oprot); err != nil { return err }
    if err := p.writeField17(oprot); err != nil { return err }
    if err := p.writeField18(oprot); err != nil { return err }
    if err := p.writeField19(oprot); err != nil { return err }
    if err := p.writeField20(oprot); err != nil { return err }
    if err := p.writeField21(oprot); err != nil { return err }
    if err := p.writeField22(oprot); err != nil { return err }
    if err := p.writeField23(oprot); err != nil { return err }
    if err := p.writeField24(oprot); err != nil { return err }
    if err := p.writeField25(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Message) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("from_", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:from_: ", p), err) }
  if err := oprot.WriteString(string(p.From_)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.from_ (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:from_: ", p), err) }
  return err
}

func (p *Message) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("to", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:to: ", p), err) }
  if err := oprot.WriteString(string(p.To)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.to (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:to: ", p), err) }
  return err
}

func (p *Message) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("toType", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:toType: ", p), err) }
  if err := oprot.WriteI32(int32(p.ToType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.toType (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:toType: ", p), err) }
  return err
}

func (p *Message) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:id: ", p), err) }
  if err := oprot.WriteString(string(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:id: ", p), err) }
  return err
}

func (p *Message) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("createdTime", thrift.I64, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:createdTime: ", p), err) }
  if err := oprot.WriteI64(int64(p.CreatedTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.createdTime (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:createdTime: ", p), err) }
  return err
}

func (p *Message) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("deliveredTime", thrift.I64, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:deliveredTime: ", p), err) }
  if err := oprot.WriteI64(int64(p.DeliveredTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.deliveredTime (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:deliveredTime: ", p), err) }
  return err
}

func (p *Message) writeField10(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("text", thrift.STRING, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:text: ", p), err) }
  if err := oprot.WriteString(string(p.Text)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.text (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:text: ", p), err) }
  return err
}

func (p *Message) writeField11(oprot thrift.TProtocol) (err error) {
  if p.IsSetLocation() {
    if err := oprot.WriteFieldBegin("location", thrift.STRUCT, 11); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:location: ", p), err) }
    if err := p.Location.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Location), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 11:location: ", p), err) }
  }
  return err
}

func (p *Message) writeField14(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("hasContent", thrift.BOOL, 14); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:hasContent: ", p), err) }
  if err := oprot.WriteBool(bool(p.HasContent)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.hasContent (14) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 14:hasContent: ", p), err) }
  return err
}

func (p *Message) writeField15(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("contentType", thrift.I32, 15); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:contentType: ", p), err) }
  if err := oprot.WriteI32(int32(p.ContentType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.contentType (15) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 15:contentType: ", p), err) }
  return err
}

func (p *Message) writeField17(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("contentPreview", thrift.STRING, 17); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 17:contentPreview: ", p), err) }
  if err := oprot.WriteBinary(p.ContentPreview); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.contentPreview (17) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 17:contentPreview: ", p), err) }
  return err
}

func (p *Message) writeField18(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("contentMetadata", thrift.MAP, 18); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 18:contentMetadata: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.ContentMetadata)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.ContentMetadata {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 18:contentMetadata: ", p), err) }
  return err
}

func (p *Message) writeField19(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("sessionId", thrift.I32, 19); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 19:sessionId: ", p), err) }
  if err := oprot.WriteI32(int32(p.SessionId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sessionId (19) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 19:sessionId: ", p), err) }
  return err
}

func (p *Message) writeField20(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("chunks", thrift.LIST, 20); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:chunks: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.Chunks)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Chunks {
    if err := oprot.WriteBinary(v); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 20:chunks: ", p), err) }
  return err
}

func (p *Message) writeField21(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("relatedMessageId", thrift.STRING, 21); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 21:relatedMessageId: ", p), err) }
  if err := oprot.WriteString(string(p.RelatedMessageId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.relatedMessageId (21) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 21:relatedMessageId: ", p), err) }
  return err
}

func (p *Message) writeField22(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("messageRelationType", thrift.I32, 22); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 22:messageRelationType: ", p), err) }
  if err := oprot.WriteI32(int32(p.MessageRelationType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.messageRelationType (22) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 22:messageRelationType: ", p), err) }
  return err
}

func (p *Message) writeField23(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("readCount", thrift.I32, 23); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 23:readCount: ", p), err) }
  if err := oprot.WriteI32(int32(p.ReadCount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.readCount (23) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 23:readCount: ", p), err) }
  return err
}

func (p *Message) writeField24(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("relatedMessageServiceCode", thrift.I32, 24); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 24:relatedMessageServiceCode: ", p), err) }
  if err := oprot.WriteI32(int32(p.RelatedMessageServiceCode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.relatedMessageServiceCode (24) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 24:relatedMessageServiceCode: ", p), err) }
  return err
}

func (p *Message) writeField25(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("appExtensionType", thrift.I32, 25); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 25:appExtensionType: ", p), err) }
  if err := oprot.WriteI32(int32(p.AppExtensionType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.appExtensionType (25) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 25:appExtensionType: ", p), err) }
  return err
}

func (p *Message) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Message(%+v)", *p)
}

// Attributes:
//  - ID
//  - MidType
//  - LastDeliveredMessageId
//  - LastSeenMessageId
//  - UnreadCount
//  - LastMessages
//  - LastRemovedMessageId
//  - LastRemovedTime
type ExtendedMessageBox struct {
  ID string `thrift:"id,1" db:"id" json:"id"`
  MidType MidType `thrift:"midType,2" db:"midType" json:"midType"`
  // unused field # 3
  LastDeliveredMessageId *MessageBoxV2MessageId `thrift:"lastDeliveredMessageId,4" db:"lastDeliveredMessageId" json:"lastDeliveredMessageId"`
  LastSeenMessageId int64 `thrift:"lastSeenMessageId,5" db:"lastSeenMessageId" json:"lastSeenMessageId"`
  UnreadCount int64 `thrift:"unreadCount,6" db:"unreadCount" json:"unreadCount"`
  LastMessages []*Message `thrift:"lastMessages,7" db:"lastMessages" json:"lastMessages"`
  LastRemovedMessageId int64 `thrift:"lastRemovedMessageId,8" db:"lastRemovedMessageId" json:"lastRemovedMessageId"`
  LastRemovedTime int64 `thrift:"lastRemovedTime,9" db:"lastRemovedTime" json:"lastRemovedTime"`
}

func NewExtendedMessageBox() *ExtendedMessageBox {
  return &ExtendedMessageBox{}
}


func (p *ExtendedMessageBox) GetID() string {
  return p.ID
}

func (p *ExtendedMessageBox) GetMidType() MidType {
  return p.MidType
}
var ExtendedMessageBox_LastDeliveredMessageId_DEFAULT *MessageBoxV2MessageId
func (p *ExtendedMessageBox) GetLastDeliveredMessageId() *MessageBoxV2MessageId {
  if !p.IsSetLastDeliveredMessageId() {
    return ExtendedMessageBox_LastDeliveredMessageId_DEFAULT
  }
return p.LastDeliveredMessageId
}

func (p *ExtendedMessageBox) GetLastSeenMessageId() int64 {
  return p.LastSeenMessageId
}

func (p *ExtendedMessageBox) GetUnreadCount() int64 {
  return p.UnreadCount
}

func (p *ExtendedMessageBox) GetLastMessages() []*Message {
  return p.LastMessages
}

func (p *ExtendedMessageBox) GetLastRemovedMessageId() int64 {
  return p.LastRemovedMessageId
}

func (p *ExtendedMessageBox) GetLastRemovedTime() int64 {
  return p.LastRemovedTime
}
func (p *ExtendedMessageBox) IsSetLastDeliveredMessageId() bool {
  return p.LastDeliveredMessageId != nil
}

func (p *ExtendedMessageBox) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField9(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ExtendedMessageBox)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *ExtendedMessageBox)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := MidType(v)
  p.MidType = temp
}
  return nil
}

func (p *ExtendedMessageBox)  ReadField4(iprot thrift.TProtocol) error {
  p.LastDeliveredMessageId = &MessageBoxV2MessageId{}
  if err := p.LastDeliveredMessageId.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.LastDeliveredMessageId), err)
  }
  return nil
}

func (p *ExtendedMessageBox)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.LastSeenMessageId = v
}
  return nil
}

func (p *ExtendedMessageBox)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.UnreadCount = v
}
  return nil
}

func (p *ExtendedMessageBox)  ReadField7(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Message, 0, size)
  p.LastMessages =  tSlice
  for i := 0; i < size; i ++ {
    _elem13 := &Message{}
    if err := _elem13.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem13), err)
    }
    p.LastMessages = append(p.LastMessages, _elem13)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ExtendedMessageBox)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.LastRemovedMessageId = v
}
  return nil
}

func (p *ExtendedMessageBox)  ReadField9(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.LastRemovedTime = v
}
  return nil
}

func (p *ExtendedMessageBox) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ExtendedMessageBox"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ExtendedMessageBox) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := oprot.WriteString(string(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *ExtendedMessageBox) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("midType", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:midType: ", p), err) }
  if err := oprot.WriteI32(int32(p.MidType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.midType (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:midType: ", p), err) }
  return err
}

func (p *ExtendedMessageBox) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("lastDeliveredMessageId", thrift.STRUCT, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:lastDeliveredMessageId: ", p), err) }
  if err := p.LastDeliveredMessageId.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.LastDeliveredMessageId), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:lastDeliveredMessageId: ", p), err) }
  return err
}

func (p *ExtendedMessageBox) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("lastSeenMessageId", thrift.I64, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:lastSeenMessageId: ", p), err) }
  if err := oprot.WriteI64(int64(p.LastSeenMessageId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.lastSeenMessageId (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:lastSeenMessageId: ", p), err) }
  return err
}

func (p *ExtendedMessageBox) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("unreadCount", thrift.I64, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:unreadCount: ", p), err) }
  if err := oprot.WriteI64(int64(p.UnreadCount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.unreadCount (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:unreadCount: ", p), err) }
  return err
}

func (p *ExtendedMessageBox) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("lastMessages", thrift.LIST, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:lastMessages: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.LastMessages)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.LastMessages {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:lastMessages: ", p), err) }
  return err
}

func (p *ExtendedMessageBox) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("lastRemovedMessageId", thrift.I64, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:lastRemovedMessageId: ", p), err) }
  if err := oprot.WriteI64(int64(p.LastRemovedMessageId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.lastRemovedMessageId (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:lastRemovedMessageId: ", p), err) }
  return err
}

func (p *ExtendedMessageBox) writeField9(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("lastRemovedTime", thrift.I64, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:lastRemovedTime: ", p), err) }
  if err := oprot.WriteI64(int64(p.LastRemovedTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.lastRemovedTime (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:lastRemovedTime: ", p), err) }
  return err
}

func (p *ExtendedMessageBox) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ExtendedMessageBox(%+v)", *p)
}

// Attributes:
//  - MessageBoxes
//  - HasNext
type MessageBoxList struct {
  MessageBoxes []*ExtendedMessageBox `thrift:"messageBoxes,1" db:"messageBoxes" json:"messageBoxes"`
  HasNext bool `thrift:"hasNext,2" db:"hasNext" json:"hasNext"`
}

func NewMessageBoxList() *MessageBoxList {
  return &MessageBoxList{}
}


func (p *MessageBoxList) GetMessageBoxes() []*ExtendedMessageBox {
  return p.MessageBoxes
}

func (p *MessageBoxList) GetHasNext() bool {
  return p.HasNext
}
func (p *MessageBoxList) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MessageBoxList)  ReadField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*ExtendedMessageBox, 0, size)
  p.MessageBoxes =  tSlice
  for i := 0; i < size; i ++ {
    _elem14 := &ExtendedMessageBox{}
    if err := _elem14.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem14), err)
    }
    p.MessageBoxes = append(p.MessageBoxes, _elem14)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *MessageBoxList)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.HasNext = v
}
  return nil
}

func (p *MessageBoxList) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("MessageBoxList"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MessageBoxList) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("messageBoxes", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:messageBoxes: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.MessageBoxes)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.MessageBoxes {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:messageBoxes: ", p), err) }
  return err
}

func (p *MessageBoxList) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("hasNext", thrift.BOOL, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:hasNext: ", p), err) }
  if err := oprot.WriteBool(bool(p.HasNext)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.hasNext (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:hasNext: ", p), err) }
  return err
}

func (p *MessageBoxList) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MessageBoxList(%+v)", *p)
}

type UpdateChatResponse struct {
}

func NewUpdateChatResponse() *UpdateChatResponse {
  return &UpdateChatResponse{}
}

func (p *UpdateChatResponse) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UpdateChatResponse) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("UpdateChatResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UpdateChatResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UpdateChatResponse(%+v)", *p)
}

// Attributes:
//  - TicketId
type ReissueChatTicketResponse struct {
  TicketId string `thrift:"ticketId,1" db:"ticketId" json:"ticketId"`
}

func NewReissueChatTicketResponse() *ReissueChatTicketResponse {
  return &ReissueChatTicketResponse{}
}


func (p *ReissueChatTicketResponse) GetTicketId() string {
  return p.TicketId
}
func (p *ReissueChatTicketResponse) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ReissueChatTicketResponse)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TicketId = v
}
  return nil
}

func (p *ReissueChatTicketResponse) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ReissueChatTicketResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ReissueChatTicketResponse) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("ticketId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ticketId: ", p), err) }
  if err := oprot.WriteString(string(p.TicketId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ticketId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ticketId: ", p), err) }
  return err
}

func (p *ReissueChatTicketResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ReissueChatTicketResponse(%+v)", *p)
}

// Attributes:
//  - MemberChatMids
//  - InvitedChatMids
type GetAllChatMidsResponse struct {
  MemberChatMids []string `thrift:"memberChatMids,1" db:"memberChatMids" json:"memberChatMids"`
  InvitedChatMids []string `thrift:"invitedChatMids,2" db:"invitedChatMids" json:"invitedChatMids"`
}

func NewGetAllChatMidsResponse() *GetAllChatMidsResponse {
  return &GetAllChatMidsResponse{}
}


func (p *GetAllChatMidsResponse) GetMemberChatMids() []string {
  return p.MemberChatMids
}

func (p *GetAllChatMidsResponse) GetInvitedChatMids() []string {
  return p.InvitedChatMids
}
func (p *GetAllChatMidsResponse) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.SET {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.SET {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetAllChatMidsResponse)  ReadField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadSetBegin()
  if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
  }
  tSet := make([]string, 0, size)
  p.MemberChatMids =  tSet
  for i := 0; i < size; i ++ {
var _elem15 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem15 = v
}
    p.MemberChatMids = append(p.MemberChatMids, _elem15)
  }
  if err := iprot.ReadSetEnd(); err != nil {
    return thrift.PrependError("error reading set end: ", err)
  }
  return nil
}

func (p *GetAllChatMidsResponse)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadSetBegin()
  if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
  }
  tSet := make([]string, 0, size)
  p.InvitedChatMids =  tSet
  for i := 0; i < size; i ++ {
var _elem16 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem16 = v
}
    p.InvitedChatMids = append(p.InvitedChatMids, _elem16)
  }
  if err := iprot.ReadSetEnd(); err != nil {
    return thrift.PrependError("error reading set end: ", err)
  }
  return nil
}

func (p *GetAllChatMidsResponse) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetAllChatMidsResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetAllChatMidsResponse) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("memberChatMids", thrift.SET, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:memberChatMids: ", p), err) }
  if err := oprot.WriteSetBegin(thrift.STRING, len(p.MemberChatMids)); err != nil {
    return thrift.PrependError("error writing set begin: ", err)
  }
  for i := 0; i<len(p.MemberChatMids); i++ {
    for j := i+1; j<len(p.MemberChatMids); j++ {
      if reflect.DeepEqual(p.MemberChatMids[i],p.MemberChatMids[j]) { 
        return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", p.MemberChatMids[i]))
      }
    }
  }
  for _, v := range p.MemberChatMids {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteSetEnd(); err != nil {
    return thrift.PrependError("error writing set end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:memberChatMids: ", p), err) }
  return err
}

func (p *GetAllChatMidsResponse) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("invitedChatMids", thrift.SET, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:invitedChatMids: ", p), err) }
  if err := oprot.WriteSetBegin(thrift.STRING, len(p.InvitedChatMids)); err != nil {
    return thrift.PrependError("error writing set begin: ", err)
  }
  for i := 0; i<len(p.InvitedChatMids); i++ {
    for j := i+1; j<len(p.InvitedChatMids); j++ {
      if reflect.DeepEqual(p.InvitedChatMids[i],p.InvitedChatMids[j]) { 
        return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", p.InvitedChatMids[i]))
      }
    }
  }
  for _, v := range p.InvitedChatMids {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteSetEnd(); err != nil {
    return thrift.PrependError("error writing set end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:invitedChatMids: ", p), err) }
  return err
}

func (p *GetAllChatMidsResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetAllChatMidsResponse(%+v)", *p)
}

type RejectChatInvitationResponse struct {
}

func NewRejectChatInvitationResponse() *RejectChatInvitationResponse {
  return &RejectChatInvitationResponse{}
}

func (p *RejectChatInvitationResponse) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RejectChatInvitationResponse) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("RejectChatInvitationResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RejectChatInvitationResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RejectChatInvitationResponse(%+v)", *p)
}

// Attributes:
//  - Chat
type CreateChatResponse struct {
  Chat *Chat `thrift:"chat,1" db:"chat" json:"chat"`
}

func NewCreateChatResponse() *CreateChatResponse {
  return &CreateChatResponse{}
}

var CreateChatResponse_Chat_DEFAULT *Chat
func (p *CreateChatResponse) GetChat() *Chat {
  if !p.IsSetChat() {
    return CreateChatResponse_Chat_DEFAULT
  }
return p.Chat
}
func (p *CreateChatResponse) IsSetChat() bool {
  return p.Chat != nil
}

func (p *CreateChatResponse) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CreateChatResponse)  ReadField1(iprot thrift.TProtocol) error {
  p.Chat = &Chat{}
  if err := p.Chat.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Chat), err)
  }
  return nil
}

func (p *CreateChatResponse) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("CreateChatResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CreateChatResponse) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("chat", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:chat: ", p), err) }
  if err := p.Chat.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Chat), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:chat: ", p), err) }
  return err
}

func (p *CreateChatResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CreateChatResponse(%+v)", *p)
}

// Attributes:
//  - Mid
//  - Userid
//  - Phone
//  - Email
//  - RegionCode
//  - DisplayName
//  - PhoneticName
//  - PictureStatus
//  - ThumbnailUrl
//  - StatusMessage
//  - AllowSearchByUserid
//  - AllowSearchByEmail
//  - PicturePath
//  - MusicProfile
//  - VideoProfile
//  - StatusMessageContentMetadata
//  - AvatarProfile
type Profile struct {
  Mid string `thrift:"mid,1" db:"mid" json:"mid"`
  // unused field # 2
  Userid string `thrift:"userid,3" db:"userid" json:"userid"`
  // unused fields # 4 to 9
  Phone string `thrift:"phone,10" db:"phone" json:"phone"`
  Email string `thrift:"email,11" db:"email" json:"email"`
  RegionCode string `thrift:"regionCode,12" db:"regionCode" json:"regionCode"`
  // unused fields # 13 to 19
  DisplayName string `thrift:"displayName,20" db:"displayName" json:"displayName"`
  PhoneticName string `thrift:"phoneticName,21" db:"phoneticName" json:"phoneticName"`
  PictureStatus string `thrift:"pictureStatus,22" db:"pictureStatus" json:"pictureStatus"`
  ThumbnailUrl string `thrift:"thumbnailUrl,23" db:"thumbnailUrl" json:"thumbnailUrl"`
  StatusMessage string `thrift:"statusMessage,24" db:"statusMessage" json:"statusMessage"`
  // unused fields # 25 to 30
  AllowSearchByUserid bool `thrift:"allowSearchByUserid,31" db:"allowSearchByUserid" json:"allowSearchByUserid"`
  AllowSearchByEmail bool `thrift:"allowSearchByEmail,32" db:"allowSearchByEmail" json:"allowSearchByEmail"`
  PicturePath string `thrift:"picturePath,33" db:"picturePath" json:"picturePath"`
  MusicProfile string `thrift:"musicProfile,34" db:"musicProfile" json:"musicProfile"`
  VideoProfile string `thrift:"videoProfile,35" db:"videoProfile" json:"videoProfile"`
  StatusMessageContentMetadata map[string]string `thrift:"statusMessageContentMetadata,36" db:"statusMessageContentMetadata" json:"statusMessageContentMetadata"`
  AvatarProfile *AvatarProfile `thrift:"avatarProfile,37" db:"avatarProfile" json:"avatarProfile"`
}

func NewProfile() *Profile {
  return &Profile{}
}


func (p *Profile) GetMid() string {
  return p.Mid
}

func (p *Profile) GetUserid() string {
  return p.Userid
}

func (p *Profile) GetPhone() string {
  return p.Phone
}

func (p *Profile) GetEmail() string {
  return p.Email
}

func (p *Profile) GetRegionCode() string {
  return p.RegionCode
}

func (p *Profile) GetDisplayName() string {
  return p.DisplayName
}

func (p *Profile) GetPhoneticName() string {
  return p.PhoneticName
}

func (p *Profile) GetPictureStatus() string {
  return p.PictureStatus
}

func (p *Profile) GetThumbnailUrl() string {
  return p.ThumbnailUrl
}

func (p *Profile) GetStatusMessage() string {
  return p.StatusMessage
}

func (p *Profile) GetAllowSearchByUserid() bool {
  return p.AllowSearchByUserid
}

func (p *Profile) GetAllowSearchByEmail() bool {
  return p.AllowSearchByEmail
}

func (p *Profile) GetPicturePath() string {
  return p.PicturePath
}

func (p *Profile) GetMusicProfile() string {
  return p.MusicProfile
}

func (p *Profile) GetVideoProfile() string {
  return p.VideoProfile
}

func (p *Profile) GetStatusMessageContentMetadata() map[string]string {
  return p.StatusMessageContentMetadata
}
var Profile_AvatarProfile_DEFAULT *AvatarProfile
func (p *Profile) GetAvatarProfile() *AvatarProfile {
  if !p.IsSetAvatarProfile() {
    return Profile_AvatarProfile_DEFAULT
  }
return p.AvatarProfile
}
func (p *Profile) IsSetAvatarProfile() bool {
  return p.AvatarProfile != nil
}

func (p *Profile) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField10(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField11(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField12(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 20:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField20(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 21:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField21(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 22:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField22(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 23:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField23(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 24:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField24(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 31:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField31(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 32:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField32(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 33:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField33(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 34:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField34(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 35:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField35(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 36:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField36(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 37:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField37(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Profile)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Mid = v
}
  return nil
}

func (p *Profile)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Userid = v
}
  return nil
}

func (p *Profile)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.Phone = v
}
  return nil
}

func (p *Profile)  ReadField11(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.Email = v
}
  return nil
}

func (p *Profile)  ReadField12(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  p.RegionCode = v
}
  return nil
}

func (p *Profile)  ReadField20(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 20: ", err)
} else {
  p.DisplayName = v
}
  return nil
}

func (p *Profile)  ReadField21(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 21: ", err)
} else {
  p.PhoneticName = v
}
  return nil
}

func (p *Profile)  ReadField22(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 22: ", err)
} else {
  p.PictureStatus = v
}
  return nil
}

func (p *Profile)  ReadField23(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 23: ", err)
} else {
  p.ThumbnailUrl = v
}
  return nil
}

func (p *Profile)  ReadField24(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 24: ", err)
} else {
  p.StatusMessage = v
}
  return nil
}

func (p *Profile)  ReadField31(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 31: ", err)
} else {
  p.AllowSearchByUserid = v
}
  return nil
}

func (p *Profile)  ReadField32(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 32: ", err)
} else {
  p.AllowSearchByEmail = v
}
  return nil
}

func (p *Profile)  ReadField33(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 33: ", err)
} else {
  p.PicturePath = v
}
  return nil
}

func (p *Profile)  ReadField34(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 34: ", err)
} else {
  p.MusicProfile = v
}
  return nil
}

func (p *Profile)  ReadField35(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 35: ", err)
} else {
  p.VideoProfile = v
}
  return nil
}

func (p *Profile)  ReadField36(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.StatusMessageContentMetadata =  tMap
  for i := 0; i < size; i ++ {
var _key17 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key17 = v
}
var _val18 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val18 = v
}
    p.StatusMessageContentMetadata[_key17] = _val18
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *Profile)  ReadField37(iprot thrift.TProtocol) error {
  p.AvatarProfile = &AvatarProfile{}
  if err := p.AvatarProfile.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AvatarProfile), err)
  }
  return nil
}

func (p *Profile) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Profile"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField11(oprot); err != nil { return err }
    if err := p.writeField12(oprot); err != nil { return err }
    if err := p.writeField20(oprot); err != nil { return err }
    if err := p.writeField21(oprot); err != nil { return err }
    if err := p.writeField22(oprot); err != nil { return err }
    if err := p.writeField23(oprot); err != nil { return err }
    if err := p.writeField24(oprot); err != nil { return err }
    if err := p.writeField31(oprot); err != nil { return err }
    if err := p.writeField32(oprot); err != nil { return err }
    if err := p.writeField33(oprot); err != nil { return err }
    if err := p.writeField34(oprot); err != nil { return err }
    if err := p.writeField35(oprot); err != nil { return err }
    if err := p.writeField36(oprot); err != nil { return err }
    if err := p.writeField37(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Profile) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("mid", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:mid: ", p), err) }
  if err := oprot.WriteString(string(p.Mid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.mid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:mid: ", p), err) }
  return err
}

func (p *Profile) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userid", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:userid: ", p), err) }
  if err := oprot.WriteString(string(p.Userid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userid (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:userid: ", p), err) }
  return err
}

func (p *Profile) writeField10(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("phone", thrift.STRING, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:phone: ", p), err) }
  if err := oprot.WriteString(string(p.Phone)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.phone (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:phone: ", p), err) }
  return err
}

func (p *Profile) writeField11(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("email", thrift.STRING, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:email: ", p), err) }
  if err := oprot.WriteString(string(p.Email)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.email (11) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:email: ", p), err) }
  return err
}

func (p *Profile) writeField12(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("regionCode", thrift.STRING, 12); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:regionCode: ", p), err) }
  if err := oprot.WriteString(string(p.RegionCode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.regionCode (12) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 12:regionCode: ", p), err) }
  return err
}

func (p *Profile) writeField20(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("displayName", thrift.STRING, 20); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:displayName: ", p), err) }
  if err := oprot.WriteString(string(p.DisplayName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.displayName (20) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 20:displayName: ", p), err) }
  return err
}

func (p *Profile) writeField21(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("phoneticName", thrift.STRING, 21); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 21:phoneticName: ", p), err) }
  if err := oprot.WriteString(string(p.PhoneticName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.phoneticName (21) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 21:phoneticName: ", p), err) }
  return err
}

func (p *Profile) writeField22(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("pictureStatus", thrift.STRING, 22); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 22:pictureStatus: ", p), err) }
  if err := oprot.WriteString(string(p.PictureStatus)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.pictureStatus (22) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 22:pictureStatus: ", p), err) }
  return err
}

func (p *Profile) writeField23(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("thumbnailUrl", thrift.STRING, 23); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 23:thumbnailUrl: ", p), err) }
  if err := oprot.WriteString(string(p.ThumbnailUrl)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.thumbnailUrl (23) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 23:thumbnailUrl: ", p), err) }
  return err
}

func (p *Profile) writeField24(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("statusMessage", thrift.STRING, 24); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 24:statusMessage: ", p), err) }
  if err := oprot.WriteString(string(p.StatusMessage)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.statusMessage (24) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 24:statusMessage: ", p), err) }
  return err
}

func (p *Profile) writeField31(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("allowSearchByUserid", thrift.BOOL, 31); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 31:allowSearchByUserid: ", p), err) }
  if err := oprot.WriteBool(bool(p.AllowSearchByUserid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.allowSearchByUserid (31) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 31:allowSearchByUserid: ", p), err) }
  return err
}

func (p *Profile) writeField32(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("allowSearchByEmail", thrift.BOOL, 32); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 32:allowSearchByEmail: ", p), err) }
  if err := oprot.WriteBool(bool(p.AllowSearchByEmail)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.allowSearchByEmail (32) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 32:allowSearchByEmail: ", p), err) }
  return err
}

func (p *Profile) writeField33(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("picturePath", thrift.STRING, 33); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 33:picturePath: ", p), err) }
  if err := oprot.WriteString(string(p.PicturePath)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.picturePath (33) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 33:picturePath: ", p), err) }
  return err
}

func (p *Profile) writeField34(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("musicProfile", thrift.STRING, 34); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 34:musicProfile: ", p), err) }
  if err := oprot.WriteString(string(p.MusicProfile)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.musicProfile (34) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 34:musicProfile: ", p), err) }
  return err
}

func (p *Profile) writeField35(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("videoProfile", thrift.STRING, 35); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 35:videoProfile: ", p), err) }
  if err := oprot.WriteString(string(p.VideoProfile)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.videoProfile (35) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 35:videoProfile: ", p), err) }
  return err
}

func (p *Profile) writeField36(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("statusMessageContentMetadata", thrift.MAP, 36); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 36:statusMessageContentMetadata: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.StatusMessageContentMetadata)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.StatusMessageContentMetadata {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 36:statusMessageContentMetadata: ", p), err) }
  return err
}

func (p *Profile) writeField37(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("avatarProfile", thrift.STRUCT, 37); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 37:avatarProfile: ", p), err) }
  if err := p.AvatarProfile.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AvatarProfile), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 37:avatarProfile: ", p), err) }
  return err
}

func (p *Profile) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Profile(%+v)", *p)
}

// Attributes:
//  - NewsId_
//  - NewsService_
//  - TtlMillis
//  - Category
//  - CategoryBgColor
//  - CategoryColor
//  - Title
//  - URL
//  - Image
type InstantNews struct {
  NewsId_ int64 `thrift:"newsId,1" db:"newsId" json:"newsId"`
  NewsService_ string `thrift:"newsService,2" db:"newsService" json:"newsService"`
  TtlMillis int64 `thrift:"ttlMillis,3" db:"ttlMillis" json:"ttlMillis"`
  Category string `thrift:"category,4" db:"category" json:"category"`
  CategoryBgColor string `thrift:"categoryBgColor,5" db:"categoryBgColor" json:"categoryBgColor"`
  CategoryColor string `thrift:"categoryColor,6" db:"categoryColor" json:"categoryColor"`
  Title string `thrift:"title,7" db:"title" json:"title"`
  URL string `thrift:"url,8" db:"url" json:"url"`
  Image string `thrift:"image,9" db:"image" json:"image"`
}

func NewInstantNews() *InstantNews {
  return &InstantNews{}
}


func (p *InstantNews) GetNewsId_() int64 {
  return p.NewsId_
}

func (p *InstantNews) GetNewsService_() string {
  return p.NewsService_
}

func (p *InstantNews) GetTtlMillis() int64 {
  return p.TtlMillis
}

func (p *InstantNews) GetCategory() string {
  return p.Category
}

func (p *InstantNews) GetCategoryBgColor() string {
  return p.CategoryBgColor
}

func (p *InstantNews) GetCategoryColor() string {
  return p.CategoryColor
}

func (p *InstantNews) GetTitle() string {
  return p.Title
}

func (p *InstantNews) GetURL() string {
  return p.URL
}

func (p *InstantNews) GetImage() string {
  return p.Image
}
func (p *InstantNews) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField9(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *InstantNews)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.NewsId_ = v
}
  return nil
}

func (p *InstantNews)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.NewsService_ = v
}
  return nil
}

func (p *InstantNews)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.TtlMillis = v
}
  return nil
}

func (p *InstantNews)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Category = v
}
  return nil
}

func (p *InstantNews)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.CategoryBgColor = v
}
  return nil
}

func (p *InstantNews)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.CategoryColor = v
}
  return nil
}

func (p *InstantNews)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.Title = v
}
  return nil
}

func (p *InstantNews)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.URL = v
}
  return nil
}

func (p *InstantNews)  ReadField9(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.Image = v
}
  return nil
}

func (p *InstantNews) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("InstantNews"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *InstantNews) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("newsId", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:newsId: ", p), err) }
  if err := oprot.WriteI64(int64(p.NewsId_)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.newsId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:newsId: ", p), err) }
  return err
}

func (p *InstantNews) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("newsService", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:newsService: ", p), err) }
  if err := oprot.WriteString(string(p.NewsService_)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.newsService (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:newsService: ", p), err) }
  return err
}

func (p *InstantNews) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("ttlMillis", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ttlMillis: ", p), err) }
  if err := oprot.WriteI64(int64(p.TtlMillis)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ttlMillis (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ttlMillis: ", p), err) }
  return err
}

func (p *InstantNews) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("category", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:category: ", p), err) }
  if err := oprot.WriteString(string(p.Category)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.category (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:category: ", p), err) }
  return err
}

func (p *InstantNews) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("categoryBgColor", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:categoryBgColor: ", p), err) }
  if err := oprot.WriteString(string(p.CategoryBgColor)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.categoryBgColor (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:categoryBgColor: ", p), err) }
  return err
}

func (p *InstantNews) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("categoryColor", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:categoryColor: ", p), err) }
  if err := oprot.WriteString(string(p.CategoryColor)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.categoryColor (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:categoryColor: ", p), err) }
  return err
}

func (p *InstantNews) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("title", thrift.STRING, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:title: ", p), err) }
  if err := oprot.WriteString(string(p.Title)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.title (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:title: ", p), err) }
  return err
}

func (p *InstantNews) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("url", thrift.STRING, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:url: ", p), err) }
  if err := oprot.WriteString(string(p.URL)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.url (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:url: ", p), err) }
  return err
}

func (p *InstantNews) writeField9(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("image", thrift.STRING, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:image: ", p), err) }
  if err := oprot.WriteString(string(p.Image)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.image (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:image: ", p), err) }
  return err
}

func (p *InstantNews) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("InstantNews(%+v)", *p)
}

// Attributes:
//  - CreatorMid
//  - CreatedTime
//  - ChatRoomBGMInfo
type ChatRoomBGM struct {
  CreatorMid string `thrift:"creatorMid,1" db:"creatorMid" json:"creatorMid"`
  CreatedTime int64 `thrift:"createdTime,2" db:"createdTime" json:"createdTime"`
  ChatRoomBGMInfo string `thrift:"chatRoomBGMInfo,3" db:"chatRoomBGMInfo" json:"chatRoomBGMInfo"`
}

func NewChatRoomBGM() *ChatRoomBGM {
  return &ChatRoomBGM{}
}


func (p *ChatRoomBGM) GetCreatorMid() string {
  return p.CreatorMid
}

func (p *ChatRoomBGM) GetCreatedTime() int64 {
  return p.CreatedTime
}

func (p *ChatRoomBGM) GetChatRoomBGMInfo() string {
  return p.ChatRoomBGMInfo
}
func (p *ChatRoomBGM) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ChatRoomBGM)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.CreatorMid = v
}
  return nil
}

func (p *ChatRoomBGM)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.CreatedTime = v
}
  return nil
}

func (p *ChatRoomBGM)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.ChatRoomBGMInfo = v
}
  return nil
}

func (p *ChatRoomBGM) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ChatRoomBGM"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ChatRoomBGM) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("creatorMid", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:creatorMid: ", p), err) }
  if err := oprot.WriteString(string(p.CreatorMid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.creatorMid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:creatorMid: ", p), err) }
  return err
}

func (p *ChatRoomBGM) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("createdTime", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:createdTime: ", p), err) }
  if err := oprot.WriteI64(int64(p.CreatedTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.createdTime (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:createdTime: ", p), err) }
  return err
}

func (p *ChatRoomBGM) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("chatRoomBGMInfo", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:chatRoomBGMInfo: ", p), err) }
  if err := oprot.WriteString(string(p.ChatRoomBGMInfo)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.chatRoomBGMInfo (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:chatRoomBGMInfo: ", p), err) }
  return err
}

func (p *ChatRoomBGM) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ChatRoomBGM(%+v)", *p)
}

// Attributes:
//  - Replace
//  - SticonOwnership
type ChatRoomAnnouncementContentMetadata struct {
  Replace string `thrift:"replace,1" db:"replace" json:"replace"`
  SticonOwnership string `thrift:"sticonOwnership,2" db:"sticonOwnership" json:"sticonOwnership"`
}

func NewChatRoomAnnouncementContentMetadata() *ChatRoomAnnouncementContentMetadata {
  return &ChatRoomAnnouncementContentMetadata{}
}


func (p *ChatRoomAnnouncementContentMetadata) GetReplace() string {
  return p.Replace
}

func (p *ChatRoomAnnouncementContentMetadata) GetSticonOwnership() string {
  return p.SticonOwnership
}
func (p *ChatRoomAnnouncementContentMetadata) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ChatRoomAnnouncementContentMetadata)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Replace = v
}
  return nil
}

func (p *ChatRoomAnnouncementContentMetadata)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.SticonOwnership = v
}
  return nil
}

func (p *ChatRoomAnnouncementContentMetadata) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ChatRoomAnnouncementContentMetadata"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ChatRoomAnnouncementContentMetadata) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("replace", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:replace: ", p), err) }
  if err := oprot.WriteString(string(p.Replace)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.replace (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:replace: ", p), err) }
  return err
}

func (p *ChatRoomAnnouncementContentMetadata) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("sticonOwnership", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:sticonOwnership: ", p), err) }
  if err := oprot.WriteString(string(p.SticonOwnership)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sticonOwnership (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:sticonOwnership: ", p), err) }
  return err
}

func (p *ChatRoomAnnouncementContentMetadata) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ChatRoomAnnouncementContentMetadata(%+v)", *p)
}

// Attributes:
//  - DisplayFields
//  - Text
//  - Link
//  - Thumbnail
//  - ContentMetadata
type ChatRoomAnnouncementContents struct {
  DisplayFields int32 `thrift:"displayFields,1" db:"displayFields" json:"displayFields"`
  Text string `thrift:"text,2" db:"text" json:"text"`
  Link string `thrift:"link,3" db:"link" json:"link"`
  Thumbnail string `thrift:"thumbnail,4" db:"thumbnail" json:"thumbnail"`
  ContentMetadata *ChatRoomAnnouncementContentMetadata `thrift:"contentMetadata,5" db:"contentMetadata" json:"contentMetadata"`
}

func NewChatRoomAnnouncementContents() *ChatRoomAnnouncementContents {
  return &ChatRoomAnnouncementContents{}
}


func (p *ChatRoomAnnouncementContents) GetDisplayFields() int32 {
  return p.DisplayFields
}

func (p *ChatRoomAnnouncementContents) GetText() string {
  return p.Text
}

func (p *ChatRoomAnnouncementContents) GetLink() string {
  return p.Link
}

func (p *ChatRoomAnnouncementContents) GetThumbnail() string {
  return p.Thumbnail
}
var ChatRoomAnnouncementContents_ContentMetadata_DEFAULT *ChatRoomAnnouncementContentMetadata
func (p *ChatRoomAnnouncementContents) GetContentMetadata() *ChatRoomAnnouncementContentMetadata {
  if !p.IsSetContentMetadata() {
    return ChatRoomAnnouncementContents_ContentMetadata_DEFAULT
  }
return p.ContentMetadata
}
func (p *ChatRoomAnnouncementContents) IsSetContentMetadata() bool {
  return p.ContentMetadata != nil
}

func (p *ChatRoomAnnouncementContents) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ChatRoomAnnouncementContents)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.DisplayFields = v
}
  return nil
}

func (p *ChatRoomAnnouncementContents)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Text = v
}
  return nil
}

func (p *ChatRoomAnnouncementContents)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Link = v
}
  return nil
}

func (p *ChatRoomAnnouncementContents)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Thumbnail = v
}
  return nil
}

func (p *ChatRoomAnnouncementContents)  ReadField5(iprot thrift.TProtocol) error {
  p.ContentMetadata = &ChatRoomAnnouncementContentMetadata{}
  if err := p.ContentMetadata.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ContentMetadata), err)
  }
  return nil
}

func (p *ChatRoomAnnouncementContents) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ChatRoomAnnouncementContents"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ChatRoomAnnouncementContents) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("displayFields", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:displayFields: ", p), err) }
  if err := oprot.WriteI32(int32(p.DisplayFields)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.displayFields (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:displayFields: ", p), err) }
  return err
}

func (p *ChatRoomAnnouncementContents) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("text", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:text: ", p), err) }
  if err := oprot.WriteString(string(p.Text)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.text (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:text: ", p), err) }
  return err
}

func (p *ChatRoomAnnouncementContents) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("link", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:link: ", p), err) }
  if err := oprot.WriteString(string(p.Link)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.link (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:link: ", p), err) }
  return err
}

func (p *ChatRoomAnnouncementContents) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("thumbnail", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:thumbnail: ", p), err) }
  if err := oprot.WriteString(string(p.Thumbnail)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.thumbnail (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:thumbnail: ", p), err) }
  return err
}

func (p *ChatRoomAnnouncementContents) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("contentMetadata", thrift.STRUCT, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:contentMetadata: ", p), err) }
  if err := p.ContentMetadata.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ContentMetadata), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:contentMetadata: ", p), err) }
  return err
}

func (p *ChatRoomAnnouncementContents) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ChatRoomAnnouncementContents(%+v)", *p)
}

// Attributes:
//  - AnnouncementSeq
//  - Type
//  - Contents
//  - CreatorMid
//  - CreatedTime
//  - DeletePermission
type ChatRoomAnnouncement struct {
  AnnouncementSeq int64 `thrift:"announcementSeq,1" db:"announcementSeq" json:"announcementSeq"`
  Type ChatRoomAnnouncementType `thrift:"type,2" db:"type" json:"type"`
  Contents *ChatRoomAnnouncementContents `thrift:"contents,3" db:"contents" json:"contents"`
  CreatorMid string `thrift:"creatorMid,4" db:"creatorMid" json:"creatorMid"`
  CreatedTime int64 `thrift:"createdTime,5" db:"createdTime" json:"createdTime"`
  DeletePermission DeletePermission `thrift:"deletePermission,6" db:"deletePermission" json:"deletePermission"`
}

func NewChatRoomAnnouncement() *ChatRoomAnnouncement {
  return &ChatRoomAnnouncement{}
}


func (p *ChatRoomAnnouncement) GetAnnouncementSeq() int64 {
  return p.AnnouncementSeq
}

func (p *ChatRoomAnnouncement) GetType() ChatRoomAnnouncementType {
  return p.Type
}
var ChatRoomAnnouncement_Contents_DEFAULT *ChatRoomAnnouncementContents
func (p *ChatRoomAnnouncement) GetContents() *ChatRoomAnnouncementContents {
  if !p.IsSetContents() {
    return ChatRoomAnnouncement_Contents_DEFAULT
  }
return p.Contents
}

func (p *ChatRoomAnnouncement) GetCreatorMid() string {
  return p.CreatorMid
}

func (p *ChatRoomAnnouncement) GetCreatedTime() int64 {
  return p.CreatedTime
}

func (p *ChatRoomAnnouncement) GetDeletePermission() DeletePermission {
  return p.DeletePermission
}
func (p *ChatRoomAnnouncement) IsSetContents() bool {
  return p.Contents != nil
}

func (p *ChatRoomAnnouncement) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ChatRoomAnnouncement)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.AnnouncementSeq = v
}
  return nil
}

func (p *ChatRoomAnnouncement)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := ChatRoomAnnouncementType(v)
  p.Type = temp
}
  return nil
}

func (p *ChatRoomAnnouncement)  ReadField3(iprot thrift.TProtocol) error {
  p.Contents = &ChatRoomAnnouncementContents{}
  if err := p.Contents.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Contents), err)
  }
  return nil
}

func (p *ChatRoomAnnouncement)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.CreatorMid = v
}
  return nil
}

func (p *ChatRoomAnnouncement)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.CreatedTime = v
}
  return nil
}

func (p *ChatRoomAnnouncement)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  temp := DeletePermission(v)
  p.DeletePermission = temp
}
  return nil
}

func (p *ChatRoomAnnouncement) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ChatRoomAnnouncement"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ChatRoomAnnouncement) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("announcementSeq", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:announcementSeq: ", p), err) }
  if err := oprot.WriteI64(int64(p.AnnouncementSeq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.announcementSeq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:announcementSeq: ", p), err) }
  return err
}

func (p *ChatRoomAnnouncement) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("type", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:type: ", p), err) }
  if err := oprot.WriteI32(int32(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:type: ", p), err) }
  return err
}

func (p *ChatRoomAnnouncement) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("contents", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:contents: ", p), err) }
  if err := p.Contents.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Contents), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:contents: ", p), err) }
  return err
}

func (p *ChatRoomAnnouncement) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("creatorMid", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:creatorMid: ", p), err) }
  if err := oprot.WriteString(string(p.CreatorMid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.creatorMid (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:creatorMid: ", p), err) }
  return err
}

func (p *ChatRoomAnnouncement) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("createdTime", thrift.I64, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:createdTime: ", p), err) }
  if err := oprot.WriteI64(int64(p.CreatedTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.createdTime (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:createdTime: ", p), err) }
  return err
}

func (p *ChatRoomAnnouncement) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("deletePermission", thrift.I32, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:deletePermission: ", p), err) }
  if err := oprot.WriteI32(int32(p.DeletePermission)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.deletePermission (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:deletePermission: ", p), err) }
  return err
}

func (p *ChatRoomAnnouncement) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ChatRoomAnnouncement(%+v)", *p)
}

// Attributes:
//  - Version
//  - KeyId
//  - KeyData
//  - CreatedTime
type E2EEPublicKey struct {
  Version int32 `thrift:"version,1" db:"version" json:"version"`
  KeyId int32 `thrift:"keyId,2" db:"keyId" json:"keyId"`
  // unused field # 3
  KeyData []byte `thrift:"keyData,4" db:"keyData" json:"keyData"`
  CreatedTime int64 `thrift:"createdTime,5" db:"createdTime" json:"createdTime"`
}

func NewE2EEPublicKey() *E2EEPublicKey {
  return &E2EEPublicKey{}
}


func (p *E2EEPublicKey) GetVersion() int32 {
  return p.Version
}

func (p *E2EEPublicKey) GetKeyId() int32 {
  return p.KeyId
}

func (p *E2EEPublicKey) GetKeyData() []byte {
  return p.KeyData
}

func (p *E2EEPublicKey) GetCreatedTime() int64 {
  return p.CreatedTime
}
func (p *E2EEPublicKey) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *E2EEPublicKey)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Version = v
}
  return nil
}

func (p *E2EEPublicKey)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.KeyId = v
}
  return nil
}

func (p *E2EEPublicKey)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.KeyData = v
}
  return nil
}

func (p *E2EEPublicKey)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.CreatedTime = v
}
  return nil
}

func (p *E2EEPublicKey) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("E2EEPublicKey"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *E2EEPublicKey) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("version", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:version: ", p), err) }
  if err := oprot.WriteI32(int32(p.Version)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.version (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:version: ", p), err) }
  return err
}

func (p *E2EEPublicKey) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("keyId", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:keyId: ", p), err) }
  if err := oprot.WriteI32(int32(p.KeyId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.keyId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:keyId: ", p), err) }
  return err
}

func (p *E2EEPublicKey) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("keyData", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:keyData: ", p), err) }
  if err := oprot.WriteBinary(p.KeyData); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.keyData (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:keyData: ", p), err) }
  return err
}

func (p *E2EEPublicKey) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("createdTime", thrift.I64, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:createdTime: ", p), err) }
  if err := oprot.WriteI64(int64(p.CreatedTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.createdTime (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:createdTime: ", p), err) }
  return err
}

func (p *E2EEPublicKey) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("E2EEPublicKey(%+v)", *p)
}

// Attributes:
//  - Contact
//  - Luid
//  - ContactType
//  - ContactKey
type ContactRegistration struct {
  Contact *Contact `thrift:"contact,1" db:"contact" json:"contact"`
  // unused fields # 2 to 9
  Luid string `thrift:"luid,10" db:"luid" json:"luid"`
  ContactType int32 `thrift:"contactType,11" db:"contactType" json:"contactType"`
  ContactKey string `thrift:"contactKey,12" db:"contactKey" json:"contactKey"`
}

func NewContactRegistration() *ContactRegistration {
  return &ContactRegistration{}
}

var ContactRegistration_Contact_DEFAULT *Contact
func (p *ContactRegistration) GetContact() *Contact {
  if !p.IsSetContact() {
    return ContactRegistration_Contact_DEFAULT
  }
return p.Contact
}

func (p *ContactRegistration) GetLuid() string {
  return p.Luid
}

func (p *ContactRegistration) GetContactType() int32 {
  return p.ContactType
}

func (p *ContactRegistration) GetContactKey() string {
  return p.ContactKey
}
func (p *ContactRegistration) IsSetContact() bool {
  return p.Contact != nil
}

func (p *ContactRegistration) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField10(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField11(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField12(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ContactRegistration)  ReadField1(iprot thrift.TProtocol) error {
  p.Contact = &Contact{}
  if err := p.Contact.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Contact), err)
  }
  return nil
}

func (p *ContactRegistration)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.Luid = v
}
  return nil
}

func (p *ContactRegistration)  ReadField11(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.ContactType = v
}
  return nil
}

func (p *ContactRegistration)  ReadField12(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  p.ContactKey = v
}
  return nil
}

func (p *ContactRegistration) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ContactRegistration"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField11(oprot); err != nil { return err }
    if err := p.writeField12(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ContactRegistration) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("contact", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:contact: ", p), err) }
  if err := p.Contact.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Contact), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:contact: ", p), err) }
  return err
}

func (p *ContactRegistration) writeField10(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("luid", thrift.STRING, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:luid: ", p), err) }
  if err := oprot.WriteString(string(p.Luid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.luid (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:luid: ", p), err) }
  return err
}

func (p *ContactRegistration) writeField11(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("contactType", thrift.I32, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:contactType: ", p), err) }
  if err := oprot.WriteI32(int32(p.ContactType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.contactType (11) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:contactType: ", p), err) }
  return err
}

func (p *ContactRegistration) writeField12(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("contactKey", thrift.STRING, 12); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:contactKey: ", p), err) }
  if err := oprot.WriteString(string(p.ContactKey)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.contactKey (12) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 12:contactKey: ", p), err) }
  return err
}

func (p *ContactRegistration) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ContactRegistration(%+v)", *p)
}

// Attributes:
//  - Revision
//  - CreatedTime
//  - Type
//  - ReqSeq
//  - Checksum
//  - Status
//  - Param1
//  - Param2
//  - Param3
//  - Message
type Operation struct {
  Revision int64 `thrift:"revision,1" db:"revision" json:"revision"`
  CreatedTime int64 `thrift:"createdTime,2" db:"createdTime" json:"createdTime"`
  Type OperationType `thrift:"type,3" db:"type" json:"type"`
  ReqSeq int32 `thrift:"reqSeq,4" db:"reqSeq" json:"reqSeq"`
  Checksum string `thrift:"checksum,5" db:"checksum" json:"checksum"`
  // unused field # 6
  Status OperationStatus `thrift:"status,7" db:"status" json:"status"`
  // unused fields # 8 to 9
  Param1 string `thrift:"param1,10" db:"param1" json:"param1"`
  Param2 string `thrift:"param2,11" db:"param2" json:"param2"`
  Param3 string `thrift:"param3,12" db:"param3" json:"param3"`
  // unused fields # 13 to 19
  Message *Message `thrift:"message,20" db:"message" json:"message"`
}

func NewOperation() *Operation {
  return &Operation{}
}


func (p *Operation) GetRevision() int64 {
  return p.Revision
}

func (p *Operation) GetCreatedTime() int64 {
  return p.CreatedTime
}

func (p *Operation) GetType() OperationType {
  return p.Type
}

func (p *Operation) GetReqSeq() int32 {
  return p.ReqSeq
}

func (p *Operation) GetChecksum() string {
  return p.Checksum
}

func (p *Operation) GetStatus() OperationStatus {
  return p.Status
}

func (p *Operation) GetParam1() string {
  return p.Param1
}

func (p *Operation) GetParam2() string {
  return p.Param2
}

func (p *Operation) GetParam3() string {
  return p.Param3
}
var Operation_Message_DEFAULT *Message
func (p *Operation) GetMessage() *Message {
  if !p.IsSetMessage() {
    return Operation_Message_DEFAULT
  }
return p.Message
}
func (p *Operation) IsSetMessage() bool {
  return p.Message != nil
}

func (p *Operation) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField10(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField11(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField12(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 20:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField20(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Operation)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Revision = v
}
  return nil
}

func (p *Operation)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.CreatedTime = v
}
  return nil
}

func (p *Operation)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := OperationType(v)
  p.Type = temp
}
  return nil
}

func (p *Operation)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.ReqSeq = v
}
  return nil
}

func (p *Operation)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Checksum = v
}
  return nil
}

func (p *Operation)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  temp := OperationStatus(v)
  p.Status = temp
}
  return nil
}

func (p *Operation)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.Param1 = v
}
  return nil
}

func (p *Operation)  ReadField11(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.Param2 = v
}
  return nil
}

func (p *Operation)  ReadField12(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  p.Param3 = v
}
  return nil
}

func (p *Operation)  ReadField20(iprot thrift.TProtocol) error {
  p.Message = &Message{}
  if err := p.Message.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Message), err)
  }
  return nil
}

func (p *Operation) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Operation"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField11(oprot); err != nil { return err }
    if err := p.writeField12(oprot); err != nil { return err }
    if err := p.writeField20(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Operation) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("revision", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:revision: ", p), err) }
  if err := oprot.WriteI64(int64(p.Revision)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.revision (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:revision: ", p), err) }
  return err
}

func (p *Operation) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("createdTime", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:createdTime: ", p), err) }
  if err := oprot.WriteI64(int64(p.CreatedTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.createdTime (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:createdTime: ", p), err) }
  return err
}

func (p *Operation) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("type", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:type: ", p), err) }
  if err := oprot.WriteI32(int32(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:type: ", p), err) }
  return err
}

func (p *Operation) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("reqSeq", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:reqSeq: ", p), err) }
  if err := oprot.WriteI32(int32(p.ReqSeq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reqSeq (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:reqSeq: ", p), err) }
  return err
}

func (p *Operation) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("checksum", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:checksum: ", p), err) }
  if err := oprot.WriteString(string(p.Checksum)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.checksum (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:checksum: ", p), err) }
  return err
}

func (p *Operation) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("status", thrift.I32, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:status: ", p), err) }
  if err := oprot.WriteI32(int32(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.status (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:status: ", p), err) }
  return err
}

func (p *Operation) writeField10(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("param1", thrift.STRING, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:param1: ", p), err) }
  if err := oprot.WriteString(string(p.Param1)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.param1 (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:param1: ", p), err) }
  return err
}

func (p *Operation) writeField11(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("param2", thrift.STRING, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:param2: ", p), err) }
  if err := oprot.WriteString(string(p.Param2)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.param2 (11) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:param2: ", p), err) }
  return err
}

func (p *Operation) writeField12(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("param3", thrift.STRING, 12); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:param3: ", p), err) }
  if err := oprot.WriteString(string(p.Param3)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.param3 (12) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 12:param3: ", p), err) }
  return err
}

func (p *Operation) writeField20(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("message", thrift.STRUCT, 20); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:message: ", p), err) }
  if err := p.Message.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Message), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 20:message: ", p), err) }
  return err
}

func (p *Operation) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Operation(%+v)", *p)
}

// Attributes:
//  - PhoneNumberRegistered
//  - RegisteredSnsIdTypes
//  - AccountMigrationCheckType
type UserAuthStatus struct {
  PhoneNumberRegistered bool `thrift:"phoneNumberRegistered,1" db:"phoneNumberRegistered" json:"phoneNumberRegistered"`
  RegisteredSnsIdTypes []C60759oi `thrift:"registeredSnsIdTypes,2" db:"registeredSnsIdTypes" json:"registeredSnsIdTypes"`
  AccountMigrationCheckType AccountMigrationCheckType `thrift:"accountMigrationCheckType,3" db:"accountMigrationCheckType" json:"accountMigrationCheckType"`
}

func NewUserAuthStatus() *UserAuthStatus {
  return &UserAuthStatus{}
}


func (p *UserAuthStatus) GetPhoneNumberRegistered() bool {
  return p.PhoneNumberRegistered
}

func (p *UserAuthStatus) GetRegisteredSnsIdTypes() []C60759oi {
  return p.RegisteredSnsIdTypes
}

func (p *UserAuthStatus) GetAccountMigrationCheckType() AccountMigrationCheckType {
  return p.AccountMigrationCheckType
}
func (p *UserAuthStatus) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UserAuthStatus)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.PhoneNumberRegistered = v
}
  return nil
}

func (p *UserAuthStatus)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]C60759oi, 0, size)
  p.RegisteredSnsIdTypes =  tSlice
  for i := 0; i < size; i ++ {
var _elem19 C60759oi
    if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := C60759oi(v)
    _elem19 = temp
}
    p.RegisteredSnsIdTypes = append(p.RegisteredSnsIdTypes, _elem19)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *UserAuthStatus)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := AccountMigrationCheckType(v)
  p.AccountMigrationCheckType = temp
}
  return nil
}

func (p *UserAuthStatus) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("UserAuthStatus"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserAuthStatus) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("phoneNumberRegistered", thrift.BOOL, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:phoneNumberRegistered: ", p), err) }
  if err := oprot.WriteBool(bool(p.PhoneNumberRegistered)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.phoneNumberRegistered (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:phoneNumberRegistered: ", p), err) }
  return err
}

func (p *UserAuthStatus) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("registeredSnsIdTypes", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:registeredSnsIdTypes: ", p), err) }
  if err := oprot.WriteListBegin(thrift.I32, len(p.RegisteredSnsIdTypes)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.RegisteredSnsIdTypes {
    if err := oprot.WriteI32(int32(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:registeredSnsIdTypes: ", p), err) }
  return err
}

func (p *UserAuthStatus) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("accountMigrationCheckType", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:accountMigrationCheckType: ", p), err) }
  if err := oprot.WriteI32(int32(p.AccountMigrationCheckType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.accountMigrationCheckType (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:accountMigrationCheckType: ", p), err) }
  return err
}

func (p *UserAuthStatus) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserAuthStatus(%+v)", *p)
}

// Attributes:
//  - Year
//  - YearPrivacyLevelType
//  - YearEnabled
//  - Day
//  - DayPrivacyLevelType
//  - DayEnabled
type ExtendedProfileBirthday struct {
  Year string `thrift:"year,1" db:"year" json:"year"`
  YearPrivacyLevelType YearPrivacyLevelType `thrift:"yearPrivacyLevelType,2" db:"yearPrivacyLevelType" json:"yearPrivacyLevelType"`
  YearEnabled bool `thrift:"yearEnabled,3" db:"yearEnabled" json:"yearEnabled"`
  // unused field # 4
  Day string `thrift:"day,5" db:"day" json:"day"`
  DayPrivacyLevelType YearPrivacyLevelType `thrift:"dayPrivacyLevelType,6" db:"dayPrivacyLevelType" json:"dayPrivacyLevelType"`
  DayEnabled bool `thrift:"dayEnabled,7" db:"dayEnabled" json:"dayEnabled"`
}

func NewExtendedProfileBirthday() *ExtendedProfileBirthday {
  return &ExtendedProfileBirthday{}
}


func (p *ExtendedProfileBirthday) GetYear() string {
  return p.Year
}

func (p *ExtendedProfileBirthday) GetYearPrivacyLevelType() YearPrivacyLevelType {
  return p.YearPrivacyLevelType
}

func (p *ExtendedProfileBirthday) GetYearEnabled() bool {
  return p.YearEnabled
}

func (p *ExtendedProfileBirthday) GetDay() string {
  return p.Day
}

func (p *ExtendedProfileBirthday) GetDayPrivacyLevelType() YearPrivacyLevelType {
  return p.DayPrivacyLevelType
}

func (p *ExtendedProfileBirthday) GetDayEnabled() bool {
  return p.DayEnabled
}
func (p *ExtendedProfileBirthday) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ExtendedProfileBirthday)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Year = v
}
  return nil
}

func (p *ExtendedProfileBirthday)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := YearPrivacyLevelType(v)
  p.YearPrivacyLevelType = temp
}
  return nil
}

func (p *ExtendedProfileBirthday)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.YearEnabled = v
}
  return nil
}

func (p *ExtendedProfileBirthday)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Day = v
}
  return nil
}

func (p *ExtendedProfileBirthday)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  temp := YearPrivacyLevelType(v)
  p.DayPrivacyLevelType = temp
}
  return nil
}

func (p *ExtendedProfileBirthday)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.DayEnabled = v
}
  return nil
}

func (p *ExtendedProfileBirthday) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ExtendedProfileBirthday"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ExtendedProfileBirthday) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("year", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:year: ", p), err) }
  if err := oprot.WriteString(string(p.Year)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.year (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:year: ", p), err) }
  return err
}

func (p *ExtendedProfileBirthday) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("yearPrivacyLevelType", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:yearPrivacyLevelType: ", p), err) }
  if err := oprot.WriteI32(int32(p.YearPrivacyLevelType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.yearPrivacyLevelType (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:yearPrivacyLevelType: ", p), err) }
  return err
}

func (p *ExtendedProfileBirthday) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("yearEnabled", thrift.BOOL, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:yearEnabled: ", p), err) }
  if err := oprot.WriteBool(bool(p.YearEnabled)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.yearEnabled (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:yearEnabled: ", p), err) }
  return err
}

func (p *ExtendedProfileBirthday) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("day", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:day: ", p), err) }
  if err := oprot.WriteString(string(p.Day)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.day (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:day: ", p), err) }
  return err
}

func (p *ExtendedProfileBirthday) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("dayPrivacyLevelType", thrift.I32, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:dayPrivacyLevelType: ", p), err) }
  if err := oprot.WriteI32(int32(p.DayPrivacyLevelType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.dayPrivacyLevelType (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:dayPrivacyLevelType: ", p), err) }
  return err
}

func (p *ExtendedProfileBirthday) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("dayEnabled", thrift.BOOL, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:dayEnabled: ", p), err) }
  if err := oprot.WriteBool(bool(p.DayEnabled)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.dayEnabled (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:dayEnabled: ", p), err) }
  return err
}

func (p *ExtendedProfileBirthday) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ExtendedProfileBirthday(%+v)", *p)
}

// Attributes:
//  - Birthday
type ExtendedProfile struct {
  Birthday *ExtendedProfileBirthday `thrift:"birthday,1" db:"birthday" json:"birthday"`
}

func NewExtendedProfile() *ExtendedProfile {
  return &ExtendedProfile{}
}

var ExtendedProfile_Birthday_DEFAULT *ExtendedProfileBirthday
func (p *ExtendedProfile) GetBirthday() *ExtendedProfileBirthday {
  if !p.IsSetBirthday() {
    return ExtendedProfile_Birthday_DEFAULT
  }
return p.Birthday
}
func (p *ExtendedProfile) IsSetBirthday() bool {
  return p.Birthday != nil
}

func (p *ExtendedProfile) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ExtendedProfile)  ReadField1(iprot thrift.TProtocol) error {
  p.Birthday = &ExtendedProfileBirthday{}
  if err := p.Birthday.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Birthday), err)
  }
  return nil
}

func (p *ExtendedProfile) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ExtendedProfile"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ExtendedProfile) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("birthday", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:birthday: ", p), err) }
  if err := p.Birthday.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Birthday), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:birthday: ", p), err) }
  return err
}

func (p *ExtendedProfile) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ExtendedProfile(%+v)", *p)
}

// Attributes:
//  - NotificationEnable
//  - NotificationMuteExpiration
//  - NotificationNewMessage
//  - NotificationGroupInvitation
//  - NotificationShowMessage
//  - NotificationIncomingCall
//  - NotificationSoundMessage
//  - NotificationSoundGroup
//  - NotificationDisabledWithSub
//  - NotificationPayment
//  - PrivacySyncContacts
//  - PrivacySearchByPhoneNumber
//  - PrivacySearchByUserid
//  - PrivacySearchByEmail
//  - PrivacyAllowSecondaryDeviceLogin
//  - PrivacyProfileImagePostToMyhome
//  - PrivacyReceiveMessagesFromNotFriend
//  - PrivacyAgreeUseLineCoinToPaidCall
//  - PrivacyAgreeUsePaidCall
//  - PrivacyAllowFriendRequest
//  - ContactMyTicket
//  - IdentityProvider
//  - IdentityIdentifier
//  - SnsAccounts
//  - PhoneRegistration
//  - EmailConfirmationStatus
//  - AccountMigrationPincodeType
//  - EnforcedInputAccountMigrationPincode
//  - SecurityCenterSettingsType
//  - AllowUnregistrationSecondaryDevice
//  - PreferenceLocale
//  - CustomModes
//  - E2eeEnable
//  - HitokotoBackupRequested
//  - PrivacyProfileMusicPostToMyhome
//  - PrivacyAllowNearby
//  - AgreementNearbyTime
//  - AgreementSquareTime
//  - NotificationMention
//  - BotUseAgreementAcceptedAt
//  - AgreementShakeFunction
//  - AgreementMobileContactName
//  - NotificationThumbnail
//  - AgreementSoundToText
//  - PrivacyPolicyVersion
//  - AgreementAdByWebAccess
//  - AgreementPhoneNumberMatching
//  - AgreementCommunicationInfo
//  - PrivacySharePersonalInfoToFriends
//  - AgreementThingsWirelessCommunication
//  - AgreementGdpr
//  - PrivacyStatusMessageHistory
//  - AgreementProvideLocation
//  - AgreementBeacon
//  - PrivacyAllowProfileHistory
//  - AgreementContentsSuggest
//  - AgreementContentsSuggestDataCollection
//  - PrivacyAgeResult_
//  - PrivacyAgeResultReceived
//  - AgreementOcrImageCollection
//  - PrivacyAllowFollow
//  - PrivacyShowFollowList
//  - NotificationBadgeTalkOnly
type Settings struct {
  // unused fields # 1 to 9
  NotificationEnable bool `thrift:"notificationEnable,10" db:"notificationEnable" json:"notificationEnable"`
  NotificationMuteExpiration bool `thrift:"notificationMuteExpiration,11" db:"notificationMuteExpiration" json:"notificationMuteExpiration"`
  NotificationNewMessage int64 `thrift:"notificationNewMessage,12" db:"notificationNewMessage" json:"notificationNewMessage"`
  NotificationGroupInvitation bool `thrift:"notificationGroupInvitation,13" db:"notificationGroupInvitation" json:"notificationGroupInvitation"`
  NotificationShowMessage bool `thrift:"notificationShowMessage,14" db:"notificationShowMessage" json:"notificationShowMessage"`
  NotificationIncomingCall bool `thrift:"notificationIncomingCall,15" db:"notificationIncomingCall" json:"notificationIncomingCall"`
  NotificationSoundMessage string `thrift:"notificationSoundMessage,16" db:"notificationSoundMessage" json:"notificationSoundMessage"`
  NotificationSoundGroup string `thrift:"notificationSoundGroup,17" db:"notificationSoundGroup" json:"notificationSoundGroup"`
  NotificationDisabledWithSub bool `thrift:"notificationDisabledWithSub,18" db:"notificationDisabledWithSub" json:"notificationDisabledWithSub"`
  NotificationPayment bool `thrift:"notificationPayment,19" db:"notificationPayment" json:"notificationPayment"`
  PrivacySyncContacts bool `thrift:"privacySyncContacts,20" db:"privacySyncContacts" json:"privacySyncContacts"`
  PrivacySearchByPhoneNumber bool `thrift:"privacySearchByPhoneNumber,21" db:"privacySearchByPhoneNumber" json:"privacySearchByPhoneNumber"`
  PrivacySearchByUserid bool `thrift:"privacySearchByUserid,22" db:"privacySearchByUserid" json:"privacySearchByUserid"`
  PrivacySearchByEmail bool `thrift:"privacySearchByEmail,23" db:"privacySearchByEmail" json:"privacySearchByEmail"`
  PrivacyAllowSecondaryDeviceLogin bool `thrift:"privacyAllowSecondaryDeviceLogin,24" db:"privacyAllowSecondaryDeviceLogin" json:"privacyAllowSecondaryDeviceLogin"`
  PrivacyProfileImagePostToMyhome bool `thrift:"privacyProfileImagePostToMyhome,25" db:"privacyProfileImagePostToMyhome" json:"privacyProfileImagePostToMyhome"`
  PrivacyReceiveMessagesFromNotFriend bool `thrift:"privacyReceiveMessagesFromNotFriend,26" db:"privacyReceiveMessagesFromNotFriend" json:"privacyReceiveMessagesFromNotFriend"`
  PrivacyAgreeUseLineCoinToPaidCall bool `thrift:"privacyAgreeUseLineCoinToPaidCall,27" db:"privacyAgreeUseLineCoinToPaidCall" json:"privacyAgreeUseLineCoinToPaidCall"`
  PrivacyAgreeUsePaidCall bool `thrift:"privacyAgreeUsePaidCall,28" db:"privacyAgreeUsePaidCall" json:"privacyAgreeUsePaidCall"`
  PrivacyAllowFriendRequest bool `thrift:"privacyAllowFriendRequest,29" db:"privacyAllowFriendRequest" json:"privacyAllowFriendRequest"`
  ContactMyTicket string `thrift:"contactMyTicket,30" db:"contactMyTicket" json:"contactMyTicket"`
  // unused fields # 31 to 39
  IdentityProvider IdentityProvider `thrift:"identityProvider,40" db:"identityProvider" json:"identityProvider"`
  IdentityIdentifier string `thrift:"identityIdentifier,41" db:"identityIdentifier" json:"identityIdentifier"`
  SnsAccounts map[C60759oi]string `thrift:"snsAccounts,42" db:"snsAccounts" json:"snsAccounts"`
  PhoneRegistration bool `thrift:"phoneRegistration,43" db:"phoneRegistration" json:"phoneRegistration"`
  EmailConfirmationStatus EmailConfirmationStatus `thrift:"emailConfirmationStatus,44" db:"emailConfirmationStatus" json:"emailConfirmationStatus"`
  AccountMigrationPincodeType AccountMigrationPincodeType `thrift:"accountMigrationPincodeType,45" db:"accountMigrationPincodeType" json:"accountMigrationPincodeType"`
  EnforcedInputAccountMigrationPincode bool `thrift:"enforcedInputAccountMigrationPincode,46" db:"enforcedInputAccountMigrationPincode" json:"enforcedInputAccountMigrationPincode"`
  SecurityCenterSettingsType AccountMigrationPincodeType `thrift:"securityCenterSettingsType,47" db:"securityCenterSettingsType" json:"securityCenterSettingsType"`
  AllowUnregistrationSecondaryDevice bool `thrift:"allowUnregistrationSecondaryDevice,48" db:"allowUnregistrationSecondaryDevice" json:"allowUnregistrationSecondaryDevice"`
  // unused field # 49
  PreferenceLocale string `thrift:"preferenceLocale,50" db:"preferenceLocale" json:"preferenceLocale"`
  // unused fields # 51 to 59
  CustomModes map[C62606zb]string `thrift:"customModes,60" db:"customModes" json:"customModes"`
  E2eeEnable bool `thrift:"e2eeEnable,61" db:"e2eeEnable" json:"e2eeEnable"`
  HitokotoBackupRequested bool `thrift:"hitokotoBackupRequested,62" db:"hitokotoBackupRequested" json:"hitokotoBackupRequested"`
  PrivacyProfileMusicPostToMyhome bool `thrift:"privacyProfileMusicPostToMyhome,63" db:"privacyProfileMusicPostToMyhome" json:"privacyProfileMusicPostToMyhome"`
  // unused field # 64
  PrivacyAllowNearby bool `thrift:"privacyAllowNearby,65" db:"privacyAllowNearby" json:"privacyAllowNearby"`
  AgreementNearbyTime bool `thrift:"agreementNearbyTime,66" db:"agreementNearbyTime" json:"agreementNearbyTime"`
  AgreementSquareTime int64 `thrift:"agreementSquareTime,67" db:"agreementSquareTime" json:"agreementSquareTime"`
  NotificationMention bool `thrift:"notificationMention,68" db:"notificationMention" json:"notificationMention"`
  BotUseAgreementAcceptedAt int64 `thrift:"botUseAgreementAcceptedAt,69" db:"botUseAgreementAcceptedAt" json:"botUseAgreementAcceptedAt"`
  AgreementShakeFunction int64 `thrift:"agreementShakeFunction,70" db:"agreementShakeFunction" json:"agreementShakeFunction"`
  AgreementMobileContactName int64 `thrift:"agreementMobileContactName,71" db:"agreementMobileContactName" json:"agreementMobileContactName"`
  NotificationThumbnail bool `thrift:"notificationThumbnail,72" db:"notificationThumbnail" json:"notificationThumbnail"`
  AgreementSoundToText int64 `thrift:"agreementSoundToText,73" db:"agreementSoundToText" json:"agreementSoundToText"`
  PrivacyPolicyVersion string `thrift:"privacyPolicyVersion,74" db:"privacyPolicyVersion" json:"privacyPolicyVersion"`
  AgreementAdByWebAccess int64 `thrift:"agreementAdByWebAccess,75" db:"agreementAdByWebAccess" json:"agreementAdByWebAccess"`
  AgreementPhoneNumberMatching int64 `thrift:"agreementPhoneNumberMatching,76" db:"agreementPhoneNumberMatching" json:"agreementPhoneNumberMatching"`
  AgreementCommunicationInfo int64 `thrift:"agreementCommunicationInfo,77" db:"agreementCommunicationInfo" json:"agreementCommunicationInfo"`
  PrivacySharePersonalInfoToFriends PrivacySharePersonalInfoToFriends `thrift:"privacySharePersonalInfoToFriends,78" db:"privacySharePersonalInfoToFriends" json:"privacySharePersonalInfoToFriends"`
  AgreementThingsWirelessCommunication int64 `thrift:"agreementThingsWirelessCommunication,79" db:"agreementThingsWirelessCommunication" json:"agreementThingsWirelessCommunication"`
  AgreementGdpr int64 `thrift:"agreementGdpr,80" db:"agreementGdpr" json:"agreementGdpr"`
  PrivacyStatusMessageHistory PrivacyStatusMessageHistory `thrift:"privacyStatusMessageHistory,81" db:"privacyStatusMessageHistory" json:"privacyStatusMessageHistory"`
  AgreementProvideLocation int64 `thrift:"agreementProvideLocation,82" db:"agreementProvideLocation" json:"agreementProvideLocation"`
  AgreementBeacon int64 `thrift:"agreementBeacon,83" db:"agreementBeacon" json:"agreementBeacon"`
  // unused field # 84
  PrivacyAllowProfileHistory PrivacyAllowProfileHistory `thrift:"privacyAllowProfileHistory,85" db:"privacyAllowProfileHistory" json:"privacyAllowProfileHistory"`
  AgreementContentsSuggest int64 `thrift:"agreementContentsSuggest,86" db:"agreementContentsSuggest" json:"agreementContentsSuggest"`
  AgreementContentsSuggestDataCollection int64 `thrift:"agreementContentsSuggestDataCollection,87" db:"agreementContentsSuggestDataCollection" json:"agreementContentsSuggestDataCollection"`
  PrivacyAgeResult_ PrivacyAgeResult_ `thrift:"privacyAgeResult,88" db:"privacyAgeResult" json:"privacyAgeResult"`
  PrivacyAgeResultReceived bool `thrift:"privacyAgeResultReceived,89" db:"privacyAgeResultReceived" json:"privacyAgeResultReceived"`
  AgreementOcrImageCollection int64 `thrift:"agreementOcrImageCollection,90" db:"agreementOcrImageCollection" json:"agreementOcrImageCollection"`
  PrivacyAllowFollow bool `thrift:"privacyAllowFollow,91" db:"privacyAllowFollow" json:"privacyAllowFollow"`
  PrivacyShowFollowList bool `thrift:"privacyShowFollowList,92" db:"privacyShowFollowList" json:"privacyShowFollowList"`
  NotificationBadgeTalkOnly bool `thrift:"notificationBadgeTalkOnly,93" db:"notificationBadgeTalkOnly" json:"notificationBadgeTalkOnly"`
}

func NewSettings() *Settings {
  return &Settings{}
}


func (p *Settings) GetNotificationEnable() bool {
  return p.NotificationEnable
}

func (p *Settings) GetNotificationMuteExpiration() bool {
  return p.NotificationMuteExpiration
}

func (p *Settings) GetNotificationNewMessage() int64 {
  return p.NotificationNewMessage
}

func (p *Settings) GetNotificationGroupInvitation() bool {
  return p.NotificationGroupInvitation
}

func (p *Settings) GetNotificationShowMessage() bool {
  return p.NotificationShowMessage
}

func (p *Settings) GetNotificationIncomingCall() bool {
  return p.NotificationIncomingCall
}

func (p *Settings) GetNotificationSoundMessage() string {
  return p.NotificationSoundMessage
}

func (p *Settings) GetNotificationSoundGroup() string {
  return p.NotificationSoundGroup
}

func (p *Settings) GetNotificationDisabledWithSub() bool {
  return p.NotificationDisabledWithSub
}

func (p *Settings) GetNotificationPayment() bool {
  return p.NotificationPayment
}

func (p *Settings) GetPrivacySyncContacts() bool {
  return p.PrivacySyncContacts
}

func (p *Settings) GetPrivacySearchByPhoneNumber() bool {
  return p.PrivacySearchByPhoneNumber
}

func (p *Settings) GetPrivacySearchByUserid() bool {
  return p.PrivacySearchByUserid
}

func (p *Settings) GetPrivacySearchByEmail() bool {
  return p.PrivacySearchByEmail
}

func (p *Settings) GetPrivacyAllowSecondaryDeviceLogin() bool {
  return p.PrivacyAllowSecondaryDeviceLogin
}

func (p *Settings) GetPrivacyProfileImagePostToMyhome() bool {
  return p.PrivacyProfileImagePostToMyhome
}

func (p *Settings) GetPrivacyReceiveMessagesFromNotFriend() bool {
  return p.PrivacyReceiveMessagesFromNotFriend
}

func (p *Settings) GetPrivacyAgreeUseLineCoinToPaidCall() bool {
  return p.PrivacyAgreeUseLineCoinToPaidCall
}

func (p *Settings) GetPrivacyAgreeUsePaidCall() bool {
  return p.PrivacyAgreeUsePaidCall
}

func (p *Settings) GetPrivacyAllowFriendRequest() bool {
  return p.PrivacyAllowFriendRequest
}

func (p *Settings) GetContactMyTicket() string {
  return p.ContactMyTicket
}

func (p *Settings) GetIdentityProvider() IdentityProvider {
  return p.IdentityProvider
}

func (p *Settings) GetIdentityIdentifier() string {
  return p.IdentityIdentifier
}

func (p *Settings) GetSnsAccounts() map[C60759oi]string {
  return p.SnsAccounts
}

func (p *Settings) GetPhoneRegistration() bool {
  return p.PhoneRegistration
}

func (p *Settings) GetEmailConfirmationStatus() EmailConfirmationStatus {
  return p.EmailConfirmationStatus
}

func (p *Settings) GetAccountMigrationPincodeType() AccountMigrationPincodeType {
  return p.AccountMigrationPincodeType
}

func (p *Settings) GetEnforcedInputAccountMigrationPincode() bool {
  return p.EnforcedInputAccountMigrationPincode
}

func (p *Settings) GetSecurityCenterSettingsType() AccountMigrationPincodeType {
  return p.SecurityCenterSettingsType
}

func (p *Settings) GetAllowUnregistrationSecondaryDevice() bool {
  return p.AllowUnregistrationSecondaryDevice
}

func (p *Settings) GetPreferenceLocale() string {
  return p.PreferenceLocale
}

func (p *Settings) GetCustomModes() map[C62606zb]string {
  return p.CustomModes
}

func (p *Settings) GetE2eeEnable() bool {
  return p.E2eeEnable
}

func (p *Settings) GetHitokotoBackupRequested() bool {
  return p.HitokotoBackupRequested
}

func (p *Settings) GetPrivacyProfileMusicPostToMyhome() bool {
  return p.PrivacyProfileMusicPostToMyhome
}

func (p *Settings) GetPrivacyAllowNearby() bool {
  return p.PrivacyAllowNearby
}

func (p *Settings) GetAgreementNearbyTime() bool {
  return p.AgreementNearbyTime
}

func (p *Settings) GetAgreementSquareTime() int64 {
  return p.AgreementSquareTime
}

func (p *Settings) GetNotificationMention() bool {
  return p.NotificationMention
}

func (p *Settings) GetBotUseAgreementAcceptedAt() int64 {
  return p.BotUseAgreementAcceptedAt
}

func (p *Settings) GetAgreementShakeFunction() int64 {
  return p.AgreementShakeFunction
}

func (p *Settings) GetAgreementMobileContactName() int64 {
  return p.AgreementMobileContactName
}

func (p *Settings) GetNotificationThumbnail() bool {
  return p.NotificationThumbnail
}

func (p *Settings) GetAgreementSoundToText() int64 {
  return p.AgreementSoundToText
}

func (p *Settings) GetPrivacyPolicyVersion() string {
  return p.PrivacyPolicyVersion
}

func (p *Settings) GetAgreementAdByWebAccess() int64 {
  return p.AgreementAdByWebAccess
}

func (p *Settings) GetAgreementPhoneNumberMatching() int64 {
  return p.AgreementPhoneNumberMatching
}

func (p *Settings) GetAgreementCommunicationInfo() int64 {
  return p.AgreementCommunicationInfo
}

func (p *Settings) GetPrivacySharePersonalInfoToFriends() PrivacySharePersonalInfoToFriends {
  return p.PrivacySharePersonalInfoToFriends
}

func (p *Settings) GetAgreementThingsWirelessCommunication() int64 {
  return p.AgreementThingsWirelessCommunication
}

func (p *Settings) GetAgreementGdpr() int64 {
  return p.AgreementGdpr
}

func (p *Settings) GetPrivacyStatusMessageHistory() PrivacyStatusMessageHistory {
  return p.PrivacyStatusMessageHistory
}

func (p *Settings) GetAgreementProvideLocation() int64 {
  return p.AgreementProvideLocation
}

func (p *Settings) GetAgreementBeacon() int64 {
  return p.AgreementBeacon
}

func (p *Settings) GetPrivacyAllowProfileHistory() PrivacyAllowProfileHistory {
  return p.PrivacyAllowProfileHistory
}

func (p *Settings) GetAgreementContentsSuggest() int64 {
  return p.AgreementContentsSuggest
}

func (p *Settings) GetAgreementContentsSuggestDataCollection() int64 {
  return p.AgreementContentsSuggestDataCollection
}

func (p *Settings) GetPrivacyAgeResult_() PrivacyAgeResult_ {
  return p.PrivacyAgeResult_
}

func (p *Settings) GetPrivacyAgeResultReceived() bool {
  return p.PrivacyAgeResultReceived
}

func (p *Settings) GetAgreementOcrImageCollection() int64 {
  return p.AgreementOcrImageCollection
}

func (p *Settings) GetPrivacyAllowFollow() bool {
  return p.PrivacyAllowFollow
}

func (p *Settings) GetPrivacyShowFollowList() bool {
  return p.PrivacyShowFollowList
}

func (p *Settings) GetNotificationBadgeTalkOnly() bool {
  return p.NotificationBadgeTalkOnly
}
func (p *Settings) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 10:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField10(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField11(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField12(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 13:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField13(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 14:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField14(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 15:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField15(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 16:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField16(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 17:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField17(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 18:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField18(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 19:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField19(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 20:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField20(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 21:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField21(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 22:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField22(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 23:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField23(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 24:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField24(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 25:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField25(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 26:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField26(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 27:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField27(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 28:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField28(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 29:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField29(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 30:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField30(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 40:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField40(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 41:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField41(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 42:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField42(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 43:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField43(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 44:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField44(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 45:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField45(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 46:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField46(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 47:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField47(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 48:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField48(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 50:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField50(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 60:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField60(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 61:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField61(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 62:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField62(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 63:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField63(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 65:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField65(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 66:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField66(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 67:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField67(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 68:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField68(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 69:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField69(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 70:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField70(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 71:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField71(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 72:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField72(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 73:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField73(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 74:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField74(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 75:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField75(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 76:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField76(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 77:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField77(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 78:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField78(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 79:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField79(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 80:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField80(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 81:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField81(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 82:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField82(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 83:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField83(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 85:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField85(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 86:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField86(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 87:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField87(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 88:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField88(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 89:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField89(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 90:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField90(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 91:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField91(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 92:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField92(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 93:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField93(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Settings)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.NotificationEnable = v
}
  return nil
}

func (p *Settings)  ReadField11(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.NotificationMuteExpiration = v
}
  return nil
}

func (p *Settings)  ReadField12(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  p.NotificationNewMessage = v
}
  return nil
}

func (p *Settings)  ReadField13(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 13: ", err)
} else {
  p.NotificationGroupInvitation = v
}
  return nil
}

func (p *Settings)  ReadField14(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 14: ", err)
} else {
  p.NotificationShowMessage = v
}
  return nil
}

func (p *Settings)  ReadField15(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 15: ", err)
} else {
  p.NotificationIncomingCall = v
}
  return nil
}

func (p *Settings)  ReadField16(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 16: ", err)
} else {
  p.NotificationSoundMessage = v
}
  return nil
}

func (p *Settings)  ReadField17(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 17: ", err)
} else {
  p.NotificationSoundGroup = v
}
  return nil
}

func (p *Settings)  ReadField18(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 18: ", err)
} else {
  p.NotificationDisabledWithSub = v
}
  return nil
}

func (p *Settings)  ReadField19(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 19: ", err)
} else {
  p.NotificationPayment = v
}
  return nil
}

func (p *Settings)  ReadField20(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 20: ", err)
} else {
  p.PrivacySyncContacts = v
}
  return nil
}

func (p *Settings)  ReadField21(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 21: ", err)
} else {
  p.PrivacySearchByPhoneNumber = v
}
  return nil
}

func (p *Settings)  ReadField22(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 22: ", err)
} else {
  p.PrivacySearchByUserid = v
}
  return nil
}

func (p *Settings)  ReadField23(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 23: ", err)
} else {
  p.PrivacySearchByEmail = v
}
  return nil
}

func (p *Settings)  ReadField24(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 24: ", err)
} else {
  p.PrivacyAllowSecondaryDeviceLogin = v
}
  return nil
}

func (p *Settings)  ReadField25(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 25: ", err)
} else {
  p.PrivacyProfileImagePostToMyhome = v
}
  return nil
}

func (p *Settings)  ReadField26(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 26: ", err)
} else {
  p.PrivacyReceiveMessagesFromNotFriend = v
}
  return nil
}

func (p *Settings)  ReadField27(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 27: ", err)
} else {
  p.PrivacyAgreeUseLineCoinToPaidCall = v
}
  return nil
}

func (p *Settings)  ReadField28(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 28: ", err)
} else {
  p.PrivacyAgreeUsePaidCall = v
}
  return nil
}

func (p *Settings)  ReadField29(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 29: ", err)
} else {
  p.PrivacyAllowFriendRequest = v
}
  return nil
}

func (p *Settings)  ReadField30(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 30: ", err)
} else {
  p.ContactMyTicket = v
}
  return nil
}

func (p *Settings)  ReadField40(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 40: ", err)
} else {
  temp := IdentityProvider(v)
  p.IdentityProvider = temp
}
  return nil
}

func (p *Settings)  ReadField41(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 41: ", err)
} else {
  p.IdentityIdentifier = v
}
  return nil
}

func (p *Settings)  ReadField42(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[C60759oi]string, size)
  p.SnsAccounts =  tMap
  for i := 0; i < size; i ++ {
var _key20 C60759oi
    if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := C60759oi(v)
    _key20 = temp
}
var _val21 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val21 = v
}
    p.SnsAccounts[_key20] = _val21
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *Settings)  ReadField43(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 43: ", err)
} else {
  p.PhoneRegistration = v
}
  return nil
}

func (p *Settings)  ReadField44(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 44: ", err)
} else {
  temp := EmailConfirmationStatus(v)
  p.EmailConfirmationStatus = temp
}
  return nil
}

func (p *Settings)  ReadField45(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 45: ", err)
} else {
  temp := AccountMigrationPincodeType(v)
  p.AccountMigrationPincodeType = temp
}
  return nil
}

func (p *Settings)  ReadField46(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 46: ", err)
} else {
  p.EnforcedInputAccountMigrationPincode = v
}
  return nil
}

func (p *Settings)  ReadField47(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 47: ", err)
} else {
  temp := AccountMigrationPincodeType(v)
  p.SecurityCenterSettingsType = temp
}
  return nil
}

func (p *Settings)  ReadField48(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 48: ", err)
} else {
  p.AllowUnregistrationSecondaryDevice = v
}
  return nil
}

func (p *Settings)  ReadField50(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 50: ", err)
} else {
  p.PreferenceLocale = v
}
  return nil
}

func (p *Settings)  ReadField60(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[C62606zb]string, size)
  p.CustomModes =  tMap
  for i := 0; i < size; i ++ {
var _key22 C62606zb
    if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := C62606zb(v)
    _key22 = temp
}
var _val23 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val23 = v
}
    p.CustomModes[_key22] = _val23
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *Settings)  ReadField61(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 61: ", err)
} else {
  p.E2eeEnable = v
}
  return nil
}

func (p *Settings)  ReadField62(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 62: ", err)
} else {
  p.HitokotoBackupRequested = v
}
  return nil
}

func (p *Settings)  ReadField63(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 63: ", err)
} else {
  p.PrivacyProfileMusicPostToMyhome = v
}
  return nil
}

func (p *Settings)  ReadField65(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 65: ", err)
} else {
  p.PrivacyAllowNearby = v
}
  return nil
}

func (p *Settings)  ReadField66(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 66: ", err)
} else {
  p.AgreementNearbyTime = v
}
  return nil
}

func (p *Settings)  ReadField67(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 67: ", err)
} else {
  p.AgreementSquareTime = v
}
  return nil
}

func (p *Settings)  ReadField68(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 68: ", err)
} else {
  p.NotificationMention = v
}
  return nil
}

func (p *Settings)  ReadField69(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 69: ", err)
} else {
  p.BotUseAgreementAcceptedAt = v
}
  return nil
}

func (p *Settings)  ReadField70(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 70: ", err)
} else {
  p.AgreementShakeFunction = v
}
  return nil
}

func (p *Settings)  ReadField71(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 71: ", err)
} else {
  p.AgreementMobileContactName = v
}
  return nil
}

func (p *Settings)  ReadField72(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 72: ", err)
} else {
  p.NotificationThumbnail = v
}
  return nil
}

func (p *Settings)  ReadField73(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 73: ", err)
} else {
  p.AgreementSoundToText = v
}
  return nil
}

func (p *Settings)  ReadField74(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 74: ", err)
} else {
  p.PrivacyPolicyVersion = v
}
  return nil
}

func (p *Settings)  ReadField75(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 75: ", err)
} else {
  p.AgreementAdByWebAccess = v
}
  return nil
}

func (p *Settings)  ReadField76(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 76: ", err)
} else {
  p.AgreementPhoneNumberMatching = v
}
  return nil
}

func (p *Settings)  ReadField77(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 77: ", err)
} else {
  p.AgreementCommunicationInfo = v
}
  return nil
}

func (p *Settings)  ReadField78(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 78: ", err)
} else {
  temp := PrivacySharePersonalInfoToFriends(v)
  p.PrivacySharePersonalInfoToFriends = temp
}
  return nil
}

func (p *Settings)  ReadField79(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 79: ", err)
} else {
  p.AgreementThingsWirelessCommunication = v
}
  return nil
}

func (p *Settings)  ReadField80(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 80: ", err)
} else {
  p.AgreementGdpr = v
}
  return nil
}

func (p *Settings)  ReadField81(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 81: ", err)
} else {
  temp := PrivacyStatusMessageHistory(v)
  p.PrivacyStatusMessageHistory = temp
}
  return nil
}

func (p *Settings)  ReadField82(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 82: ", err)
} else {
  p.AgreementProvideLocation = v
}
  return nil
}

func (p *Settings)  ReadField83(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 83: ", err)
} else {
  p.AgreementBeacon = v
}
  return nil
}

func (p *Settings)  ReadField85(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 85: ", err)
} else {
  temp := PrivacyAllowProfileHistory(v)
  p.PrivacyAllowProfileHistory = temp
}
  return nil
}

func (p *Settings)  ReadField86(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 86: ", err)
} else {
  p.AgreementContentsSuggest = v
}
  return nil
}

func (p *Settings)  ReadField87(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 87: ", err)
} else {
  p.AgreementContentsSuggestDataCollection = v
}
  return nil
}

func (p *Settings)  ReadField88(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 88: ", err)
} else {
  temp := PrivacyAgeResult_(v)
  p.PrivacyAgeResult_ = temp
}
  return nil
}

func (p *Settings)  ReadField89(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 89: ", err)
} else {
  p.PrivacyAgeResultReceived = v
}
  return nil
}

func (p *Settings)  ReadField90(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 90: ", err)
} else {
  p.AgreementOcrImageCollection = v
}
  return nil
}

func (p *Settings)  ReadField91(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 91: ", err)
} else {
  p.PrivacyAllowFollow = v
}
  return nil
}

func (p *Settings)  ReadField92(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 92: ", err)
} else {
  p.PrivacyShowFollowList = v
}
  return nil
}

func (p *Settings)  ReadField93(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 93: ", err)
} else {
  p.NotificationBadgeTalkOnly = v
}
  return nil
}

func (p *Settings) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Settings"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField11(oprot); err != nil { return err }
    if err := p.writeField12(oprot); err != nil { return err }
    if err := p.writeField13(oprot); err != nil { return err }
    if err := p.writeField14(oprot); err != nil { return err }
    if err := p.writeField15(oprot); err != nil { return err }
    if err := p.writeField16(oprot); err != nil { return err }
    if err := p.writeField17(oprot); err != nil { return err }
    if err := p.writeField18(oprot); err != nil { return err }
    if err := p.writeField19(oprot); err != nil { return err }
    if err := p.writeField20(oprot); err != nil { return err }
    if err := p.writeField21(oprot); err != nil { return err }
    if err := p.writeField22(oprot); err != nil { return err }
    if err := p.writeField23(oprot); err != nil { return err }
    if err := p.writeField24(oprot); err != nil { return err }
    if err := p.writeField25(oprot); err != nil { return err }
    if err := p.writeField26(oprot); err != nil { return err }
    if err := p.writeField27(oprot); err != nil { return err }
    if err := p.writeField28(oprot); err != nil { return err }
    if err := p.writeField29(oprot); err != nil { return err }
    if err := p.writeField30(oprot); err != nil { return err }
    if err := p.writeField40(oprot); err != nil { return err }
    if err := p.writeField41(oprot); err != nil { return err }
    if err := p.writeField42(oprot); err != nil { return err }
    if err := p.writeField43(oprot); err != nil { return err }
    if err := p.writeField44(oprot); err != nil { return err }
    if err := p.writeField45(oprot); err != nil { return err }
    if err := p.writeField46(oprot); err != nil { return err }
    if err := p.writeField47(oprot); err != nil { return err }
    if err := p.writeField48(oprot); err != nil { return err }
    if err := p.writeField50(oprot); err != nil { return err }
    if err := p.writeField60(oprot); err != nil { return err }
    if err := p.writeField61(oprot); err != nil { return err }
    if err := p.writeField62(oprot); err != nil { return err }
    if err := p.writeField63(oprot); err != nil { return err }
    if err := p.writeField65(oprot); err != nil { return err }
    if err := p.writeField66(oprot); err != nil { return err }
    if err := p.writeField67(oprot); err != nil { return err }
    if err := p.writeField68(oprot); err != nil { return err }
    if err := p.writeField69(oprot); err != nil { return err }
    if err := p.writeField70(oprot); err != nil { return err }
    if err := p.writeField71(oprot); err != nil { return err }
    if err := p.writeField72(oprot); err != nil { return err }
    if err := p.writeField73(oprot); err != nil { return err }
    if err := p.writeField74(oprot); err != nil { return err }
    if err := p.writeField75(oprot); err != nil { return err }
    if err := p.writeField76(oprot); err != nil { return err }
    if err := p.writeField77(oprot); err != nil { return err }
    if err := p.writeField78(oprot); err != nil { return err }
    if err := p.writeField79(oprot); err != nil { return err }
    if err := p.writeField80(oprot); err != nil { return err }
    if err := p.writeField81(oprot); err != nil { return err }
    if err := p.writeField82(oprot); err != nil { return err }
    if err := p.writeField83(oprot); err != nil { return err }
    if err := p.writeField85(oprot); err != nil { return err }
    if err := p.writeField86(oprot); err != nil { return err }
    if err := p.writeField87(oprot); err != nil { return err }
    if err := p.writeField88(oprot); err != nil { return err }
    if err := p.writeField89(oprot); err != nil { return err }
    if err := p.writeField90(oprot); err != nil { return err }
    if err := p.writeField91(oprot); err != nil { return err }
    if err := p.writeField92(oprot); err != nil { return err }
    if err := p.writeField93(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Settings) writeField10(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("notificationEnable", thrift.BOOL, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:notificationEnable: ", p), err) }
  if err := oprot.WriteBool(bool(p.NotificationEnable)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.notificationEnable (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:notificationEnable: ", p), err) }
  return err
}

func (p *Settings) writeField11(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("notificationMuteExpiration", thrift.BOOL, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:notificationMuteExpiration: ", p), err) }
  if err := oprot.WriteBool(bool(p.NotificationMuteExpiration)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.notificationMuteExpiration (11) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:notificationMuteExpiration: ", p), err) }
  return err
}

func (p *Settings) writeField12(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("notificationNewMessage", thrift.I64, 12); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:notificationNewMessage: ", p), err) }
  if err := oprot.WriteI64(int64(p.NotificationNewMessage)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.notificationNewMessage (12) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 12:notificationNewMessage: ", p), err) }
  return err
}

func (p *Settings) writeField13(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("notificationGroupInvitation", thrift.BOOL, 13); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:notificationGroupInvitation: ", p), err) }
  if err := oprot.WriteBool(bool(p.NotificationGroupInvitation)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.notificationGroupInvitation (13) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 13:notificationGroupInvitation: ", p), err) }
  return err
}

func (p *Settings) writeField14(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("notificationShowMessage", thrift.BOOL, 14); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:notificationShowMessage: ", p), err) }
  if err := oprot.WriteBool(bool(p.NotificationShowMessage)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.notificationShowMessage (14) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 14:notificationShowMessage: ", p), err) }
  return err
}

func (p *Settings) writeField15(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("notificationIncomingCall", thrift.BOOL, 15); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:notificationIncomingCall: ", p), err) }
  if err := oprot.WriteBool(bool(p.NotificationIncomingCall)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.notificationIncomingCall (15) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 15:notificationIncomingCall: ", p), err) }
  return err
}

func (p *Settings) writeField16(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("notificationSoundMessage", thrift.STRING, 16); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:notificationSoundMessage: ", p), err) }
  if err := oprot.WriteString(string(p.NotificationSoundMessage)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.notificationSoundMessage (16) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 16:notificationSoundMessage: ", p), err) }
  return err
}

func (p *Settings) writeField17(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("notificationSoundGroup", thrift.STRING, 17); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 17:notificationSoundGroup: ", p), err) }
  if err := oprot.WriteString(string(p.NotificationSoundGroup)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.notificationSoundGroup (17) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 17:notificationSoundGroup: ", p), err) }
  return err
}

func (p *Settings) writeField18(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("notificationDisabledWithSub", thrift.BOOL, 18); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 18:notificationDisabledWithSub: ", p), err) }
  if err := oprot.WriteBool(bool(p.NotificationDisabledWithSub)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.notificationDisabledWithSub (18) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 18:notificationDisabledWithSub: ", p), err) }
  return err
}

func (p *Settings) writeField19(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("notificationPayment", thrift.BOOL, 19); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 19:notificationPayment: ", p), err) }
  if err := oprot.WriteBool(bool(p.NotificationPayment)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.notificationPayment (19) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 19:notificationPayment: ", p), err) }
  return err
}

func (p *Settings) writeField20(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("privacySyncContacts", thrift.BOOL, 20); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:privacySyncContacts: ", p), err) }
  if err := oprot.WriteBool(bool(p.PrivacySyncContacts)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.privacySyncContacts (20) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 20:privacySyncContacts: ", p), err) }
  return err
}

func (p *Settings) writeField21(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("privacySearchByPhoneNumber", thrift.BOOL, 21); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 21:privacySearchByPhoneNumber: ", p), err) }
  if err := oprot.WriteBool(bool(p.PrivacySearchByPhoneNumber)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.privacySearchByPhoneNumber (21) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 21:privacySearchByPhoneNumber: ", p), err) }
  return err
}

func (p *Settings) writeField22(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("privacySearchByUserid", thrift.BOOL, 22); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 22:privacySearchByUserid: ", p), err) }
  if err := oprot.WriteBool(bool(p.PrivacySearchByUserid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.privacySearchByUserid (22) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 22:privacySearchByUserid: ", p), err) }
  return err
}

func (p *Settings) writeField23(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("privacySearchByEmail", thrift.BOOL, 23); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 23:privacySearchByEmail: ", p), err) }
  if err := oprot.WriteBool(bool(p.PrivacySearchByEmail)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.privacySearchByEmail (23) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 23:privacySearchByEmail: ", p), err) }
  return err
}

func (p *Settings) writeField24(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("privacyAllowSecondaryDeviceLogin", thrift.BOOL, 24); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 24:privacyAllowSecondaryDeviceLogin: ", p), err) }
  if err := oprot.WriteBool(bool(p.PrivacyAllowSecondaryDeviceLogin)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.privacyAllowSecondaryDeviceLogin (24) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 24:privacyAllowSecondaryDeviceLogin: ", p), err) }
  return err
}

func (p *Settings) writeField25(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("privacyProfileImagePostToMyhome", thrift.BOOL, 25); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 25:privacyProfileImagePostToMyhome: ", p), err) }
  if err := oprot.WriteBool(bool(p.PrivacyProfileImagePostToMyhome)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.privacyProfileImagePostToMyhome (25) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 25:privacyProfileImagePostToMyhome: ", p), err) }
  return err
}

func (p *Settings) writeField26(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("privacyReceiveMessagesFromNotFriend", thrift.BOOL, 26); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 26:privacyReceiveMessagesFromNotFriend: ", p), err) }
  if err := oprot.WriteBool(bool(p.PrivacyReceiveMessagesFromNotFriend)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.privacyReceiveMessagesFromNotFriend (26) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 26:privacyReceiveMessagesFromNotFriend: ", p), err) }
  return err
}

func (p *Settings) writeField27(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("privacyAgreeUseLineCoinToPaidCall", thrift.BOOL, 27); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 27:privacyAgreeUseLineCoinToPaidCall: ", p), err) }
  if err := oprot.WriteBool(bool(p.PrivacyAgreeUseLineCoinToPaidCall)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.privacyAgreeUseLineCoinToPaidCall (27) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 27:privacyAgreeUseLineCoinToPaidCall: ", p), err) }
  return err
}

func (p *Settings) writeField28(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("privacyAgreeUsePaidCall", thrift.BOOL, 28); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 28:privacyAgreeUsePaidCall: ", p), err) }
  if err := oprot.WriteBool(bool(p.PrivacyAgreeUsePaidCall)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.privacyAgreeUsePaidCall (28) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 28:privacyAgreeUsePaidCall: ", p), err) }
  return err
}

func (p *Settings) writeField29(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("privacyAllowFriendRequest", thrift.BOOL, 29); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 29:privacyAllowFriendRequest: ", p), err) }
  if err := oprot.WriteBool(bool(p.PrivacyAllowFriendRequest)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.privacyAllowFriendRequest (29) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 29:privacyAllowFriendRequest: ", p), err) }
  return err
}

func (p *Settings) writeField30(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("contactMyTicket", thrift.STRING, 30); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 30:contactMyTicket: ", p), err) }
  if err := oprot.WriteString(string(p.ContactMyTicket)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.contactMyTicket (30) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 30:contactMyTicket: ", p), err) }
  return err
}

func (p *Settings) writeField40(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("identityProvider", thrift.I32, 40); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 40:identityProvider: ", p), err) }
  if err := oprot.WriteI32(int32(p.IdentityProvider)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.identityProvider (40) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 40:identityProvider: ", p), err) }
  return err
}

func (p *Settings) writeField41(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("identityIdentifier", thrift.STRING, 41); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 41:identityIdentifier: ", p), err) }
  if err := oprot.WriteString(string(p.IdentityIdentifier)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.identityIdentifier (41) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 41:identityIdentifier: ", p), err) }
  return err
}

func (p *Settings) writeField42(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("snsAccounts", thrift.MAP, 42); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 42:snsAccounts: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.I32, thrift.STRING, len(p.SnsAccounts)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.SnsAccounts {
    if err := oprot.WriteI32(int32(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 42:snsAccounts: ", p), err) }
  return err
}

func (p *Settings) writeField43(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("phoneRegistration", thrift.BOOL, 43); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 43:phoneRegistration: ", p), err) }
  if err := oprot.WriteBool(bool(p.PhoneRegistration)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.phoneRegistration (43) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 43:phoneRegistration: ", p), err) }
  return err
}

func (p *Settings) writeField44(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("emailConfirmationStatus", thrift.I32, 44); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 44:emailConfirmationStatus: ", p), err) }
  if err := oprot.WriteI32(int32(p.EmailConfirmationStatus)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.emailConfirmationStatus (44) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 44:emailConfirmationStatus: ", p), err) }
  return err
}

func (p *Settings) writeField45(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("accountMigrationPincodeType", thrift.I32, 45); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 45:accountMigrationPincodeType: ", p), err) }
  if err := oprot.WriteI32(int32(p.AccountMigrationPincodeType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.accountMigrationPincodeType (45) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 45:accountMigrationPincodeType: ", p), err) }
  return err
}

func (p *Settings) writeField46(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("enforcedInputAccountMigrationPincode", thrift.BOOL, 46); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 46:enforcedInputAccountMigrationPincode: ", p), err) }
  if err := oprot.WriteBool(bool(p.EnforcedInputAccountMigrationPincode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.enforcedInputAccountMigrationPincode (46) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 46:enforcedInputAccountMigrationPincode: ", p), err) }
  return err
}

func (p *Settings) writeField47(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("securityCenterSettingsType", thrift.I32, 47); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 47:securityCenterSettingsType: ", p), err) }
  if err := oprot.WriteI32(int32(p.SecurityCenterSettingsType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.securityCenterSettingsType (47) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 47:securityCenterSettingsType: ", p), err) }
  return err
}

func (p *Settings) writeField48(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("allowUnregistrationSecondaryDevice", thrift.BOOL, 48); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 48:allowUnregistrationSecondaryDevice: ", p), err) }
  if err := oprot.WriteBool(bool(p.AllowUnregistrationSecondaryDevice)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.allowUnregistrationSecondaryDevice (48) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 48:allowUnregistrationSecondaryDevice: ", p), err) }
  return err
}

func (p *Settings) writeField50(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("preferenceLocale", thrift.STRING, 50); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 50:preferenceLocale: ", p), err) }
  if err := oprot.WriteString(string(p.PreferenceLocale)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.preferenceLocale (50) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 50:preferenceLocale: ", p), err) }
  return err
}

func (p *Settings) writeField60(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("customModes", thrift.MAP, 60); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 60:customModes: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.I32, thrift.STRING, len(p.CustomModes)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.CustomModes {
    if err := oprot.WriteI32(int32(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 60:customModes: ", p), err) }
  return err
}

func (p *Settings) writeField61(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("e2eeEnable", thrift.BOOL, 61); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 61:e2eeEnable: ", p), err) }
  if err := oprot.WriteBool(bool(p.E2eeEnable)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.e2eeEnable (61) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 61:e2eeEnable: ", p), err) }
  return err
}

func (p *Settings) writeField62(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("hitokotoBackupRequested", thrift.BOOL, 62); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 62:hitokotoBackupRequested: ", p), err) }
  if err := oprot.WriteBool(bool(p.HitokotoBackupRequested)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.hitokotoBackupRequested (62) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 62:hitokotoBackupRequested: ", p), err) }
  return err
}

func (p *Settings) writeField63(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("privacyProfileMusicPostToMyhome", thrift.BOOL, 63); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 63:privacyProfileMusicPostToMyhome: ", p), err) }
  if err := oprot.WriteBool(bool(p.PrivacyProfileMusicPostToMyhome)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.privacyProfileMusicPostToMyhome (63) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 63:privacyProfileMusicPostToMyhome: ", p), err) }
  return err
}

func (p *Settings) writeField65(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("privacyAllowNearby", thrift.BOOL, 65); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 65:privacyAllowNearby: ", p), err) }
  if err := oprot.WriteBool(bool(p.PrivacyAllowNearby)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.privacyAllowNearby (65) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 65:privacyAllowNearby: ", p), err) }
  return err
}

func (p *Settings) writeField66(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("agreementNearbyTime", thrift.BOOL, 66); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 66:agreementNearbyTime: ", p), err) }
  if err := oprot.WriteBool(bool(p.AgreementNearbyTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.agreementNearbyTime (66) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 66:agreementNearbyTime: ", p), err) }
  return err
}

func (p *Settings) writeField67(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("agreementSquareTime", thrift.I64, 67); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 67:agreementSquareTime: ", p), err) }
  if err := oprot.WriteI64(int64(p.AgreementSquareTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.agreementSquareTime (67) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 67:agreementSquareTime: ", p), err) }
  return err
}

func (p *Settings) writeField68(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("notificationMention", thrift.BOOL, 68); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 68:notificationMention: ", p), err) }
  if err := oprot.WriteBool(bool(p.NotificationMention)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.notificationMention (68) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 68:notificationMention: ", p), err) }
  return err
}

func (p *Settings) writeField69(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("botUseAgreementAcceptedAt", thrift.I64, 69); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 69:botUseAgreementAcceptedAt: ", p), err) }
  if err := oprot.WriteI64(int64(p.BotUseAgreementAcceptedAt)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.botUseAgreementAcceptedAt (69) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 69:botUseAgreementAcceptedAt: ", p), err) }
  return err
}

func (p *Settings) writeField70(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("agreementShakeFunction", thrift.I64, 70); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 70:agreementShakeFunction: ", p), err) }
  if err := oprot.WriteI64(int64(p.AgreementShakeFunction)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.agreementShakeFunction (70) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 70:agreementShakeFunction: ", p), err) }
  return err
}

func (p *Settings) writeField71(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("agreementMobileContactName", thrift.I64, 71); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 71:agreementMobileContactName: ", p), err) }
  if err := oprot.WriteI64(int64(p.AgreementMobileContactName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.agreementMobileContactName (71) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 71:agreementMobileContactName: ", p), err) }
  return err
}

func (p *Settings) writeField72(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("notificationThumbnail", thrift.BOOL, 72); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 72:notificationThumbnail: ", p), err) }
  if err := oprot.WriteBool(bool(p.NotificationThumbnail)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.notificationThumbnail (72) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 72:notificationThumbnail: ", p), err) }
  return err
}

func (p *Settings) writeField73(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("agreementSoundToText", thrift.I64, 73); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 73:agreementSoundToText: ", p), err) }
  if err := oprot.WriteI64(int64(p.AgreementSoundToText)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.agreementSoundToText (73) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 73:agreementSoundToText: ", p), err) }
  return err
}

func (p *Settings) writeField74(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("privacyPolicyVersion", thrift.STRING, 74); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 74:privacyPolicyVersion: ", p), err) }
  if err := oprot.WriteString(string(p.PrivacyPolicyVersion)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.privacyPolicyVersion (74) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 74:privacyPolicyVersion: ", p), err) }
  return err
}

func (p *Settings) writeField75(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("agreementAdByWebAccess", thrift.I64, 75); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 75:agreementAdByWebAccess: ", p), err) }
  if err := oprot.WriteI64(int64(p.AgreementAdByWebAccess)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.agreementAdByWebAccess (75) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 75:agreementAdByWebAccess: ", p), err) }
  return err
}

func (p *Settings) writeField76(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("agreementPhoneNumberMatching", thrift.I64, 76); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 76:agreementPhoneNumberMatching: ", p), err) }
  if err := oprot.WriteI64(int64(p.AgreementPhoneNumberMatching)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.agreementPhoneNumberMatching (76) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 76:agreementPhoneNumberMatching: ", p), err) }
  return err
}

func (p *Settings) writeField77(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("agreementCommunicationInfo", thrift.I64, 77); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 77:agreementCommunicationInfo: ", p), err) }
  if err := oprot.WriteI64(int64(p.AgreementCommunicationInfo)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.agreementCommunicationInfo (77) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 77:agreementCommunicationInfo: ", p), err) }
  return err
}

func (p *Settings) writeField78(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("privacySharePersonalInfoToFriends", thrift.I32, 78); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 78:privacySharePersonalInfoToFriends: ", p), err) }
  if err := oprot.WriteI32(int32(p.PrivacySharePersonalInfoToFriends)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.privacySharePersonalInfoToFriends (78) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 78:privacySharePersonalInfoToFriends: ", p), err) }
  return err
}

func (p *Settings) writeField79(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("agreementThingsWirelessCommunication", thrift.I64, 79); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 79:agreementThingsWirelessCommunication: ", p), err) }
  if err := oprot.WriteI64(int64(p.AgreementThingsWirelessCommunication)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.agreementThingsWirelessCommunication (79) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 79:agreementThingsWirelessCommunication: ", p), err) }
  return err
}

func (p *Settings) writeField80(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("agreementGdpr", thrift.I64, 80); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 80:agreementGdpr: ", p), err) }
  if err := oprot.WriteI64(int64(p.AgreementGdpr)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.agreementGdpr (80) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 80:agreementGdpr: ", p), err) }
  return err
}

func (p *Settings) writeField81(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("privacyStatusMessageHistory", thrift.I32, 81); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 81:privacyStatusMessageHistory: ", p), err) }
  if err := oprot.WriteI32(int32(p.PrivacyStatusMessageHistory)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.privacyStatusMessageHistory (81) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 81:privacyStatusMessageHistory: ", p), err) }
  return err
}

func (p *Settings) writeField82(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("agreementProvideLocation", thrift.I64, 82); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 82:agreementProvideLocation: ", p), err) }
  if err := oprot.WriteI64(int64(p.AgreementProvideLocation)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.agreementProvideLocation (82) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 82:agreementProvideLocation: ", p), err) }
  return err
}

func (p *Settings) writeField83(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("agreementBeacon", thrift.I64, 83); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 83:agreementBeacon: ", p), err) }
  if err := oprot.WriteI64(int64(p.AgreementBeacon)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.agreementBeacon (83) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 83:agreementBeacon: ", p), err) }
  return err
}

func (p *Settings) writeField85(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("privacyAllowProfileHistory", thrift.I32, 85); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 85:privacyAllowProfileHistory: ", p), err) }
  if err := oprot.WriteI32(int32(p.PrivacyAllowProfileHistory)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.privacyAllowProfileHistory (85) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 85:privacyAllowProfileHistory: ", p), err) }
  return err
}

func (p *Settings) writeField86(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("agreementContentsSuggest", thrift.I64, 86); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 86:agreementContentsSuggest: ", p), err) }
  if err := oprot.WriteI64(int64(p.AgreementContentsSuggest)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.agreementContentsSuggest (86) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 86:agreementContentsSuggest: ", p), err) }
  return err
}

func (p *Settings) writeField87(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("agreementContentsSuggestDataCollection", thrift.I64, 87); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 87:agreementContentsSuggestDataCollection: ", p), err) }
  if err := oprot.WriteI64(int64(p.AgreementContentsSuggestDataCollection)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.agreementContentsSuggestDataCollection (87) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 87:agreementContentsSuggestDataCollection: ", p), err) }
  return err
}

func (p *Settings) writeField88(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("privacyAgeResult", thrift.I32, 88); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 88:privacyAgeResult: ", p), err) }
  if err := oprot.WriteI32(int32(p.PrivacyAgeResult_)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.privacyAgeResult (88) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 88:privacyAgeResult: ", p), err) }
  return err
}

func (p *Settings) writeField89(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("privacyAgeResultReceived", thrift.BOOL, 89); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 89:privacyAgeResultReceived: ", p), err) }
  if err := oprot.WriteBool(bool(p.PrivacyAgeResultReceived)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.privacyAgeResultReceived (89) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 89:privacyAgeResultReceived: ", p), err) }
  return err
}

func (p *Settings) writeField90(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("agreementOcrImageCollection", thrift.I64, 90); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 90:agreementOcrImageCollection: ", p), err) }
  if err := oprot.WriteI64(int64(p.AgreementOcrImageCollection)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.agreementOcrImageCollection (90) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 90:agreementOcrImageCollection: ", p), err) }
  return err
}

func (p *Settings) writeField91(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("privacyAllowFollow", thrift.BOOL, 91); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 91:privacyAllowFollow: ", p), err) }
  if err := oprot.WriteBool(bool(p.PrivacyAllowFollow)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.privacyAllowFollow (91) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 91:privacyAllowFollow: ", p), err) }
  return err
}

func (p *Settings) writeField92(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("privacyShowFollowList", thrift.BOOL, 92); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 92:privacyShowFollowList: ", p), err) }
  if err := oprot.WriteBool(bool(p.PrivacyShowFollowList)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.privacyShowFollowList (92) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 92:privacyShowFollowList: ", p), err) }
  return err
}

func (p *Settings) writeField93(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("notificationBadgeTalkOnly", thrift.BOOL, 93); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 93:notificationBadgeTalkOnly: ", p), err) }
  if err := oprot.WriteBool(bool(p.NotificationBadgeTalkOnly)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.notificationBadgeTalkOnly (93) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 93:notificationBadgeTalkOnly: ", p), err) }
  return err
}

func (p *Settings) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Settings(%+v)", *p)
}

// Attributes:
//  - URL
//  - Checksum
type ChatEffectMetaContent struct {
  URL string `thrift:"url,1" db:"url" json:"url"`
  Checksum string `thrift:"checksum,2" db:"checksum" json:"checksum"`
}

func NewChatEffectMetaContent() *ChatEffectMetaContent {
  return &ChatEffectMetaContent{}
}


func (p *ChatEffectMetaContent) GetURL() string {
  return p.URL
}

func (p *ChatEffectMetaContent) GetChecksum() string {
  return p.Checksum
}
func (p *ChatEffectMetaContent) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ChatEffectMetaContent)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.URL = v
}
  return nil
}

func (p *ChatEffectMetaContent)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Checksum = v
}
  return nil
}

func (p *ChatEffectMetaContent) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ChatEffectMetaContent"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ChatEffectMetaContent) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("url", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:url: ", p), err) }
  if err := oprot.WriteString(string(p.URL)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.url (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:url: ", p), err) }
  return err
}

func (p *ChatEffectMetaContent) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("checksum", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:checksum: ", p), err) }
  if err := oprot.WriteString(string(p.Checksum)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.checksum (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:checksum: ", p), err) }
  return err
}

func (p *ChatEffectMetaContent) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ChatEffectMetaContent(%+v)", *p)
}

// Attributes:
//  - ID
//  - Name
type Category struct {
  ID int32 `thrift:"id,1" db:"id" json:"id"`
  Name int32 `thrift:"name,2" db:"name" json:"name"`
}

func NewCategory() *Category {
  return &Category{}
}


func (p *Category) GetID() int32 {
  return p.ID
}

func (p *Category) GetName() int32 {
  return p.Name
}
func (p *Category) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Category)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *Category)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *Category) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Category"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Category) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := oprot.WriteI32(int32(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *Category) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("name", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:name: ", p), err) }
  if err := oprot.WriteI32(int32(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:name: ", p), err) }
  return err
}

func (p *Category) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Category(%+v)", *p)
}

// Attributes:
//  - ContentId
//  - Category
//  - Name
//  - DefaultContent
//  - OptionalContents
//  - Keywords
//  - BeginTimeMillis
//  - EndTimeMillis
//  - CreatedTimeMillis
//  - UpdatedTimeMillis
type ChatEffectMeta struct {
  ContentId int64 `thrift:"contentId,1" db:"contentId" json:"contentId"`
  Category *Category `thrift:"category,2" db:"category" json:"category"`
  Name int32 `thrift:"name,3" db:"name" json:"name"`
  DefaultContent *ChatEffectMetaContent `thrift:"defaultContent,4" db:"defaultContent" json:"defaultContent"`
  OptionalContents map[C59265fa]*ChatEffectMetaContent `thrift:"optionalContents,5" db:"optionalContents" json:"optionalContents"`
  Keywords []string `thrift:"keywords,6" db:"keywords" json:"keywords"`
  BeginTimeMillis int64 `thrift:"beginTimeMillis,7" db:"beginTimeMillis" json:"beginTimeMillis"`
  EndTimeMillis int64 `thrift:"endTimeMillis,8" db:"endTimeMillis" json:"endTimeMillis"`
  CreatedTimeMillis int64 `thrift:"createdTimeMillis,9" db:"createdTimeMillis" json:"createdTimeMillis"`
  UpdatedTimeMillis int64 `thrift:"updatedTimeMillis,10" db:"updatedTimeMillis" json:"updatedTimeMillis"`
}

func NewChatEffectMeta() *ChatEffectMeta {
  return &ChatEffectMeta{}
}


func (p *ChatEffectMeta) GetContentId() int64 {
  return p.ContentId
}
var ChatEffectMeta_Category_DEFAULT *Category
func (p *ChatEffectMeta) GetCategory() *Category {
  if !p.IsSetCategory() {
    return ChatEffectMeta_Category_DEFAULT
  }
return p.Category
}

func (p *ChatEffectMeta) GetName() int32 {
  return p.Name
}
var ChatEffectMeta_DefaultContent_DEFAULT *ChatEffectMetaContent
func (p *ChatEffectMeta) GetDefaultContent() *ChatEffectMetaContent {
  if !p.IsSetDefaultContent() {
    return ChatEffectMeta_DefaultContent_DEFAULT
  }
return p.DefaultContent
}

func (p *ChatEffectMeta) GetOptionalContents() map[C59265fa]*ChatEffectMetaContent {
  return p.OptionalContents
}

func (p *ChatEffectMeta) GetKeywords() []string {
  return p.Keywords
}

func (p *ChatEffectMeta) GetBeginTimeMillis() int64 {
  return p.BeginTimeMillis
}

func (p *ChatEffectMeta) GetEndTimeMillis() int64 {
  return p.EndTimeMillis
}

func (p *ChatEffectMeta) GetCreatedTimeMillis() int64 {
  return p.CreatedTimeMillis
}

func (p *ChatEffectMeta) GetUpdatedTimeMillis() int64 {
  return p.UpdatedTimeMillis
}
func (p *ChatEffectMeta) IsSetCategory() bool {
  return p.Category != nil
}

func (p *ChatEffectMeta) IsSetDefaultContent() bool {
  return p.DefaultContent != nil
}

func (p *ChatEffectMeta) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.SET {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField9(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField10(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ChatEffectMeta)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ContentId = v
}
  return nil
}

func (p *ChatEffectMeta)  ReadField2(iprot thrift.TProtocol) error {
  p.Category = &Category{}
  if err := p.Category.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Category), err)
  }
  return nil
}

func (p *ChatEffectMeta)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *ChatEffectMeta)  ReadField4(iprot thrift.TProtocol) error {
  p.DefaultContent = &ChatEffectMetaContent{}
  if err := p.DefaultContent.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.DefaultContent), err)
  }
  return nil
}

func (p *ChatEffectMeta)  ReadField5(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[C59265fa]*ChatEffectMetaContent, size)
  p.OptionalContents =  tMap
  for i := 0; i < size; i ++ {
var _key24 C59265fa
    if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := C59265fa(v)
    _key24 = temp
}
    _val25 := &ChatEffectMetaContent{}
    if err := _val25.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val25), err)
    }
    p.OptionalContents[_key24] = _val25
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *ChatEffectMeta)  ReadField6(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadSetBegin()
  if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
  }
  tSet := make([]string, 0, size)
  p.Keywords =  tSet
  for i := 0; i < size; i ++ {
var _elem26 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem26 = v
}
    p.Keywords = append(p.Keywords, _elem26)
  }
  if err := iprot.ReadSetEnd(); err != nil {
    return thrift.PrependError("error reading set end: ", err)
  }
  return nil
}

func (p *ChatEffectMeta)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.BeginTimeMillis = v
}
  return nil
}

func (p *ChatEffectMeta)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.EndTimeMillis = v
}
  return nil
}

func (p *ChatEffectMeta)  ReadField9(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.CreatedTimeMillis = v
}
  return nil
}

func (p *ChatEffectMeta)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.UpdatedTimeMillis = v
}
  return nil
}

func (p *ChatEffectMeta) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ChatEffectMeta"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ChatEffectMeta) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("contentId", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:contentId: ", p), err) }
  if err := oprot.WriteI64(int64(p.ContentId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.contentId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:contentId: ", p), err) }
  return err
}

func (p *ChatEffectMeta) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("category", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:category: ", p), err) }
  if err := p.Category.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Category), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:category: ", p), err) }
  return err
}

func (p *ChatEffectMeta) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("name", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:name: ", p), err) }
  if err := oprot.WriteI32(int32(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:name: ", p), err) }
  return err
}

func (p *ChatEffectMeta) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("defaultContent", thrift.STRUCT, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:defaultContent: ", p), err) }
  if err := p.DefaultContent.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.DefaultContent), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:defaultContent: ", p), err) }
  return err
}

func (p *ChatEffectMeta) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("optionalContents", thrift.MAP, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:optionalContents: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.I32, thrift.STRUCT, len(p.OptionalContents)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.OptionalContents {
    if err := oprot.WriteI32(int32(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:optionalContents: ", p), err) }
  return err
}

func (p *ChatEffectMeta) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("keywords", thrift.SET, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:keywords: ", p), err) }
  if err := oprot.WriteSetBegin(thrift.STRING, len(p.Keywords)); err != nil {
    return thrift.PrependError("error writing set begin: ", err)
  }
  for i := 0; i<len(p.Keywords); i++ {
    for j := i+1; j<len(p.Keywords); j++ {
      if reflect.DeepEqual(p.Keywords[i],p.Keywords[j]) { 
        return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", p.Keywords[i]))
      }
    }
  }
  for _, v := range p.Keywords {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteSetEnd(); err != nil {
    return thrift.PrependError("error writing set end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:keywords: ", p), err) }
  return err
}

func (p *ChatEffectMeta) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("beginTimeMillis", thrift.I64, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:beginTimeMillis: ", p), err) }
  if err := oprot.WriteI64(int64(p.BeginTimeMillis)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.beginTimeMillis (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:beginTimeMillis: ", p), err) }
  return err
}

func (p *ChatEffectMeta) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("endTimeMillis", thrift.I64, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:endTimeMillis: ", p), err) }
  if err := oprot.WriteI64(int64(p.EndTimeMillis)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.endTimeMillis (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:endTimeMillis: ", p), err) }
  return err
}

func (p *ChatEffectMeta) writeField9(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("createdTimeMillis", thrift.I64, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:createdTimeMillis: ", p), err) }
  if err := oprot.WriteI64(int64(p.CreatedTimeMillis)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.createdTimeMillis (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:createdTimeMillis: ", p), err) }
  return err
}

func (p *ChatEffectMeta) writeField10(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("updatedTimeMillis", thrift.I64, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:updatedTimeMillis: ", p), err) }
  if err := oprot.WriteI64(int64(p.UpdatedTimeMillis)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.updatedTimeMillis (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:updatedTimeMillis: ", p), err) }
  return err
}

func (p *ChatEffectMeta) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ChatEffectMeta(%+v)", *p)
}

// Attributes:
//  - GaSamplingRate
//  - Tmid
type AnalyticsInfo struct {
  GaSamplingRate float64 `thrift:"gaSamplingRate,1" db:"gaSamplingRate" json:"gaSamplingRate"`
  Tmid string `thrift:"tmid,2" db:"tmid" json:"tmid"`
}

func NewAnalyticsInfo() *AnalyticsInfo {
  return &AnalyticsInfo{}
}


func (p *AnalyticsInfo) GetGaSamplingRate() float64 {
  return p.GaSamplingRate
}

func (p *AnalyticsInfo) GetTmid() string {
  return p.Tmid
}
func (p *AnalyticsInfo) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AnalyticsInfo)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.GaSamplingRate = v
}
  return nil
}

func (p *AnalyticsInfo)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Tmid = v
}
  return nil
}

func (p *AnalyticsInfo) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("AnalyticsInfo"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AnalyticsInfo) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("gaSamplingRate", thrift.DOUBLE, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:gaSamplingRate: ", p), err) }
  if err := oprot.WriteDouble(float64(p.GaSamplingRate)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.gaSamplingRate (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:gaSamplingRate: ", p), err) }
  return err
}

func (p *AnalyticsInfo) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("tmid", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tmid: ", p), err) }
  if err := oprot.WriteString(string(p.Tmid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tmid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tmid: ", p), err) }
  return err
}

func (p *AnalyticsInfo) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AnalyticsInfo(%+v)", *p)
}

// Attributes:
//  - EMid
//  - Mid
//  - Direction
//  - Method
//  - Param
//  - Timestamp
//  - SeqId
//  - DisplayName
//  - PicturePath
//  - PictureStatus
type FriendRequest struct {
  EMid string `thrift:"eMid,1" db:"eMid" json:"eMid"`
  Mid string `thrift:"mid,2" db:"mid" json:"mid"`
  Direction Direction `thrift:"direction,3" db:"direction" json:"direction"`
  Method FriendRequestMethod `thrift:"method,4" db:"method" json:"method"`
  Param string `thrift:"param,5" db:"param" json:"param"`
  Timestamp int64 `thrift:"timestamp,6" db:"timestamp" json:"timestamp"`
  SeqId int64 `thrift:"seqId,7" db:"seqId" json:"seqId"`
  // unused fields # 8 to 9
  DisplayName string `thrift:"displayName,10" db:"displayName" json:"displayName"`
  PicturePath string `thrift:"picturePath,11" db:"picturePath" json:"picturePath"`
  PictureStatus string `thrift:"pictureStatus,12" db:"pictureStatus" json:"pictureStatus"`
}

func NewFriendRequest() *FriendRequest {
  return &FriendRequest{}
}


func (p *FriendRequest) GetEMid() string {
  return p.EMid
}

func (p *FriendRequest) GetMid() string {
  return p.Mid
}

func (p *FriendRequest) GetDirection() Direction {
  return p.Direction
}

func (p *FriendRequest) GetMethod() FriendRequestMethod {
  return p.Method
}

func (p *FriendRequest) GetParam() string {
  return p.Param
}

func (p *FriendRequest) GetTimestamp() int64 {
  return p.Timestamp
}

func (p *FriendRequest) GetSeqId() int64 {
  return p.SeqId
}

func (p *FriendRequest) GetDisplayName() string {
  return p.DisplayName
}

func (p *FriendRequest) GetPicturePath() string {
  return p.PicturePath
}

func (p *FriendRequest) GetPictureStatus() string {
  return p.PictureStatus
}
func (p *FriendRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField10(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField11(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField12(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *FriendRequest)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.EMid = v
}
  return nil
}

func (p *FriendRequest)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Mid = v
}
  return nil
}

func (p *FriendRequest)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := Direction(v)
  p.Direction = temp
}
  return nil
}

func (p *FriendRequest)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  temp := FriendRequestMethod(v)
  p.Method = temp
}
  return nil
}

func (p *FriendRequest)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Param = v
}
  return nil
}

func (p *FriendRequest)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.Timestamp = v
}
  return nil
}

func (p *FriendRequest)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.SeqId = v
}
  return nil
}

func (p *FriendRequest)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.DisplayName = v
}
  return nil
}

func (p *FriendRequest)  ReadField11(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.PicturePath = v
}
  return nil
}

func (p *FriendRequest)  ReadField12(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  p.PictureStatus = v
}
  return nil
}

func (p *FriendRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("FriendRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField11(oprot); err != nil { return err }
    if err := p.writeField12(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *FriendRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("eMid", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:eMid: ", p), err) }
  if err := oprot.WriteString(string(p.EMid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.eMid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:eMid: ", p), err) }
  return err
}

func (p *FriendRequest) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("mid", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:mid: ", p), err) }
  if err := oprot.WriteString(string(p.Mid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.mid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:mid: ", p), err) }
  return err
}

func (p *FriendRequest) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("direction", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:direction: ", p), err) }
  if err := oprot.WriteI32(int32(p.Direction)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.direction (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:direction: ", p), err) }
  return err
}

func (p *FriendRequest) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("method", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:method: ", p), err) }
  if err := oprot.WriteI32(int32(p.Method)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.method (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:method: ", p), err) }
  return err
}

func (p *FriendRequest) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("param", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:param: ", p), err) }
  if err := oprot.WriteString(string(p.Param)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.param (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:param: ", p), err) }
  return err
}

func (p *FriendRequest) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("timestamp", thrift.I64, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:timestamp: ", p), err) }
  if err := oprot.WriteI64(int64(p.Timestamp)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.timestamp (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:timestamp: ", p), err) }
  return err
}

func (p *FriendRequest) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("seqId", thrift.I64, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:seqId: ", p), err) }
  if err := oprot.WriteI64(int64(p.SeqId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.seqId (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:seqId: ", p), err) }
  return err
}

func (p *FriendRequest) writeField10(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("displayName", thrift.STRING, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:displayName: ", p), err) }
  if err := oprot.WriteString(string(p.DisplayName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.displayName (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:displayName: ", p), err) }
  return err
}

func (p *FriendRequest) writeField11(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("picturePath", thrift.STRING, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:picturePath: ", p), err) }
  if err := oprot.WriteString(string(p.PicturePath)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.picturePath (11) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:picturePath: ", p), err) }
  return err
}

func (p *FriendRequest) writeField12(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("pictureStatus", thrift.STRING, 12); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:pictureStatus: ", p), err) }
  if err := oprot.WriteString(string(p.PictureStatus)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.pictureStatus (12) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 12:pictureStatus: ", p), err) }
  return err
}

func (p *FriendRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("FriendRequest(%+v)", *p)
}

// Attributes:
//  - TotalIncomingCount
//  - TotalOutgoingCount
//  - RecentIncomings
//  - RecentOutgoings
//  - TotalIncomingLimit
//  - TotalOutgoingLimit
type FriendRequestsInfo struct {
  TotalIncomingCount int32 `thrift:"totalIncomingCount,1" db:"totalIncomingCount" json:"totalIncomingCount"`
  TotalOutgoingCount int32 `thrift:"totalOutgoingCount,2" db:"totalOutgoingCount" json:"totalOutgoingCount"`
  RecentIncomings []*FriendRequest `thrift:"recentIncomings,3" db:"recentIncomings" json:"recentIncomings"`
  RecentOutgoings []*FriendRequest `thrift:"recentOutgoings,4" db:"recentOutgoings" json:"recentOutgoings"`
  TotalIncomingLimit int32 `thrift:"totalIncomingLimit,5" db:"totalIncomingLimit" json:"totalIncomingLimit"`
  TotalOutgoingLimit int32 `thrift:"totalOutgoingLimit,6" db:"totalOutgoingLimit" json:"totalOutgoingLimit"`
}

func NewFriendRequestsInfo() *FriendRequestsInfo {
  return &FriendRequestsInfo{}
}


func (p *FriendRequestsInfo) GetTotalIncomingCount() int32 {
  return p.TotalIncomingCount
}

func (p *FriendRequestsInfo) GetTotalOutgoingCount() int32 {
  return p.TotalOutgoingCount
}

func (p *FriendRequestsInfo) GetRecentIncomings() []*FriendRequest {
  return p.RecentIncomings
}

func (p *FriendRequestsInfo) GetRecentOutgoings() []*FriendRequest {
  return p.RecentOutgoings
}

func (p *FriendRequestsInfo) GetTotalIncomingLimit() int32 {
  return p.TotalIncomingLimit
}

func (p *FriendRequestsInfo) GetTotalOutgoingLimit() int32 {
  return p.TotalOutgoingLimit
}
func (p *FriendRequestsInfo) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *FriendRequestsInfo)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TotalIncomingCount = v
}
  return nil
}

func (p *FriendRequestsInfo)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TotalOutgoingCount = v
}
  return nil
}

func (p *FriendRequestsInfo)  ReadField3(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*FriendRequest, 0, size)
  p.RecentIncomings =  tSlice
  for i := 0; i < size; i ++ {
    _elem27 := &FriendRequest{}
    if err := _elem27.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem27), err)
    }
    p.RecentIncomings = append(p.RecentIncomings, _elem27)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *FriendRequestsInfo)  ReadField4(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*FriendRequest, 0, size)
  p.RecentOutgoings =  tSlice
  for i := 0; i < size; i ++ {
    _elem28 := &FriendRequest{}
    if err := _elem28.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem28), err)
    }
    p.RecentOutgoings = append(p.RecentOutgoings, _elem28)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *FriendRequestsInfo)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.TotalIncomingLimit = v
}
  return nil
}

func (p *FriendRequestsInfo)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.TotalOutgoingLimit = v
}
  return nil
}

func (p *FriendRequestsInfo) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("FriendRequestsInfo"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *FriendRequestsInfo) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("totalIncomingCount", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:totalIncomingCount: ", p), err) }
  if err := oprot.WriteI32(int32(p.TotalIncomingCount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.totalIncomingCount (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:totalIncomingCount: ", p), err) }
  return err
}

func (p *FriendRequestsInfo) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("totalOutgoingCount", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:totalOutgoingCount: ", p), err) }
  if err := oprot.WriteI32(int32(p.TotalOutgoingCount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.totalOutgoingCount (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:totalOutgoingCount: ", p), err) }
  return err
}

func (p *FriendRequestsInfo) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("recentIncomings", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:recentIncomings: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.RecentIncomings)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.RecentIncomings {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:recentIncomings: ", p), err) }
  return err
}

func (p *FriendRequestsInfo) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("recentOutgoings", thrift.LIST, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:recentOutgoings: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.RecentOutgoings)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.RecentOutgoings {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:recentOutgoings: ", p), err) }
  return err
}

func (p *FriendRequestsInfo) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("totalIncomingLimit", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:totalIncomingLimit: ", p), err) }
  if err := oprot.WriteI32(int32(p.TotalIncomingLimit)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.totalIncomingLimit (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:totalIncomingLimit: ", p), err) }
  return err
}

func (p *FriendRequestsInfo) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("totalOutgoingLimit", thrift.I32, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:totalOutgoingLimit: ", p), err) }
  if err := oprot.WriteI32(int32(p.TotalOutgoingLimit)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.totalOutgoingLimit (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:totalOutgoingLimit: ", p), err) }
  return err
}

func (p *FriendRequestsInfo) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("FriendRequestsInfo(%+v)", *p)
}

// Attributes:
//  - ChatMids
//  - WithMembers
//  - WithInvitees
type GetChatsRequest struct {
  ChatMids []string `thrift:"chatMids,1" db:"chatMids" json:"chatMids"`
  WithMembers bool `thrift:"withMembers,2" db:"withMembers" json:"withMembers"`
  WithInvitees bool `thrift:"withInvitees,3" db:"withInvitees" json:"withInvitees"`
}

func NewGetChatsRequest() *GetChatsRequest {
  return &GetChatsRequest{}
}


func (p *GetChatsRequest) GetChatMids() []string {
  return p.ChatMids
}

func (p *GetChatsRequest) GetWithMembers() bool {
  return p.WithMembers
}

func (p *GetChatsRequest) GetWithInvitees() bool {
  return p.WithInvitees
}
func (p *GetChatsRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetChatsRequest)  ReadField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.ChatMids =  tSlice
  for i := 0; i < size; i ++ {
var _elem29 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem29 = v
}
    p.ChatMids = append(p.ChatMids, _elem29)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *GetChatsRequest)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.WithMembers = v
}
  return nil
}

func (p *GetChatsRequest)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.WithInvitees = v
}
  return nil
}

func (p *GetChatsRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetChatsRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetChatsRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("chatMids", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:chatMids: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.ChatMids)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.ChatMids {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:chatMids: ", p), err) }
  return err
}

func (p *GetChatsRequest) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("withMembers", thrift.BOOL, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:withMembers: ", p), err) }
  if err := oprot.WriteBool(bool(p.WithMembers)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.withMembers (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:withMembers: ", p), err) }
  return err
}

func (p *GetChatsRequest) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("withInvitees", thrift.BOOL, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:withInvitees: ", p), err) }
  if err := oprot.WriteBool(bool(p.WithInvitees)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.withInvitees (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:withInvitees: ", p), err) }
  return err
}

func (p *GetChatsRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetChatsRequest(%+v)", *p)
}

// Attributes:
//  - Title
//  - Artist
//  - Oid
//  - ChannelId
type Ringtone struct {
  Title string `thrift:"title,1" db:"title" json:"title"`
  Artist string `thrift:"artist,2" db:"artist" json:"artist"`
  Oid string `thrift:"oid,3" db:"oid" json:"oid"`
  ChannelId string `thrift:"channelId,4" db:"channelId" json:"channelId"`
}

func NewRingtone() *Ringtone {
  return &Ringtone{}
}


func (p *Ringtone) GetTitle() string {
  return p.Title
}

func (p *Ringtone) GetArtist() string {
  return p.Artist
}

func (p *Ringtone) GetOid() string {
  return p.Oid
}

func (p *Ringtone) GetChannelId() string {
  return p.ChannelId
}
func (p *Ringtone) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Ringtone)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Title = v
}
  return nil
}

func (p *Ringtone)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Artist = v
}
  return nil
}

func (p *Ringtone)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Oid = v
}
  return nil
}

func (p *Ringtone)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.ChannelId = v
}
  return nil
}

func (p *Ringtone) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Ringtone"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Ringtone) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("title", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:title: ", p), err) }
  if err := oprot.WriteString(string(p.Title)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.title (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:title: ", p), err) }
  return err
}

func (p *Ringtone) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("artist", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:artist: ", p), err) }
  if err := oprot.WriteString(string(p.Artist)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.artist (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:artist: ", p), err) }
  return err
}

func (p *Ringtone) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("oid", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:oid: ", p), err) }
  if err := oprot.WriteString(string(p.Oid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.oid (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:oid: ", p), err) }
  return err
}

func (p *Ringtone) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("channelId", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:channelId: ", p), err) }
  if err := oprot.WriteString(string(p.ChannelId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.channelId (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:channelId: ", p), err) }
  return err
}

func (p *Ringtone) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Ringtone(%+v)", *p)
}

// Attributes:
//  - AllowedTypes
//  - PublicKey
//  - SpecVersion
type E2EENegotiationResult_ struct {
  AllowedTypes []C61914vb `thrift:"allowedTypes,1" db:"allowedTypes" json:"allowedTypes"`
  PublicKey *E2EEPublicKey `thrift:"publicKey,2" db:"publicKey" json:"publicKey"`
  SpecVersion int32 `thrift:"specVersion,3" db:"specVersion" json:"specVersion"`
}

func NewE2EENegotiationResult_() *E2EENegotiationResult_ {
  return &E2EENegotiationResult_{}
}


func (p *E2EENegotiationResult_) GetAllowedTypes() []C61914vb {
  return p.AllowedTypes
}
var E2EENegotiationResult__PublicKey_DEFAULT *E2EEPublicKey
func (p *E2EENegotiationResult_) GetPublicKey() *E2EEPublicKey {
  if !p.IsSetPublicKey() {
    return E2EENegotiationResult__PublicKey_DEFAULT
  }
return p.PublicKey
}

func (p *E2EENegotiationResult_) GetSpecVersion() int32 {
  return p.SpecVersion
}
func (p *E2EENegotiationResult_) IsSetPublicKey() bool {
  return p.PublicKey != nil
}

func (p *E2EENegotiationResult_) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.SET {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *E2EENegotiationResult_)  ReadField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadSetBegin()
  if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
  }
  tSet := make([]C61914vb, 0, size)
  p.AllowedTypes =  tSet
  for i := 0; i < size; i ++ {
var _elem30 C61914vb
    if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := C61914vb(v)
    _elem30 = temp
}
    p.AllowedTypes = append(p.AllowedTypes, _elem30)
  }
  if err := iprot.ReadSetEnd(); err != nil {
    return thrift.PrependError("error reading set end: ", err)
  }
  return nil
}

func (p *E2EENegotiationResult_)  ReadField2(iprot thrift.TProtocol) error {
  p.PublicKey = &E2EEPublicKey{}
  if err := p.PublicKey.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.PublicKey), err)
  }
  return nil
}

func (p *E2EENegotiationResult_)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.SpecVersion = v
}
  return nil
}

func (p *E2EENegotiationResult_) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("E2EENegotiationResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *E2EENegotiationResult_) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("allowedTypes", thrift.SET, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:allowedTypes: ", p), err) }
  if err := oprot.WriteSetBegin(thrift.I32, len(p.AllowedTypes)); err != nil {
    return thrift.PrependError("error writing set begin: ", err)
  }
  for i := 0; i<len(p.AllowedTypes); i++ {
    for j := i+1; j<len(p.AllowedTypes); j++ {
      if reflect.DeepEqual(p.AllowedTypes[i],p.AllowedTypes[j]) { 
        return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", p.AllowedTypes[i]))
      }
    }
  }
  for _, v := range p.AllowedTypes {
    if err := oprot.WriteI32(int32(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteSetEnd(); err != nil {
    return thrift.PrependError("error writing set end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:allowedTypes: ", p), err) }
  return err
}

func (p *E2EENegotiationResult_) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("publicKey", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:publicKey: ", p), err) }
  if err := p.PublicKey.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.PublicKey), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:publicKey: ", p), err) }
  return err
}

func (p *E2EENegotiationResult_) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("specVersion", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:specVersion: ", p), err) }
  if err := oprot.WriteI32(int32(p.SpecVersion)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.specVersion (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:specVersion: ", p), err) }
  return err
}

func (p *E2EENegotiationResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("E2EENegotiationResult_(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - ChatMid
//  - TargetUserMids
type DeleteOtherFromChatRequest struct {
  ReqSeq int32 `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
  ChatMid string `thrift:"chatMid,2" db:"chatMid" json:"chatMid"`
  TargetUserMids []string `thrift:"targetUserMids,3" db:"targetUserMids" json:"targetUserMids"`
}

func NewDeleteOtherFromChatRequest() *DeleteOtherFromChatRequest {
  return &DeleteOtherFromChatRequest{}
}


func (p *DeleteOtherFromChatRequest) GetReqSeq() int32 {
  return p.ReqSeq
}

func (p *DeleteOtherFromChatRequest) GetChatMid() string {
  return p.ChatMid
}

func (p *DeleteOtherFromChatRequest) GetTargetUserMids() []string {
  return p.TargetUserMids
}
func (p *DeleteOtherFromChatRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.SET {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DeleteOtherFromChatRequest)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqSeq = v
}
  return nil
}

func (p *DeleteOtherFromChatRequest)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ChatMid = v
}
  return nil
}

func (p *DeleteOtherFromChatRequest)  ReadField3(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadSetBegin()
  if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
  }
  tSet := make([]string, 0, size)
  p.TargetUserMids =  tSet
  for i := 0; i < size; i ++ {
var _elem31 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem31 = v
}
    p.TargetUserMids = append(p.TargetUserMids, _elem31)
  }
  if err := iprot.ReadSetEnd(); err != nil {
    return thrift.PrependError("error reading set end: ", err)
  }
  return nil
}

func (p *DeleteOtherFromChatRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("DeleteOtherFromChatRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DeleteOtherFromChatRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("reqSeq", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err) }
  if err := oprot.WriteI32(int32(p.ReqSeq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err) }
  return err
}

func (p *DeleteOtherFromChatRequest) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("chatMid", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:chatMid: ", p), err) }
  if err := oprot.WriteString(string(p.ChatMid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.chatMid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:chatMid: ", p), err) }
  return err
}

func (p *DeleteOtherFromChatRequest) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("targetUserMids", thrift.SET, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:targetUserMids: ", p), err) }
  if err := oprot.WriteSetBegin(thrift.STRING, len(p.TargetUserMids)); err != nil {
    return thrift.PrependError("error writing set begin: ", err)
  }
  for i := 0; i<len(p.TargetUserMids); i++ {
    for j := i+1; j<len(p.TargetUserMids); j++ {
      if reflect.DeepEqual(p.TargetUserMids[i],p.TargetUserMids[j]) { 
        return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", p.TargetUserMids[i]))
      }
    }
  }
  for _, v := range p.TargetUserMids {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteSetEnd(); err != nil {
    return thrift.PrependError("error writing set end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:targetUserMids: ", p), err) }
  return err
}

func (p *DeleteOtherFromChatRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DeleteOtherFromChatRequest(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - ChatMid
//  - TargetUserMids
type InviteIntoChatRequest struct {
  ReqSeq int32 `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
  ChatMid string `thrift:"chatMid,2" db:"chatMid" json:"chatMid"`
  TargetUserMids []string `thrift:"targetUserMids,3" db:"targetUserMids" json:"targetUserMids"`
}

func NewInviteIntoChatRequest() *InviteIntoChatRequest {
  return &InviteIntoChatRequest{}
}


func (p *InviteIntoChatRequest) GetReqSeq() int32 {
  return p.ReqSeq
}

func (p *InviteIntoChatRequest) GetChatMid() string {
  return p.ChatMid
}

func (p *InviteIntoChatRequest) GetTargetUserMids() []string {
  return p.TargetUserMids
}
func (p *InviteIntoChatRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.SET {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *InviteIntoChatRequest)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqSeq = v
}
  return nil
}

func (p *InviteIntoChatRequest)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ChatMid = v
}
  return nil
}

func (p *InviteIntoChatRequest)  ReadField3(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadSetBegin()
  if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
  }
  tSet := make([]string, 0, size)
  p.TargetUserMids =  tSet
  for i := 0; i < size; i ++ {
var _elem32 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem32 = v
}
    p.TargetUserMids = append(p.TargetUserMids, _elem32)
  }
  if err := iprot.ReadSetEnd(); err != nil {
    return thrift.PrependError("error reading set end: ", err)
  }
  return nil
}

func (p *InviteIntoChatRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("InviteIntoChatRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *InviteIntoChatRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("reqSeq", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err) }
  if err := oprot.WriteI32(int32(p.ReqSeq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err) }
  return err
}

func (p *InviteIntoChatRequest) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("chatMid", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:chatMid: ", p), err) }
  if err := oprot.WriteString(string(p.ChatMid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.chatMid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:chatMid: ", p), err) }
  return err
}

func (p *InviteIntoChatRequest) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("targetUserMids", thrift.SET, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:targetUserMids: ", p), err) }
  if err := oprot.WriteSetBegin(thrift.STRING, len(p.TargetUserMids)); err != nil {
    return thrift.PrependError("error writing set begin: ", err)
  }
  for i := 0; i<len(p.TargetUserMids); i++ {
    for j := i+1; j<len(p.TargetUserMids); j++ {
      if reflect.DeepEqual(p.TargetUserMids[i],p.TargetUserMids[j]) { 
        return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", p.TargetUserMids[i]))
      }
    }
  }
  for _, v := range p.TargetUserMids {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteSetEnd(); err != nil {
    return thrift.PrependError("error writing set end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:targetUserMids: ", p), err) }
  return err
}

func (p *InviteIntoChatRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("InviteIntoChatRequest(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - ChatMid
//  - TicketId
type AcceptChatInvitationByTicketRequest struct {
  ReqSeq int32 `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
  ChatMid string `thrift:"chatMid,2" db:"chatMid" json:"chatMid"`
  TicketId string `thrift:"ticketId,3" db:"ticketId" json:"ticketId"`
}

func NewAcceptChatInvitationByTicketRequest() *AcceptChatInvitationByTicketRequest {
  return &AcceptChatInvitationByTicketRequest{}
}


func (p *AcceptChatInvitationByTicketRequest) GetReqSeq() int32 {
  return p.ReqSeq
}

func (p *AcceptChatInvitationByTicketRequest) GetChatMid() string {
  return p.ChatMid
}

func (p *AcceptChatInvitationByTicketRequest) GetTicketId() string {
  return p.TicketId
}
func (p *AcceptChatInvitationByTicketRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AcceptChatInvitationByTicketRequest)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqSeq = v
}
  return nil
}

func (p *AcceptChatInvitationByTicketRequest)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ChatMid = v
}
  return nil
}

func (p *AcceptChatInvitationByTicketRequest)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.TicketId = v
}
  return nil
}

func (p *AcceptChatInvitationByTicketRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("AcceptChatInvitationByTicketRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AcceptChatInvitationByTicketRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("reqSeq", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err) }
  if err := oprot.WriteI32(int32(p.ReqSeq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err) }
  return err
}

func (p *AcceptChatInvitationByTicketRequest) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("chatMid", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:chatMid: ", p), err) }
  if err := oprot.WriteString(string(p.ChatMid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.chatMid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:chatMid: ", p), err) }
  return err
}

func (p *AcceptChatInvitationByTicketRequest) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("ticketId", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ticketId: ", p), err) }
  if err := oprot.WriteString(string(p.TicketId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ticketId (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ticketId: ", p), err) }
  return err
}

func (p *AcceptChatInvitationByTicketRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AcceptChatInvitationByTicketRequest(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - ChatMid
//  - LastSeenMessageDeliveredTime
//  - LastSeenMessageId
//  - LastMessageDeliveredTime
//  - LastMessageId
type DeleteSelfFromChatRequest struct {
  ReqSeq int32 `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
  ChatMid string `thrift:"chatMid,2" db:"chatMid" json:"chatMid"`
  LastSeenMessageDeliveredTime int64 `thrift:"lastSeenMessageDeliveredTime,3" db:"lastSeenMessageDeliveredTime" json:"lastSeenMessageDeliveredTime"`
  LastSeenMessageId string `thrift:"lastSeenMessageId,4" db:"lastSeenMessageId" json:"lastSeenMessageId"`
  LastMessageDeliveredTime int64 `thrift:"lastMessageDeliveredTime,5" db:"lastMessageDeliveredTime" json:"lastMessageDeliveredTime"`
  LastMessageId string `thrift:"lastMessageId,6" db:"lastMessageId" json:"lastMessageId"`
}

func NewDeleteSelfFromChatRequest() *DeleteSelfFromChatRequest {
  return &DeleteSelfFromChatRequest{}
}


func (p *DeleteSelfFromChatRequest) GetReqSeq() int32 {
  return p.ReqSeq
}

func (p *DeleteSelfFromChatRequest) GetChatMid() string {
  return p.ChatMid
}

func (p *DeleteSelfFromChatRequest) GetLastSeenMessageDeliveredTime() int64 {
  return p.LastSeenMessageDeliveredTime
}

func (p *DeleteSelfFromChatRequest) GetLastSeenMessageId() string {
  return p.LastSeenMessageId
}

func (p *DeleteSelfFromChatRequest) GetLastMessageDeliveredTime() int64 {
  return p.LastMessageDeliveredTime
}

func (p *DeleteSelfFromChatRequest) GetLastMessageId() string {
  return p.LastMessageId
}
func (p *DeleteSelfFromChatRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DeleteSelfFromChatRequest)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqSeq = v
}
  return nil
}

func (p *DeleteSelfFromChatRequest)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ChatMid = v
}
  return nil
}

func (p *DeleteSelfFromChatRequest)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.LastSeenMessageDeliveredTime = v
}
  return nil
}

func (p *DeleteSelfFromChatRequest)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.LastSeenMessageId = v
}
  return nil
}

func (p *DeleteSelfFromChatRequest)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.LastMessageDeliveredTime = v
}
  return nil
}

func (p *DeleteSelfFromChatRequest)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.LastMessageId = v
}
  return nil
}

func (p *DeleteSelfFromChatRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("DeleteSelfFromChatRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DeleteSelfFromChatRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("reqSeq", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err) }
  if err := oprot.WriteI32(int32(p.ReqSeq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err) }
  return err
}

func (p *DeleteSelfFromChatRequest) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("chatMid", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:chatMid: ", p), err) }
  if err := oprot.WriteString(string(p.ChatMid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.chatMid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:chatMid: ", p), err) }
  return err
}

func (p *DeleteSelfFromChatRequest) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("lastSeenMessageDeliveredTime", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:lastSeenMessageDeliveredTime: ", p), err) }
  if err := oprot.WriteI64(int64(p.LastSeenMessageDeliveredTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.lastSeenMessageDeliveredTime (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:lastSeenMessageDeliveredTime: ", p), err) }
  return err
}

func (p *DeleteSelfFromChatRequest) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("lastSeenMessageId", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:lastSeenMessageId: ", p), err) }
  if err := oprot.WriteString(string(p.LastSeenMessageId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.lastSeenMessageId (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:lastSeenMessageId: ", p), err) }
  return err
}

func (p *DeleteSelfFromChatRequest) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("lastMessageDeliveredTime", thrift.I64, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:lastMessageDeliveredTime: ", p), err) }
  if err := oprot.WriteI64(int64(p.LastMessageDeliveredTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.lastMessageDeliveredTime (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:lastMessageDeliveredTime: ", p), err) }
  return err
}

func (p *DeleteSelfFromChatRequest) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("lastMessageId", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:lastMessageId: ", p), err) }
  if err := oprot.WriteString(string(p.LastMessageId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.lastMessageId (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:lastMessageId: ", p), err) }
  return err
}

func (p *DeleteSelfFromChatRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DeleteSelfFromChatRequest(%+v)", *p)
}

// Attributes:
//  - TicketId
type FindChatByTicketRequest struct {
  TicketId string `thrift:"ticketId,1" db:"ticketId" json:"ticketId"`
}

func NewFindChatByTicketRequest() *FindChatByTicketRequest {
  return &FindChatByTicketRequest{}
}


func (p *FindChatByTicketRequest) GetTicketId() string {
  return p.TicketId
}
func (p *FindChatByTicketRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *FindChatByTicketRequest)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TicketId = v
}
  return nil
}

func (p *FindChatByTicketRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("FindChatByTicketRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *FindChatByTicketRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("ticketId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ticketId: ", p), err) }
  if err := oprot.WriteString(string(p.TicketId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ticketId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ticketId: ", p), err) }
  return err
}

func (p *FindChatByTicketRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("FindChatByTicketRequest(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - ChatMid
//  - TargetUserMids
type CancelChatInvitationRequest struct {
  ReqSeq int32 `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
  ChatMid string `thrift:"chatMid,2" db:"chatMid" json:"chatMid"`
  TargetUserMids []string `thrift:"targetUserMids,3" db:"targetUserMids" json:"targetUserMids"`
}

func NewCancelChatInvitationRequest() *CancelChatInvitationRequest {
  return &CancelChatInvitationRequest{}
}


func (p *CancelChatInvitationRequest) GetReqSeq() int32 {
  return p.ReqSeq
}

func (p *CancelChatInvitationRequest) GetChatMid() string {
  return p.ChatMid
}

func (p *CancelChatInvitationRequest) GetTargetUserMids() []string {
  return p.TargetUserMids
}
func (p *CancelChatInvitationRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.SET {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CancelChatInvitationRequest)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqSeq = v
}
  return nil
}

func (p *CancelChatInvitationRequest)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ChatMid = v
}
  return nil
}

func (p *CancelChatInvitationRequest)  ReadField3(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadSetBegin()
  if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
  }
  tSet := make([]string, 0, size)
  p.TargetUserMids =  tSet
  for i := 0; i < size; i ++ {
var _elem33 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem33 = v
}
    p.TargetUserMids = append(p.TargetUserMids, _elem33)
  }
  if err := iprot.ReadSetEnd(); err != nil {
    return thrift.PrependError("error reading set end: ", err)
  }
  return nil
}

func (p *CancelChatInvitationRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("CancelChatInvitationRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CancelChatInvitationRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("reqSeq", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err) }
  if err := oprot.WriteI32(int32(p.ReqSeq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err) }
  return err
}

func (p *CancelChatInvitationRequest) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("chatMid", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:chatMid: ", p), err) }
  if err := oprot.WriteString(string(p.ChatMid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.chatMid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:chatMid: ", p), err) }
  return err
}

func (p *CancelChatInvitationRequest) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("targetUserMids", thrift.SET, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:targetUserMids: ", p), err) }
  if err := oprot.WriteSetBegin(thrift.STRING, len(p.TargetUserMids)); err != nil {
    return thrift.PrependError("error writing set begin: ", err)
  }
  for i := 0; i<len(p.TargetUserMids); i++ {
    for j := i+1; j<len(p.TargetUserMids); j++ {
      if reflect.DeepEqual(p.TargetUserMids[i],p.TargetUserMids[j]) { 
        return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", p.TargetUserMids[i]))
      }
    }
  }
  for _, v := range p.TargetUserMids {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteSetEnd(); err != nil {
    return thrift.PrependError("error writing set end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:targetUserMids: ", p), err) }
  return err
}

func (p *CancelChatInvitationRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CancelChatInvitationRequest(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - ChatMid
type AcceptChatInvitationRequest struct {
  ReqSeq int32 `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
  ChatMid string `thrift:"chatMid,2" db:"chatMid" json:"chatMid"`
}

func NewAcceptChatInvitationRequest() *AcceptChatInvitationRequest {
  return &AcceptChatInvitationRequest{}
}


func (p *AcceptChatInvitationRequest) GetReqSeq() int32 {
  return p.ReqSeq
}

func (p *AcceptChatInvitationRequest) GetChatMid() string {
  return p.ChatMid
}
func (p *AcceptChatInvitationRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AcceptChatInvitationRequest)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqSeq = v
}
  return nil
}

func (p *AcceptChatInvitationRequest)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ChatMid = v
}
  return nil
}

func (p *AcceptChatInvitationRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("AcceptChatInvitationRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AcceptChatInvitationRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("reqSeq", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err) }
  if err := oprot.WriteI32(int32(p.ReqSeq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err) }
  return err
}

func (p *AcceptChatInvitationRequest) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("chatMid", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:chatMid: ", p), err) }
  if err := oprot.WriteString(string(p.ChatMid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.chatMid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:chatMid: ", p), err) }
  return err
}

func (p *AcceptChatInvitationRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AcceptChatInvitationRequest(%+v)", *p)
}

// Attributes:
//  - MinChatId
//  - MaxChatId
//  - ActiveOnly
//  - MessageBoxCountLimit
//  - WithUnreadCount
//  - LastMessagesPerMessageBoxCount
//  - UnreadOnly
type MessageBoxListRequest struct {
  MinChatId string `thrift:"minChatId,1" db:"minChatId" json:"minChatId"`
  MaxChatId string `thrift:"maxChatId,2" db:"maxChatId" json:"maxChatId"`
  ActiveOnly bool `thrift:"activeOnly,3" db:"activeOnly" json:"activeOnly"`
  MessageBoxCountLimit int32 `thrift:"messageBoxCountLimit,4" db:"messageBoxCountLimit" json:"messageBoxCountLimit"`
  WithUnreadCount bool `thrift:"withUnreadCount,5" db:"withUnreadCount" json:"withUnreadCount"`
  LastMessagesPerMessageBoxCount int32 `thrift:"lastMessagesPerMessageBoxCount,6" db:"lastMessagesPerMessageBoxCount" json:"lastMessagesPerMessageBoxCount"`
  UnreadOnly bool `thrift:"unreadOnly,7" db:"unreadOnly" json:"unreadOnly"`
}

func NewMessageBoxListRequest() *MessageBoxListRequest {
  return &MessageBoxListRequest{}
}


func (p *MessageBoxListRequest) GetMinChatId() string {
  return p.MinChatId
}

func (p *MessageBoxListRequest) GetMaxChatId() string {
  return p.MaxChatId
}

func (p *MessageBoxListRequest) GetActiveOnly() bool {
  return p.ActiveOnly
}

func (p *MessageBoxListRequest) GetMessageBoxCountLimit() int32 {
  return p.MessageBoxCountLimit
}

func (p *MessageBoxListRequest) GetWithUnreadCount() bool {
  return p.WithUnreadCount
}

func (p *MessageBoxListRequest) GetLastMessagesPerMessageBoxCount() int32 {
  return p.LastMessagesPerMessageBoxCount
}

func (p *MessageBoxListRequest) GetUnreadOnly() bool {
  return p.UnreadOnly
}
func (p *MessageBoxListRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MessageBoxListRequest)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.MinChatId = v
}
  return nil
}

func (p *MessageBoxListRequest)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.MaxChatId = v
}
  return nil
}

func (p *MessageBoxListRequest)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.ActiveOnly = v
}
  return nil
}

func (p *MessageBoxListRequest)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.MessageBoxCountLimit = v
}
  return nil
}

func (p *MessageBoxListRequest)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.WithUnreadCount = v
}
  return nil
}

func (p *MessageBoxListRequest)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.LastMessagesPerMessageBoxCount = v
}
  return nil
}

func (p *MessageBoxListRequest)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.UnreadOnly = v
}
  return nil
}

func (p *MessageBoxListRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("MessageBoxListRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MessageBoxListRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("minChatId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:minChatId: ", p), err) }
  if err := oprot.WriteString(string(p.MinChatId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.minChatId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:minChatId: ", p), err) }
  return err
}

func (p *MessageBoxListRequest) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("maxChatId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:maxChatId: ", p), err) }
  if err := oprot.WriteString(string(p.MaxChatId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.maxChatId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:maxChatId: ", p), err) }
  return err
}

func (p *MessageBoxListRequest) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("activeOnly", thrift.BOOL, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:activeOnly: ", p), err) }
  if err := oprot.WriteBool(bool(p.ActiveOnly)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.activeOnly (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:activeOnly: ", p), err) }
  return err
}

func (p *MessageBoxListRequest) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("messageBoxCountLimit", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:messageBoxCountLimit: ", p), err) }
  if err := oprot.WriteI32(int32(p.MessageBoxCountLimit)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.messageBoxCountLimit (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:messageBoxCountLimit: ", p), err) }
  return err
}

func (p *MessageBoxListRequest) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("withUnreadCount", thrift.BOOL, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:withUnreadCount: ", p), err) }
  if err := oprot.WriteBool(bool(p.WithUnreadCount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.withUnreadCount (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:withUnreadCount: ", p), err) }
  return err
}

func (p *MessageBoxListRequest) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("lastMessagesPerMessageBoxCount", thrift.I32, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:lastMessagesPerMessageBoxCount: ", p), err) }
  if err := oprot.WriteI32(int32(p.LastMessagesPerMessageBoxCount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.lastMessagesPerMessageBoxCount (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:lastMessagesPerMessageBoxCount: ", p), err) }
  return err
}

func (p *MessageBoxListRequest) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("unreadOnly", thrift.BOOL, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:unreadOnly: ", p), err) }
  if err := oprot.WriteBool(bool(p.UnreadOnly)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.unreadOnly (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:unreadOnly: ", p), err) }
  return err
}

func (p *MessageBoxListRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MessageBoxListRequest(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - Chat
//  - UpdatedAttribute
type UpdateChatRequest struct {
  ReqSeq int32 `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
  Chat *Chat `thrift:"chat,2" db:"chat" json:"chat"`
  UpdatedAttribute UpdatedAttribute `thrift:"updatedAttribute,3" db:"updatedAttribute" json:"updatedAttribute"`
}

func NewUpdateChatRequest() *UpdateChatRequest {
  return &UpdateChatRequest{}
}


func (p *UpdateChatRequest) GetReqSeq() int32 {
  return p.ReqSeq
}
var UpdateChatRequest_Chat_DEFAULT *Chat
func (p *UpdateChatRequest) GetChat() *Chat {
  if !p.IsSetChat() {
    return UpdateChatRequest_Chat_DEFAULT
  }
return p.Chat
}

func (p *UpdateChatRequest) GetUpdatedAttribute() UpdatedAttribute {
  return p.UpdatedAttribute
}
func (p *UpdateChatRequest) IsSetChat() bool {
  return p.Chat != nil
}

func (p *UpdateChatRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UpdateChatRequest)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqSeq = v
}
  return nil
}

func (p *UpdateChatRequest)  ReadField2(iprot thrift.TProtocol) error {
  p.Chat = &Chat{}
  if err := p.Chat.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Chat), err)
  }
  return nil
}

func (p *UpdateChatRequest)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := UpdatedAttribute(v)
  p.UpdatedAttribute = temp
}
  return nil
}

func (p *UpdateChatRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("UpdateChatRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UpdateChatRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("reqSeq", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err) }
  if err := oprot.WriteI32(int32(p.ReqSeq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err) }
  return err
}

func (p *UpdateChatRequest) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("chat", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:chat: ", p), err) }
  if err := p.Chat.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Chat), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:chat: ", p), err) }
  return err
}

func (p *UpdateChatRequest) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("updatedAttribute", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:updatedAttribute: ", p), err) }
  if err := oprot.WriteI32(int32(p.UpdatedAttribute)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.updatedAttribute (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:updatedAttribute: ", p), err) }
  return err
}

func (p *UpdateChatRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UpdateChatRequest(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - GroupMid
type ReissueChatTicketRequest struct {
  ReqSeq int32 `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
  GroupMid string `thrift:"groupMid,2" db:"groupMid" json:"groupMid"`
}

func NewReissueChatTicketRequest() *ReissueChatTicketRequest {
  return &ReissueChatTicketRequest{}
}


func (p *ReissueChatTicketRequest) GetReqSeq() int32 {
  return p.ReqSeq
}

func (p *ReissueChatTicketRequest) GetGroupMid() string {
  return p.GroupMid
}
func (p *ReissueChatTicketRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ReissueChatTicketRequest)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqSeq = v
}
  return nil
}

func (p *ReissueChatTicketRequest)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.GroupMid = v
}
  return nil
}

func (p *ReissueChatTicketRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ReissueChatTicketRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ReissueChatTicketRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("reqSeq", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err) }
  if err := oprot.WriteI32(int32(p.ReqSeq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err) }
  return err
}

func (p *ReissueChatTicketRequest) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("groupMid", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:groupMid: ", p), err) }
  if err := oprot.WriteString(string(p.GroupMid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.groupMid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:groupMid: ", p), err) }
  return err
}

func (p *ReissueChatTicketRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ReissueChatTicketRequest(%+v)", *p)
}

// Attributes:
//  - WithMemberChats
//  - WithInvitedChats
type GetAllChatMidsRequest struct {
  WithMemberChats bool `thrift:"withMemberChats,1" db:"withMemberChats" json:"withMemberChats"`
  WithInvitedChats bool `thrift:"withInvitedChats,2" db:"withInvitedChats" json:"withInvitedChats"`
}

func NewGetAllChatMidsRequest() *GetAllChatMidsRequest {
  return &GetAllChatMidsRequest{}
}


func (p *GetAllChatMidsRequest) GetWithMemberChats() bool {
  return p.WithMemberChats
}

func (p *GetAllChatMidsRequest) GetWithInvitedChats() bool {
  return p.WithInvitedChats
}
func (p *GetAllChatMidsRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetAllChatMidsRequest)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.WithMemberChats = v
}
  return nil
}

func (p *GetAllChatMidsRequest)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.WithInvitedChats = v
}
  return nil
}

func (p *GetAllChatMidsRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetAllChatMidsRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetAllChatMidsRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("withMemberChats", thrift.BOOL, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:withMemberChats: ", p), err) }
  if err := oprot.WriteBool(bool(p.WithMemberChats)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.withMemberChats (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:withMemberChats: ", p), err) }
  return err
}

func (p *GetAllChatMidsRequest) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("withInvitedChats", thrift.BOOL, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:withInvitedChats: ", p), err) }
  if err := oprot.WriteBool(bool(p.WithInvitedChats)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.withInvitedChats (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:withInvitedChats: ", p), err) }
  return err
}

func (p *GetAllChatMidsRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetAllChatMidsRequest(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - ChatMid
type RejectChatInvitationRequest struct {
  ReqSeq int32 `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
  ChatMid string `thrift:"chatMid,2" db:"chatMid" json:"chatMid"`
}

func NewRejectChatInvitationRequest() *RejectChatInvitationRequest {
  return &RejectChatInvitationRequest{}
}


func (p *RejectChatInvitationRequest) GetReqSeq() int32 {
  return p.ReqSeq
}

func (p *RejectChatInvitationRequest) GetChatMid() string {
  return p.ChatMid
}
func (p *RejectChatInvitationRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RejectChatInvitationRequest)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqSeq = v
}
  return nil
}

func (p *RejectChatInvitationRequest)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ChatMid = v
}
  return nil
}

func (p *RejectChatInvitationRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("RejectChatInvitationRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RejectChatInvitationRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("reqSeq", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err) }
  if err := oprot.WriteI32(int32(p.ReqSeq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err) }
  return err
}

func (p *RejectChatInvitationRequest) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("chatMid", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:chatMid: ", p), err) }
  if err := oprot.WriteString(string(p.ChatMid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.chatMid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:chatMid: ", p), err) }
  return err
}

func (p *RejectChatInvitationRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RejectChatInvitationRequest(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - Type
//  - Name
//  - TargetUserMids
//  - PicturePath
type CreateChatRequest struct {
  ReqSeq int32 `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
  Type ChatType `thrift:"type,2" db:"type" json:"type"`
  Name int32 `thrift:"name,3" db:"name" json:"name"`
  TargetUserMids []string `thrift:"targetUserMids,4" db:"targetUserMids" json:"targetUserMids"`
  PicturePath string `thrift:"picturePath,5" db:"picturePath" json:"picturePath"`
}

func NewCreateChatRequest() *CreateChatRequest {
  return &CreateChatRequest{}
}


func (p *CreateChatRequest) GetReqSeq() int32 {
  return p.ReqSeq
}

func (p *CreateChatRequest) GetType() ChatType {
  return p.Type
}

func (p *CreateChatRequest) GetName() int32 {
  return p.Name
}

func (p *CreateChatRequest) GetTargetUserMids() []string {
  return p.TargetUserMids
}

func (p *CreateChatRequest) GetPicturePath() string {
  return p.PicturePath
}
func (p *CreateChatRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.SET {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CreateChatRequest)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqSeq = v
}
  return nil
}

func (p *CreateChatRequest)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := ChatType(v)
  p.Type = temp
}
  return nil
}

func (p *CreateChatRequest)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *CreateChatRequest)  ReadField4(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadSetBegin()
  if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
  }
  tSet := make([]string, 0, size)
  p.TargetUserMids =  tSet
  for i := 0; i < size; i ++ {
var _elem34 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem34 = v
}
    p.TargetUserMids = append(p.TargetUserMids, _elem34)
  }
  if err := iprot.ReadSetEnd(); err != nil {
    return thrift.PrependError("error reading set end: ", err)
  }
  return nil
}

func (p *CreateChatRequest)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.PicturePath = v
}
  return nil
}

func (p *CreateChatRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("CreateChatRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CreateChatRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("reqSeq", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err) }
  if err := oprot.WriteI32(int32(p.ReqSeq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err) }
  return err
}

func (p *CreateChatRequest) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("type", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:type: ", p), err) }
  if err := oprot.WriteI32(int32(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:type: ", p), err) }
  return err
}

func (p *CreateChatRequest) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("name", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:name: ", p), err) }
  if err := oprot.WriteI32(int32(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:name: ", p), err) }
  return err
}

func (p *CreateChatRequest) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("targetUserMids", thrift.SET, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:targetUserMids: ", p), err) }
  if err := oprot.WriteSetBegin(thrift.STRING, len(p.TargetUserMids)); err != nil {
    return thrift.PrependError("error writing set begin: ", err)
  }
  for i := 0; i<len(p.TargetUserMids); i++ {
    for j := i+1; j<len(p.TargetUserMids); j++ {
      if reflect.DeepEqual(p.TargetUserMids[i],p.TargetUserMids[j]) { 
        return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", p.TargetUserMids[i]))
      }
    }
  }
  for _, v := range p.TargetUserMids {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteSetEnd(); err != nil {
    return thrift.PrependError("error writing set end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:targetUserMids: ", p), err) }
  return err
}

func (p *CreateChatRequest) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("picturePath", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:picturePath: ", p), err) }
  if err := oprot.WriteString(string(p.PicturePath)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.picturePath (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:picturePath: ", p), err) }
  return err
}

func (p *CreateChatRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CreateChatRequest(%+v)", *p)
}

// Attributes:
//  - DeviceName
//  - SystemName
//  - SystemVersion
//  - Model
//  - WebViewVersion
//  - CarrierCode
//  - CarrierName
//  - ApplicationType
type DeviceInfo struct {
  DeviceName string `thrift:"deviceName,1" db:"deviceName" json:"deviceName"`
  SystemName string `thrift:"systemName,2" db:"systemName" json:"systemName"`
  SystemVersion string `thrift:"systemVersion,3" db:"systemVersion" json:"systemVersion"`
  Model string `thrift:"model,4" db:"model" json:"model"`
  WebViewVersion string `thrift:"webViewVersion,5" db:"webViewVersion" json:"webViewVersion"`
  // unused fields # 6 to 9
  CarrierCode Carrier `thrift:"carrierCode,10" db:"carrierCode" json:"carrierCode"`
  CarrierName string `thrift:"carrierName,11" db:"carrierName" json:"carrierName"`
  // unused fields # 12 to 19
  ApplicationType ApplicationType `thrift:"applicationType,20" db:"applicationType" json:"applicationType"`
}

func NewDeviceInfo() *DeviceInfo {
  return &DeviceInfo{}
}


func (p *DeviceInfo) GetDeviceName() string {
  return p.DeviceName
}

func (p *DeviceInfo) GetSystemName() string {
  return p.SystemName
}

func (p *DeviceInfo) GetSystemVersion() string {
  return p.SystemVersion
}

func (p *DeviceInfo) GetModel() string {
  return p.Model
}

func (p *DeviceInfo) GetWebViewVersion() string {
  return p.WebViewVersion
}

func (p *DeviceInfo) GetCarrierCode() Carrier {
  return p.CarrierCode
}

func (p *DeviceInfo) GetCarrierName() string {
  return p.CarrierName
}

func (p *DeviceInfo) GetApplicationType() ApplicationType {
  return p.ApplicationType
}
func (p *DeviceInfo) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField10(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField11(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 20:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField20(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DeviceInfo)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.DeviceName = v
}
  return nil
}

func (p *DeviceInfo)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.SystemName = v
}
  return nil
}

func (p *DeviceInfo)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.SystemVersion = v
}
  return nil
}

func (p *DeviceInfo)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Model = v
}
  return nil
}

func (p *DeviceInfo)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.WebViewVersion = v
}
  return nil
}

func (p *DeviceInfo)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  temp := Carrier(v)
  p.CarrierCode = temp
}
  return nil
}

func (p *DeviceInfo)  ReadField11(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.CarrierName = v
}
  return nil
}

func (p *DeviceInfo)  ReadField20(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 20: ", err)
} else {
  temp := ApplicationType(v)
  p.ApplicationType = temp
}
  return nil
}

func (p *DeviceInfo) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("DeviceInfo"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField11(oprot); err != nil { return err }
    if err := p.writeField20(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DeviceInfo) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("deviceName", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:deviceName: ", p), err) }
  if err := oprot.WriteString(string(p.DeviceName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.deviceName (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:deviceName: ", p), err) }
  return err
}

func (p *DeviceInfo) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("systemName", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:systemName: ", p), err) }
  if err := oprot.WriteString(string(p.SystemName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.systemName (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:systemName: ", p), err) }
  return err
}

func (p *DeviceInfo) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("systemVersion", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:systemVersion: ", p), err) }
  if err := oprot.WriteString(string(p.SystemVersion)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.systemVersion (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:systemVersion: ", p), err) }
  return err
}

func (p *DeviceInfo) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("model", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:model: ", p), err) }
  if err := oprot.WriteString(string(p.Model)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.model (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:model: ", p), err) }
  return err
}

func (p *DeviceInfo) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("webViewVersion", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:webViewVersion: ", p), err) }
  if err := oprot.WriteString(string(p.WebViewVersion)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.webViewVersion (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:webViewVersion: ", p), err) }
  return err
}

func (p *DeviceInfo) writeField10(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("carrierCode", thrift.I32, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:carrierCode: ", p), err) }
  if err := oprot.WriteI32(int32(p.CarrierCode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.carrierCode (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:carrierCode: ", p), err) }
  return err
}

func (p *DeviceInfo) writeField11(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("carrierName", thrift.STRING, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:carrierName: ", p), err) }
  if err := oprot.WriteString(string(p.CarrierName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.carrierName (11) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:carrierName: ", p), err) }
  return err
}

func (p *DeviceInfo) writeField20(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("applicationType", thrift.I32, 20); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:applicationType: ", p), err) }
  if err := oprot.WriteI32(int32(p.ApplicationType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.applicationType (20) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 20:applicationType: ", p), err) }
  return err
}

func (p *DeviceInfo) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DeviceInfo(%+v)", *p)
}

// Attributes:
//  - PhoneNumber
//  - CountryCode
type SIMInfo struct {
  PhoneNumber string `thrift:"phoneNumber,1" db:"phoneNumber" json:"phoneNumber"`
  CountryCode string `thrift:"countryCode,2" db:"countryCode" json:"countryCode"`
}

func NewSIMInfo() *SIMInfo {
  return &SIMInfo{}
}


func (p *SIMInfo) GetPhoneNumber() string {
  return p.PhoneNumber
}

func (p *SIMInfo) GetCountryCode() string {
  return p.CountryCode
}
func (p *SIMInfo) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SIMInfo)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.PhoneNumber = v
}
  return nil
}

func (p *SIMInfo)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.CountryCode = v
}
  return nil
}

func (p *SIMInfo) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SIMInfo"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SIMInfo) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("phoneNumber", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:phoneNumber: ", p), err) }
  if err := oprot.WriteString(string(p.PhoneNumber)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.phoneNumber (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:phoneNumber: ", p), err) }
  return err
}

func (p *SIMInfo) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("countryCode", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:countryCode: ", p), err) }
  if err := oprot.WriteString(string(p.CountryCode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.countryCode (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:countryCode: ", p), err) }
  return err
}

func (p *SIMInfo) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SIMInfo(%+v)", *p)
}

// Attributes:
//  - SessionId
//  - Method
//  - Callback
//  - NormalizedPhone
//  - CountryCode
//  - NationalSignificantNumber
//  - AvailableVerificationMethods
//  - CallerIdMask
type VerificationSessionData struct {
  SessionId string `thrift:"sessionId,1" db:"sessionId" json:"sessionId"`
  Method VerificationSessionDataMethod `thrift:"method,2" db:"method" json:"method"`
  Callback string `thrift:"callback,3" db:"callback" json:"callback"`
  NormalizedPhone string `thrift:"normalizedPhone,4" db:"normalizedPhone" json:"normalizedPhone"`
  CountryCode string `thrift:"countryCode,5" db:"countryCode" json:"countryCode"`
  NationalSignificantNumber string `thrift:"nationalSignificantNumber,6" db:"nationalSignificantNumber" json:"nationalSignificantNumber"`
  AvailableVerificationMethods []Y30 `thrift:"availableVerificationMethods,7" db:"availableVerificationMethods" json:"availableVerificationMethods"`
  CallerIdMask string `thrift:"callerIdMask,8" db:"callerIdMask" json:"callerIdMask"`
}

func NewVerificationSessionData() *VerificationSessionData {
  return &VerificationSessionData{}
}


func (p *VerificationSessionData) GetSessionId() string {
  return p.SessionId
}

func (p *VerificationSessionData) GetMethod() VerificationSessionDataMethod {
  return p.Method
}

func (p *VerificationSessionData) GetCallback() string {
  return p.Callback
}

func (p *VerificationSessionData) GetNormalizedPhone() string {
  return p.NormalizedPhone
}

func (p *VerificationSessionData) GetCountryCode() string {
  return p.CountryCode
}

func (p *VerificationSessionData) GetNationalSignificantNumber() string {
  return p.NationalSignificantNumber
}

func (p *VerificationSessionData) GetAvailableVerificationMethods() []Y30 {
  return p.AvailableVerificationMethods
}

func (p *VerificationSessionData) GetCallerIdMask() string {
  return p.CallerIdMask
}
func (p *VerificationSessionData) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *VerificationSessionData)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.SessionId = v
}
  return nil
}

func (p *VerificationSessionData)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := VerificationSessionDataMethod(v)
  p.Method = temp
}
  return nil
}

func (p *VerificationSessionData)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Callback = v
}
  return nil
}

func (p *VerificationSessionData)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.NormalizedPhone = v
}
  return nil
}

func (p *VerificationSessionData)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.CountryCode = v
}
  return nil
}

func (p *VerificationSessionData)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.NationalSignificantNumber = v
}
  return nil
}

func (p *VerificationSessionData)  ReadField7(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]Y30, 0, size)
  p.AvailableVerificationMethods =  tSlice
  for i := 0; i < size; i ++ {
var _elem35 Y30
    if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := Y30(v)
    _elem35 = temp
}
    p.AvailableVerificationMethods = append(p.AvailableVerificationMethods, _elem35)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *VerificationSessionData)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.CallerIdMask = v
}
  return nil
}

func (p *VerificationSessionData) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("VerificationSessionData"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *VerificationSessionData) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("sessionId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:sessionId: ", p), err) }
  if err := oprot.WriteString(string(p.SessionId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sessionId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:sessionId: ", p), err) }
  return err
}

func (p *VerificationSessionData) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("method", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:method: ", p), err) }
  if err := oprot.WriteI32(int32(p.Method)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.method (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:method: ", p), err) }
  return err
}

func (p *VerificationSessionData) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("callback", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:callback: ", p), err) }
  if err := oprot.WriteString(string(p.Callback)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.callback (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:callback: ", p), err) }
  return err
}

func (p *VerificationSessionData) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("normalizedPhone", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:normalizedPhone: ", p), err) }
  if err := oprot.WriteString(string(p.NormalizedPhone)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.normalizedPhone (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:normalizedPhone: ", p), err) }
  return err
}

func (p *VerificationSessionData) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("countryCode", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:countryCode: ", p), err) }
  if err := oprot.WriteString(string(p.CountryCode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.countryCode (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:countryCode: ", p), err) }
  return err
}

func (p *VerificationSessionData) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("nationalSignificantNumber", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:nationalSignificantNumber: ", p), err) }
  if err := oprot.WriteString(string(p.NationalSignificantNumber)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.nationalSignificantNumber (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:nationalSignificantNumber: ", p), err) }
  return err
}

func (p *VerificationSessionData) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("availableVerificationMethods", thrift.LIST, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:availableVerificationMethods: ", p), err) }
  if err := oprot.WriteListBegin(thrift.I32, len(p.AvailableVerificationMethods)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.AvailableVerificationMethods {
    if err := oprot.WriteI32(int32(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:availableVerificationMethods: ", p), err) }
  return err
}

func (p *VerificationSessionData) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("callerIdMask", thrift.STRING, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:callerIdMask: ", p), err) }
  if err := oprot.WriteString(string(p.CallerIdMask)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.callerIdMask (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:callerIdMask: ", p), err) }
  return err
}

func (p *VerificationSessionData) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("VerificationSessionData(%+v)", *p)
}

// Attributes:
//  - WrappedNonce
//  - KdfParameter1
//  - KdfParameter2
type GetEncryptedIdentityV3Response struct {
  WrappedNonce []byte `thrift:"wrappedNonce,1" db:"wrappedNonce" json:"wrappedNonce"`
  KdfParameter1 []byte `thrift:"kdfParameter1,2" db:"kdfParameter1" json:"kdfParameter1"`
  KdfParameter2 []byte `thrift:"kdfParameter2,3" db:"kdfParameter2" json:"kdfParameter2"`
}

func NewGetEncryptedIdentityV3Response() *GetEncryptedIdentityV3Response {
  return &GetEncryptedIdentityV3Response{}
}


func (p *GetEncryptedIdentityV3Response) GetWrappedNonce() []byte {
  return p.WrappedNonce
}

func (p *GetEncryptedIdentityV3Response) GetKdfParameter1() []byte {
  return p.KdfParameter1
}

func (p *GetEncryptedIdentityV3Response) GetKdfParameter2() []byte {
  return p.KdfParameter2
}
func (p *GetEncryptedIdentityV3Response) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetEncryptedIdentityV3Response)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.WrappedNonce = v
}
  return nil
}

func (p *GetEncryptedIdentityV3Response)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.KdfParameter1 = v
}
  return nil
}

func (p *GetEncryptedIdentityV3Response)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.KdfParameter2 = v
}
  return nil
}

func (p *GetEncryptedIdentityV3Response) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetEncryptedIdentityV3Response"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetEncryptedIdentityV3Response) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("wrappedNonce", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:wrappedNonce: ", p), err) }
  if err := oprot.WriteBinary(p.WrappedNonce); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.wrappedNonce (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:wrappedNonce: ", p), err) }
  return err
}

func (p *GetEncryptedIdentityV3Response) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("kdfParameter1", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:kdfParameter1: ", p), err) }
  if err := oprot.WriteBinary(p.KdfParameter1); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.kdfParameter1 (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:kdfParameter1: ", p), err) }
  return err
}

func (p *GetEncryptedIdentityV3Response) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("kdfParameter2", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:kdfParameter2: ", p), err) }
  if err := oprot.WriteBinary(p.KdfParameter2); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.kdfParameter2 (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:kdfParameter2: ", p), err) }
  return err
}

func (p *GetEncryptedIdentityV3Response) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetEncryptedIdentityV3Response(%+v)", *p)
}

// Attributes:
//  - KeyVersion
//  - GroupKeyId
//  - Creator
//  - CreatorKeyId
//  - Receiver
//  - ReceiverKeyId
//  - EncryptedSharedKey
//  - AllowedTypes
//  - SpecVersion
type E2EEGroupSharedKey struct {
  KeyVersion int32 `thrift:"keyVersion,1" db:"keyVersion" json:"keyVersion"`
  GroupKeyId int32 `thrift:"groupKeyId,2" db:"groupKeyId" json:"groupKeyId"`
  Creator string `thrift:"creator,3" db:"creator" json:"creator"`
  CreatorKeyId int32 `thrift:"creatorKeyId,4" db:"creatorKeyId" json:"creatorKeyId"`
  Receiver string `thrift:"receiver,5" db:"receiver" json:"receiver"`
  ReceiverKeyId int32 `thrift:"receiverKeyId,6" db:"receiverKeyId" json:"receiverKeyId"`
  EncryptedSharedKey []byte `thrift:"encryptedSharedKey,7" db:"encryptedSharedKey" json:"encryptedSharedKey"`
  AllowedTypes []C61914vb `thrift:"allowedTypes,8" db:"allowedTypes" json:"allowedTypes"`
  SpecVersion int32 `thrift:"specVersion,9" db:"specVersion" json:"specVersion"`
}

func NewE2EEGroupSharedKey() *E2EEGroupSharedKey {
  return &E2EEGroupSharedKey{}
}


func (p *E2EEGroupSharedKey) GetKeyVersion() int32 {
  return p.KeyVersion
}

func (p *E2EEGroupSharedKey) GetGroupKeyId() int32 {
  return p.GroupKeyId
}

func (p *E2EEGroupSharedKey) GetCreator() string {
  return p.Creator
}

func (p *E2EEGroupSharedKey) GetCreatorKeyId() int32 {
  return p.CreatorKeyId
}

func (p *E2EEGroupSharedKey) GetReceiver() string {
  return p.Receiver
}

func (p *E2EEGroupSharedKey) GetReceiverKeyId() int32 {
  return p.ReceiverKeyId
}

func (p *E2EEGroupSharedKey) GetEncryptedSharedKey() []byte {
  return p.EncryptedSharedKey
}

func (p *E2EEGroupSharedKey) GetAllowedTypes() []C61914vb {
  return p.AllowedTypes
}

func (p *E2EEGroupSharedKey) GetSpecVersion() int32 {
  return p.SpecVersion
}
func (p *E2EEGroupSharedKey) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.SET {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField9(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *E2EEGroupSharedKey)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.KeyVersion = v
}
  return nil
}

func (p *E2EEGroupSharedKey)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.GroupKeyId = v
}
  return nil
}

func (p *E2EEGroupSharedKey)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Creator = v
}
  return nil
}

func (p *E2EEGroupSharedKey)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.CreatorKeyId = v
}
  return nil
}

func (p *E2EEGroupSharedKey)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Receiver = v
}
  return nil
}

func (p *E2EEGroupSharedKey)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.ReceiverKeyId = v
}
  return nil
}

func (p *E2EEGroupSharedKey)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.EncryptedSharedKey = v
}
  return nil
}

func (p *E2EEGroupSharedKey)  ReadField8(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadSetBegin()
  if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
  }
  tSet := make([]C61914vb, 0, size)
  p.AllowedTypes =  tSet
  for i := 0; i < size; i ++ {
var _elem36 C61914vb
    if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := C61914vb(v)
    _elem36 = temp
}
    p.AllowedTypes = append(p.AllowedTypes, _elem36)
  }
  if err := iprot.ReadSetEnd(); err != nil {
    return thrift.PrependError("error reading set end: ", err)
  }
  return nil
}

func (p *E2EEGroupSharedKey)  ReadField9(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.SpecVersion = v
}
  return nil
}

func (p *E2EEGroupSharedKey) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("E2EEGroupSharedKey"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *E2EEGroupSharedKey) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("keyVersion", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:keyVersion: ", p), err) }
  if err := oprot.WriteI32(int32(p.KeyVersion)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.keyVersion (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:keyVersion: ", p), err) }
  return err
}

func (p *E2EEGroupSharedKey) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("groupKeyId", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:groupKeyId: ", p), err) }
  if err := oprot.WriteI32(int32(p.GroupKeyId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.groupKeyId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:groupKeyId: ", p), err) }
  return err
}

func (p *E2EEGroupSharedKey) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("creator", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:creator: ", p), err) }
  if err := oprot.WriteString(string(p.Creator)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.creator (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:creator: ", p), err) }
  return err
}

func (p *E2EEGroupSharedKey) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("creatorKeyId", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:creatorKeyId: ", p), err) }
  if err := oprot.WriteI32(int32(p.CreatorKeyId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.creatorKeyId (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:creatorKeyId: ", p), err) }
  return err
}

func (p *E2EEGroupSharedKey) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("receiver", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:receiver: ", p), err) }
  if err := oprot.WriteString(string(p.Receiver)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.receiver (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:receiver: ", p), err) }
  return err
}

func (p *E2EEGroupSharedKey) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("receiverKeyId", thrift.I32, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:receiverKeyId: ", p), err) }
  if err := oprot.WriteI32(int32(p.ReceiverKeyId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.receiverKeyId (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:receiverKeyId: ", p), err) }
  return err
}

func (p *E2EEGroupSharedKey) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("encryptedSharedKey", thrift.STRING, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:encryptedSharedKey: ", p), err) }
  if err := oprot.WriteBinary(p.EncryptedSharedKey); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.encryptedSharedKey (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:encryptedSharedKey: ", p), err) }
  return err
}

func (p *E2EEGroupSharedKey) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("allowedTypes", thrift.SET, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:allowedTypes: ", p), err) }
  if err := oprot.WriteSetBegin(thrift.I32, len(p.AllowedTypes)); err != nil {
    return thrift.PrependError("error writing set begin: ", err)
  }
  for i := 0; i<len(p.AllowedTypes); i++ {
    for j := i+1; j<len(p.AllowedTypes); j++ {
      if reflect.DeepEqual(p.AllowedTypes[i],p.AllowedTypes[j]) { 
        return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", p.AllowedTypes[i]))
      }
    }
  }
  for _, v := range p.AllowedTypes {
    if err := oprot.WriteI32(int32(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteSetEnd(); err != nil {
    return thrift.PrependError("error writing set end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:allowedTypes: ", p), err) }
  return err
}

func (p *E2EEGroupSharedKey) writeField9(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("specVersion", thrift.I32, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:specVersion: ", p), err) }
  if err := oprot.WriteI32(int32(p.SpecVersion)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.specVersion (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:specVersion: ", p), err) }
  return err
}

func (p *E2EEGroupSharedKey) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("E2EEGroupSharedKey(%+v)", *p)
}

// Attributes:
//  - ID
//  - ExpirationTime
//  - MaxUseCount
type Ticket struct {
  ID string `thrift:"id,1" db:"id" json:"id"`
  // unused fields # 2 to 9
  ExpirationTime int64 `thrift:"expirationTime,10" db:"expirationTime" json:"expirationTime"`
  // unused fields # 11 to 20
  MaxUseCount int32 `thrift:"maxUseCount,21" db:"maxUseCount" json:"maxUseCount"`
}

func NewTicket() *Ticket {
  return &Ticket{}
}


func (p *Ticket) GetID() string {
  return p.ID
}

func (p *Ticket) GetExpirationTime() int64 {
  return p.ExpirationTime
}

func (p *Ticket) GetMaxUseCount() int32 {
  return p.MaxUseCount
}
func (p *Ticket) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField10(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 21:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField21(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Ticket)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *Ticket)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.ExpirationTime = v
}
  return nil
}

func (p *Ticket)  ReadField21(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 21: ", err)
} else {
  p.MaxUseCount = v
}
  return nil
}

func (p *Ticket) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Ticket"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField21(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Ticket) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := oprot.WriteString(string(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *Ticket) writeField10(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("expirationTime", thrift.I64, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:expirationTime: ", p), err) }
  if err := oprot.WriteI64(int64(p.ExpirationTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.expirationTime (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:expirationTime: ", p), err) }
  return err
}

func (p *Ticket) writeField21(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("maxUseCount", thrift.I32, 21); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 21:maxUseCount: ", p), err) }
  if err := oprot.WriteI32(int32(p.MaxUseCount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.maxUseCount (21) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 21:maxUseCount: ", p), err) }
  return err
}

func (p *Ticket) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Ticket(%+v)", *p)
}

// Attributes:
//  - Keynm
//  - Nvalue
//  - Evalue
//  - SessionKey
type RSAKey struct {
  Keynm string `thrift:"keynm,1" db:"keynm" json:"keynm"`
  Nvalue string `thrift:"nvalue,2" db:"nvalue" json:"nvalue"`
  Evalue string `thrift:"evalue,3" db:"evalue" json:"evalue"`
  SessionKey string `thrift:"sessionKey,4" db:"sessionKey" json:"sessionKey"`
}

func NewRSAKey() *RSAKey {
  return &RSAKey{}
}


func (p *RSAKey) GetKeynm() string {
  return p.Keynm
}

func (p *RSAKey) GetNvalue() string {
  return p.Nvalue
}

func (p *RSAKey) GetEvalue() string {
  return p.Evalue
}

func (p *RSAKey) GetSessionKey() string {
  return p.SessionKey
}
func (p *RSAKey) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RSAKey)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Keynm = v
}
  return nil
}

func (p *RSAKey)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Nvalue = v
}
  return nil
}

func (p *RSAKey)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Evalue = v
}
  return nil
}

func (p *RSAKey)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.SessionKey = v
}
  return nil
}

func (p *RSAKey) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("RSAKey"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RSAKey) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("keynm", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:keynm: ", p), err) }
  if err := oprot.WriteString(string(p.Keynm)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.keynm (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:keynm: ", p), err) }
  return err
}

func (p *RSAKey) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("nvalue", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:nvalue: ", p), err) }
  if err := oprot.WriteString(string(p.Nvalue)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.nvalue (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:nvalue: ", p), err) }
  return err
}

func (p *RSAKey) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("evalue", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:evalue: ", p), err) }
  if err := oprot.WriteString(string(p.Evalue)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.evalue (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:evalue: ", p), err) }
  return err
}

func (p *RSAKey) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("sessionKey", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:sessionKey: ", p), err) }
  if err := oprot.WriteString(string(p.SessionKey)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sessionKey (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:sessionKey: ", p), err) }
  return err
}

func (p *RSAKey) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RSAKey(%+v)", *p)
}

// Attributes:
//  - AuthToken
//  - UserCreated
//  - RecommendEmailRegistration
type RegisterWithSnsIdResult_ struct {
  AuthToken string `thrift:"authToken,1" db:"authToken" json:"authToken"`
  UserCreated bool `thrift:"userCreated,2" db:"userCreated" json:"userCreated"`
  RecommendEmailRegistration bool `thrift:"recommendEmailRegistration,3" db:"recommendEmailRegistration" json:"recommendEmailRegistration"`
}

func NewRegisterWithSnsIdResult_() *RegisterWithSnsIdResult_ {
  return &RegisterWithSnsIdResult_{}
}


func (p *RegisterWithSnsIdResult_) GetAuthToken() string {
  return p.AuthToken
}

func (p *RegisterWithSnsIdResult_) GetUserCreated() bool {
  return p.UserCreated
}

func (p *RegisterWithSnsIdResult_) GetRecommendEmailRegistration() bool {
  return p.RecommendEmailRegistration
}
func (p *RegisterWithSnsIdResult_) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RegisterWithSnsIdResult_)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.AuthToken = v
}
  return nil
}

func (p *RegisterWithSnsIdResult_)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.UserCreated = v
}
  return nil
}

func (p *RegisterWithSnsIdResult_)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.RecommendEmailRegistration = v
}
  return nil
}

func (p *RegisterWithSnsIdResult_) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("RegisterWithSnsIdResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RegisterWithSnsIdResult_) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authToken", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authToken: ", p), err) }
  if err := oprot.WriteString(string(p.AuthToken)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.authToken (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authToken: ", p), err) }
  return err
}

func (p *RegisterWithSnsIdResult_) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userCreated", thrift.BOOL, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:userCreated: ", p), err) }
  if err := oprot.WriteBool(bool(p.UserCreated)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userCreated (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:userCreated: ", p), err) }
  return err
}

func (p *RegisterWithSnsIdResult_) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("recommendEmailRegistration", thrift.BOOL, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:recommendEmailRegistration: ", p), err) }
  if err := oprot.WriteBool(bool(p.RecommendEmailRegistration)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.recommendEmailRegistration (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:recommendEmailRegistration: ", p), err) }
  return err
}

func (p *RegisterWithSnsIdResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RegisterWithSnsIdResult_(%+v)", *p)
}

// Attributes:
//  - UserExisting
//  - PhoneNumberRegistered
//  - SameDevice
//  - AccountMigrationCheckType
type SnsIdUserStatus struct {
  UserExisting bool `thrift:"userExisting,1" db:"userExisting" json:"userExisting"`
  PhoneNumberRegistered bool `thrift:"phoneNumberRegistered,2" db:"phoneNumberRegistered" json:"phoneNumberRegistered"`
  SameDevice bool `thrift:"sameDevice,3" db:"sameDevice" json:"sameDevice"`
  AccountMigrationCheckType AccountMigrationCheckType `thrift:"accountMigrationCheckType,4" db:"accountMigrationCheckType" json:"accountMigrationCheckType"`
}

func NewSnsIdUserStatus() *SnsIdUserStatus {
  return &SnsIdUserStatus{}
}


func (p *SnsIdUserStatus) GetUserExisting() bool {
  return p.UserExisting
}

func (p *SnsIdUserStatus) GetPhoneNumberRegistered() bool {
  return p.PhoneNumberRegistered
}

func (p *SnsIdUserStatus) GetSameDevice() bool {
  return p.SameDevice
}

func (p *SnsIdUserStatus) GetAccountMigrationCheckType() AccountMigrationCheckType {
  return p.AccountMigrationCheckType
}
func (p *SnsIdUserStatus) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SnsIdUserStatus)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UserExisting = v
}
  return nil
}

func (p *SnsIdUserStatus)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.PhoneNumberRegistered = v
}
  return nil
}

func (p *SnsIdUserStatus)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.SameDevice = v
}
  return nil
}

func (p *SnsIdUserStatus)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  temp := AccountMigrationCheckType(v)
  p.AccountMigrationCheckType = temp
}
  return nil
}

func (p *SnsIdUserStatus) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SnsIdUserStatus"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SnsIdUserStatus) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userExisting", thrift.BOOL, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userExisting: ", p), err) }
  if err := oprot.WriteBool(bool(p.UserExisting)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userExisting (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userExisting: ", p), err) }
  return err
}

func (p *SnsIdUserStatus) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("phoneNumberRegistered", thrift.BOOL, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:phoneNumberRegistered: ", p), err) }
  if err := oprot.WriteBool(bool(p.PhoneNumberRegistered)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.phoneNumberRegistered (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:phoneNumberRegistered: ", p), err) }
  return err
}

func (p *SnsIdUserStatus) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("sameDevice", thrift.BOOL, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:sameDevice: ", p), err) }
  if err := oprot.WriteBool(bool(p.SameDevice)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sameDevice (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:sameDevice: ", p), err) }
  return err
}

func (p *SnsIdUserStatus) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("accountMigrationCheckType", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:accountMigrationCheckType: ", p), err) }
  if err := oprot.WriteI32(int32(p.AccountMigrationCheckType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.accountMigrationCheckType (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:accountMigrationCheckType: ", p), err) }
  return err
}

func (p *SnsIdUserStatus) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SnsIdUserStatus(%+v)", *p)
}

// Attributes:
//  - VerificationResult_
//  - AccountMigrationCheckType
//  - RecommendAddFriends
type PhoneVerificationResult_ struct {
  VerificationResult_ VerificationResult_ `thrift:"verificationResult,1" db:"verificationResult" json:"verificationResult"`
  AccountMigrationCheckType AccountMigrationCheckType `thrift:"accountMigrationCheckType,2" db:"accountMigrationCheckType" json:"accountMigrationCheckType"`
  RecommendAddFriends bool `thrift:"recommendAddFriends,3" db:"recommendAddFriends" json:"recommendAddFriends"`
}

func NewPhoneVerificationResult_() *PhoneVerificationResult_ {
  return &PhoneVerificationResult_{}
}


func (p *PhoneVerificationResult_) GetVerificationResult_() VerificationResult_ {
  return p.VerificationResult_
}

func (p *PhoneVerificationResult_) GetAccountMigrationCheckType() AccountMigrationCheckType {
  return p.AccountMigrationCheckType
}

func (p *PhoneVerificationResult_) GetRecommendAddFriends() bool {
  return p.RecommendAddFriends
}
func (p *PhoneVerificationResult_) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PhoneVerificationResult_)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := VerificationResult_(v)
  p.VerificationResult_ = temp
}
  return nil
}

func (p *PhoneVerificationResult_)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := AccountMigrationCheckType(v)
  p.AccountMigrationCheckType = temp
}
  return nil
}

func (p *PhoneVerificationResult_)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.RecommendAddFriends = v
}
  return nil
}

func (p *PhoneVerificationResult_) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("PhoneVerificationResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PhoneVerificationResult_) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("verificationResult", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:verificationResult: ", p), err) }
  if err := oprot.WriteI32(int32(p.VerificationResult_)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.verificationResult (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:verificationResult: ", p), err) }
  return err
}

func (p *PhoneVerificationResult_) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("accountMigrationCheckType", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:accountMigrationCheckType: ", p), err) }
  if err := oprot.WriteI32(int32(p.AccountMigrationCheckType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.accountMigrationCheckType (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:accountMigrationCheckType: ", p), err) }
  return err
}

func (p *PhoneVerificationResult_) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("recommendAddFriends", thrift.BOOL, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:recommendAddFriends: ", p), err) }
  if err := oprot.WriteBool(bool(p.RecommendAddFriends)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.recommendAddFriends (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:recommendAddFriends: ", p), err) }
  return err
}

func (p *PhoneVerificationResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PhoneVerificationResult_(%+v)", *p)
}

// Attributes:
//  - Provider
//  - Identifier
//  - Password
type IdentityCredential struct {
  Provider IdentityProvider `thrift:"provider,1" db:"provider" json:"provider"`
  Identifier string `thrift:"identifier,2" db:"identifier" json:"identifier"`
  Password string `thrift:"password,3" db:"password" json:"password"`
}

func NewIdentityCredential() *IdentityCredential {
  return &IdentityCredential{}
}


func (p *IdentityCredential) GetProvider() IdentityProvider {
  return p.Provider
}

func (p *IdentityCredential) GetIdentifier() string {
  return p.Identifier
}

func (p *IdentityCredential) GetPassword() string {
  return p.Password
}
func (p *IdentityCredential) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IdentityCredential)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := IdentityProvider(v)
  p.Provider = temp
}
  return nil
}

func (p *IdentityCredential)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Identifier = v
}
  return nil
}

func (p *IdentityCredential)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Password = v
}
  return nil
}

func (p *IdentityCredential) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("IdentityCredential"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IdentityCredential) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("provider", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:provider: ", p), err) }
  if err := oprot.WriteI32(int32(p.Provider)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.provider (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:provider: ", p), err) }
  return err
}

func (p *IdentityCredential) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("identifier", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:identifier: ", p), err) }
  if err := oprot.WriteString(string(p.Identifier)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.identifier (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:identifier: ", p), err) }
  return err
}

func (p *IdentityCredential) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("password", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:password: ", p), err) }
  if err := oprot.WriteString(string(p.Password)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.password (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:password: ", p), err) }
  return err
}

func (p *IdentityCredential) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IdentityCredential(%+v)", *p)
}

// Attributes:
//  - Longitude
//  - Latitude
//  - Accuracy
//  - AltitudeMeters
//  - VelocityMetersPerSecond
//  - BearingDegrees
type Geolocation struct {
  Longitude float64 `thrift:"longitude,1" db:"longitude" json:"longitude"`
  Latitude float64 `thrift:"latitude,2" db:"latitude" json:"latitude"`
  Accuracy *GeolocationAccuracy `thrift:"accuracy,3" db:"accuracy" json:"accuracy"`
  AltitudeMeters float64 `thrift:"altitudeMeters,4" db:"altitudeMeters" json:"altitudeMeters"`
  VelocityMetersPerSecond float64 `thrift:"velocityMetersPerSecond,5" db:"velocityMetersPerSecond" json:"velocityMetersPerSecond"`
  BearingDegrees float64 `thrift:"bearingDegrees,6" db:"bearingDegrees" json:"bearingDegrees"`
}

func NewGeolocation() *Geolocation {
  return &Geolocation{}
}


func (p *Geolocation) GetLongitude() float64 {
  return p.Longitude
}

func (p *Geolocation) GetLatitude() float64 {
  return p.Latitude
}
var Geolocation_Accuracy_DEFAULT *GeolocationAccuracy
func (p *Geolocation) GetAccuracy() *GeolocationAccuracy {
  if !p.IsSetAccuracy() {
    return Geolocation_Accuracy_DEFAULT
  }
return p.Accuracy
}

func (p *Geolocation) GetAltitudeMeters() float64 {
  return p.AltitudeMeters
}

func (p *Geolocation) GetVelocityMetersPerSecond() float64 {
  return p.VelocityMetersPerSecond
}

func (p *Geolocation) GetBearingDegrees() float64 {
  return p.BearingDegrees
}
func (p *Geolocation) IsSetAccuracy() bool {
  return p.Accuracy != nil
}

func (p *Geolocation) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Geolocation)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Longitude = v
}
  return nil
}

func (p *Geolocation)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Latitude = v
}
  return nil
}

func (p *Geolocation)  ReadField3(iprot thrift.TProtocol) error {
  p.Accuracy = &GeolocationAccuracy{}
  if err := p.Accuracy.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Accuracy), err)
  }
  return nil
}

func (p *Geolocation)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.AltitudeMeters = v
}
  return nil
}

func (p *Geolocation)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.VelocityMetersPerSecond = v
}
  return nil
}

func (p *Geolocation)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.BearingDegrees = v
}
  return nil
}

func (p *Geolocation) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Geolocation"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Geolocation) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("longitude", thrift.DOUBLE, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:longitude: ", p), err) }
  if err := oprot.WriteDouble(float64(p.Longitude)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.longitude (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:longitude: ", p), err) }
  return err
}

func (p *Geolocation) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("latitude", thrift.DOUBLE, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:latitude: ", p), err) }
  if err := oprot.WriteDouble(float64(p.Latitude)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.latitude (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:latitude: ", p), err) }
  return err
}

func (p *Geolocation) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("accuracy", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:accuracy: ", p), err) }
  if err := p.Accuracy.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Accuracy), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:accuracy: ", p), err) }
  return err
}

func (p *Geolocation) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("altitudeMeters", thrift.DOUBLE, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:altitudeMeters: ", p), err) }
  if err := oprot.WriteDouble(float64(p.AltitudeMeters)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.altitudeMeters (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:altitudeMeters: ", p), err) }
  return err
}

func (p *Geolocation) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("velocityMetersPerSecond", thrift.DOUBLE, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:velocityMetersPerSecond: ", p), err) }
  if err := oprot.WriteDouble(float64(p.VelocityMetersPerSecond)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.velocityMetersPerSecond (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:velocityMetersPerSecond: ", p), err) }
  return err
}

func (p *Geolocation) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("bearingDegrees", thrift.DOUBLE, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:bearingDegrees: ", p), err) }
  if err := oprot.WriteDouble(float64(p.BearingDegrees)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.bearingDegrees (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:bearingDegrees: ", p), err) }
  return err
}

func (p *Geolocation) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Geolocation(%+v)", *p)
}

// Attributes:
//  - NetworkType
type ClientNetworkStatus struct {
  NetworkType NetworkType `thrift:"networkType,1" db:"networkType" json:"networkType"`
}

func NewClientNetworkStatus() *ClientNetworkStatus {
  return &ClientNetworkStatus{}
}


func (p *ClientNetworkStatus) GetNetworkType() NetworkType {
  return p.NetworkType
}
func (p *ClientNetworkStatus) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ClientNetworkStatus)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := NetworkType(v)
  p.NetworkType = temp
}
  return nil
}

func (p *ClientNetworkStatus) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ClientNetworkStatus"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ClientNetworkStatus) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("networkType", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:networkType: ", p), err) }
  if err := oprot.WriteI32(int32(p.NetworkType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.networkType (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:networkType: ", p), err) }
  return err
}

func (p *ClientNetworkStatus) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ClientNetworkStatus(%+v)", *p)
}

// Attributes:
//  - SyncAll
//  - SyncParamContact
//  - SyncParamMid
type SyncRelations struct {
  SyncAll bool `thrift:"syncAll,1" db:"syncAll" json:"syncAll"`
  SyncParamContact []*SyncParamContact `thrift:"syncParamContact,2" db:"syncParamContact" json:"syncParamContact"`
  SyncParamMid []*SyncParamMid `thrift:"syncParamMid,3" db:"syncParamMid" json:"syncParamMid"`
}

func NewSyncRelations() *SyncRelations {
  return &SyncRelations{}
}


func (p *SyncRelations) GetSyncAll() bool {
  return p.SyncAll
}

func (p *SyncRelations) GetSyncParamContact() []*SyncParamContact {
  return p.SyncParamContact
}

func (p *SyncRelations) GetSyncParamMid() []*SyncParamMid {
  return p.SyncParamMid
}
func (p *SyncRelations) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SyncRelations)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.SyncAll = v
}
  return nil
}

func (p *SyncRelations)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*SyncParamContact, 0, size)
  p.SyncParamContact =  tSlice
  for i := 0; i < size; i ++ {
    _elem37 := &SyncParamContact{}
    if err := _elem37.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem37), err)
    }
    p.SyncParamContact = append(p.SyncParamContact, _elem37)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *SyncRelations)  ReadField3(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*SyncParamMid, 0, size)
  p.SyncParamMid =  tSlice
  for i := 0; i < size; i ++ {
    _elem38 := &SyncParamMid{}
    if err := _elem38.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem38), err)
    }
    p.SyncParamMid = append(p.SyncParamMid, _elem38)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *SyncRelations) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SyncRelations"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SyncRelations) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("syncAll", thrift.BOOL, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:syncAll: ", p), err) }
  if err := oprot.WriteBool(bool(p.SyncAll)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.syncAll (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:syncAll: ", p), err) }
  return err
}

func (p *SyncRelations) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("syncParamContact", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:syncParamContact: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.SyncParamContact)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.SyncParamContact {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:syncParamContact: ", p), err) }
  return err
}

func (p *SyncRelations) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("syncParamMid", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:syncParamMid: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.SyncParamMid)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.SyncParamMid {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:syncParamMid: ", p), err) }
  return err
}

func (p *SyncRelations) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SyncRelations(%+v)", *p)
}

// Attributes:
//  - Mid
//  - Diff
//  - Revision
type SyncParamMid struct {
  Mid string `thrift:"mid,1" db:"mid" json:"mid"`
  Diff Diff `thrift:"diff,2" db:"diff" json:"diff"`
  Revision int64 `thrift:"revision,3" db:"revision" json:"revision"`
}

func NewSyncParamMid() *SyncParamMid {
  return &SyncParamMid{}
}


func (p *SyncParamMid) GetMid() string {
  return p.Mid
}

func (p *SyncParamMid) GetDiff() Diff {
  return p.Diff
}

func (p *SyncParamMid) GetRevision() int64 {
  return p.Revision
}
func (p *SyncParamMid) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SyncParamMid)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Mid = v
}
  return nil
}

func (p *SyncParamMid)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := Diff(v)
  p.Diff = temp
}
  return nil
}

func (p *SyncParamMid)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Revision = v
}
  return nil
}

func (p *SyncParamMid) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SyncParamMid"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SyncParamMid) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("mid", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:mid: ", p), err) }
  if err := oprot.WriteString(string(p.Mid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.mid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:mid: ", p), err) }
  return err
}

func (p *SyncParamMid) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("diff", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:diff: ", p), err) }
  if err := oprot.WriteI32(int32(p.Diff)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.diff (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:diff: ", p), err) }
  return err
}

func (p *SyncParamMid) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("revision", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:revision: ", p), err) }
  if err := oprot.WriteI64(int64(p.Revision)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.revision (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:revision: ", p), err) }
  return err
}

func (p *SyncParamMid) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SyncParamMid(%+v)", *p)
}

// Attributes:
//  - SyncParamMid
//  - ContactStatus
type SyncParamContact struct {
  SyncParamMid *SyncParamMid `thrift:"syncParamMid,1" db:"syncParamMid" json:"syncParamMid"`
  ContactStatus ContactStatus `thrift:"contactStatus,2" db:"contactStatus" json:"contactStatus"`
}

func NewSyncParamContact() *SyncParamContact {
  return &SyncParamContact{}
}

var SyncParamContact_SyncParamMid_DEFAULT *SyncParamMid
func (p *SyncParamContact) GetSyncParamMid() *SyncParamMid {
  if !p.IsSetSyncParamMid() {
    return SyncParamContact_SyncParamMid_DEFAULT
  }
return p.SyncParamMid
}

func (p *SyncParamContact) GetContactStatus() ContactStatus {
  return p.ContactStatus
}
func (p *SyncParamContact) IsSetSyncParamMid() bool {
  return p.SyncParamMid != nil
}

func (p *SyncParamContact) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SyncParamContact)  ReadField1(iprot thrift.TProtocol) error {
  p.SyncParamMid = &SyncParamMid{}
  if err := p.SyncParamMid.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SyncParamMid), err)
  }
  return nil
}

func (p *SyncParamContact)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := ContactStatus(v)
  p.ContactStatus = temp
}
  return nil
}

func (p *SyncParamContact) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SyncParamContact"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SyncParamContact) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("syncParamMid", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:syncParamMid: ", p), err) }
  if err := p.SyncParamMid.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SyncParamMid), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:syncParamMid: ", p), err) }
  return err
}

func (p *SyncParamContact) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("contactStatus", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:contactStatus: ", p), err) }
  if err := oprot.WriteI32(int32(p.ContactStatus)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.contactStatus (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:contactStatus: ", p), err) }
  return err
}

func (p *SyncParamContact) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SyncParamContact(%+v)", *p)
}

// Attributes:
//  - SyncProfile
//  - SyncSettings
//  - SyncSticker
//  - SyncThemeShop
//  - Contact
//  - Group
//  - Room
//  - Chat
type SyncScope struct {
  SyncProfile bool `thrift:"syncProfile,1" db:"syncProfile" json:"syncProfile"`
  SyncSettings bool `thrift:"syncSettings,2" db:"syncSettings" json:"syncSettings"`
  SyncSticker bool `thrift:"syncSticker,3" db:"syncSticker" json:"syncSticker"`
  SyncThemeShop bool `thrift:"syncThemeShop,4" db:"syncThemeShop" json:"syncThemeShop"`
  // unused fields # 5 to 9
  Contact *SyncRelations `thrift:"contact,10" db:"contact" json:"contact"`
  Group *SyncRelations `thrift:"group,11" db:"group" json:"group"`
  Room *SyncRelations `thrift:"room,12" db:"room" json:"room"`
  Chat *SyncRelations `thrift:"chat,13" db:"chat" json:"chat"`
}

func NewSyncScope() *SyncScope {
  return &SyncScope{}
}


func (p *SyncScope) GetSyncProfile() bool {
  return p.SyncProfile
}

func (p *SyncScope) GetSyncSettings() bool {
  return p.SyncSettings
}

func (p *SyncScope) GetSyncSticker() bool {
  return p.SyncSticker
}

func (p *SyncScope) GetSyncThemeShop() bool {
  return p.SyncThemeShop
}
var SyncScope_Contact_DEFAULT *SyncRelations
func (p *SyncScope) GetContact() *SyncRelations {
  if !p.IsSetContact() {
    return SyncScope_Contact_DEFAULT
  }
return p.Contact
}
var SyncScope_Group_DEFAULT *SyncRelations
func (p *SyncScope) GetGroup() *SyncRelations {
  if !p.IsSetGroup() {
    return SyncScope_Group_DEFAULT
  }
return p.Group
}
var SyncScope_Room_DEFAULT *SyncRelations
func (p *SyncScope) GetRoom() *SyncRelations {
  if !p.IsSetRoom() {
    return SyncScope_Room_DEFAULT
  }
return p.Room
}
var SyncScope_Chat_DEFAULT *SyncRelations
func (p *SyncScope) GetChat() *SyncRelations {
  if !p.IsSetChat() {
    return SyncScope_Chat_DEFAULT
  }
return p.Chat
}
func (p *SyncScope) IsSetContact() bool {
  return p.Contact != nil
}

func (p *SyncScope) IsSetGroup() bool {
  return p.Group != nil
}

func (p *SyncScope) IsSetRoom() bool {
  return p.Room != nil
}

func (p *SyncScope) IsSetChat() bool {
  return p.Chat != nil
}

func (p *SyncScope) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField10(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField11(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField12(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 13:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField13(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SyncScope)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.SyncProfile = v
}
  return nil
}

func (p *SyncScope)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.SyncSettings = v
}
  return nil
}

func (p *SyncScope)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.SyncSticker = v
}
  return nil
}

func (p *SyncScope)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.SyncThemeShop = v
}
  return nil
}

func (p *SyncScope)  ReadField10(iprot thrift.TProtocol) error {
  p.Contact = &SyncRelations{}
  if err := p.Contact.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Contact), err)
  }
  return nil
}

func (p *SyncScope)  ReadField11(iprot thrift.TProtocol) error {
  p.Group = &SyncRelations{}
  if err := p.Group.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Group), err)
  }
  return nil
}

func (p *SyncScope)  ReadField12(iprot thrift.TProtocol) error {
  p.Room = &SyncRelations{}
  if err := p.Room.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Room), err)
  }
  return nil
}

func (p *SyncScope)  ReadField13(iprot thrift.TProtocol) error {
  p.Chat = &SyncRelations{}
  if err := p.Chat.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Chat), err)
  }
  return nil
}

func (p *SyncScope) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SyncScope"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField11(oprot); err != nil { return err }
    if err := p.writeField12(oprot); err != nil { return err }
    if err := p.writeField13(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SyncScope) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("syncProfile", thrift.BOOL, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:syncProfile: ", p), err) }
  if err := oprot.WriteBool(bool(p.SyncProfile)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.syncProfile (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:syncProfile: ", p), err) }
  return err
}

func (p *SyncScope) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("syncSettings", thrift.BOOL, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:syncSettings: ", p), err) }
  if err := oprot.WriteBool(bool(p.SyncSettings)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.syncSettings (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:syncSettings: ", p), err) }
  return err
}

func (p *SyncScope) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("syncSticker", thrift.BOOL, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:syncSticker: ", p), err) }
  if err := oprot.WriteBool(bool(p.SyncSticker)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.syncSticker (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:syncSticker: ", p), err) }
  return err
}

func (p *SyncScope) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("syncThemeShop", thrift.BOOL, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:syncThemeShop: ", p), err) }
  if err := oprot.WriteBool(bool(p.SyncThemeShop)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.syncThemeShop (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:syncThemeShop: ", p), err) }
  return err
}

func (p *SyncScope) writeField10(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("contact", thrift.STRUCT, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:contact: ", p), err) }
  if err := p.Contact.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Contact), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:contact: ", p), err) }
  return err
}

func (p *SyncScope) writeField11(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("group", thrift.STRUCT, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:group: ", p), err) }
  if err := p.Group.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Group), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:group: ", p), err) }
  return err
}

func (p *SyncScope) writeField12(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("room", thrift.STRUCT, 12); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:room: ", p), err) }
  if err := p.Room.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Room), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 12:room: ", p), err) }
  return err
}

func (p *SyncScope) writeField13(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("chat", thrift.STRUCT, 13); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:chat: ", p), err) }
  if err := p.Chat.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Chat), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 13:chat: ", p), err) }
  return err
}

func (p *SyncScope) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SyncScope(%+v)", *p)
}

// Attributes:
//  - Code
//  - Reason
//  - ParameterMap
type TalkException struct {
  Code TalkExceptionCode `thrift:"code,1" db:"code" json:"code"`
  Reason string `thrift:"reason,2" db:"reason" json:"reason"`
  ParameterMap map[string]string `thrift:"parameterMap,3" db:"parameterMap" json:"parameterMap"`
}

func NewTalkException() *TalkException {
  return &TalkException{}
}


func (p *TalkException) GetCode() TalkExceptionCode {
  return p.Code
}

func (p *TalkException) GetReason() string {
  return p.Reason
}

func (p *TalkException) GetParameterMap() map[string]string {
  return p.ParameterMap
}
func (p *TalkException) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkException)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TalkExceptionCode(v)
  p.Code = temp
}
  return nil
}

func (p *TalkException)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Reason = v
}
  return nil
}

func (p *TalkException)  ReadField3(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.ParameterMap =  tMap
  for i := 0; i < size; i ++ {
var _key39 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key39 = v
}
var _val40 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val40 = v
}
    p.ParameterMap[_key39] = _val40
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *TalkException) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TalkException"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkException) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *TalkException) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("reason", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:reason: ", p), err) }
  if err := oprot.WriteString(string(p.Reason)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reason (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:reason: ", p), err) }
  return err
}

func (p *TalkException) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("parameterMap", thrift.MAP, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:parameterMap: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.ParameterMap)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.ParameterMap {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:parameterMap: ", p), err) }
  return err
}

func (p *TalkException) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkException(%+v)", *p)
}

func (p *TalkException) Error() string {
  return p.String()
}

// Attributes:
//  - SyncOpRevision
//  - SyncScope
//  - SyncReason
//  - Message
type ShouldSyncException struct {
  SyncOpRevision int64 `thrift:"syncOpRevision,1" db:"syncOpRevision" json:"syncOpRevision"`
  SyncScope *SyncScope `thrift:"syncScope,2" db:"syncScope" json:"syncScope"`
  SyncReason SyncTriggerReason `thrift:"syncReason,3" db:"syncReason" json:"syncReason"`
  Message string `thrift:"message,4" db:"message" json:"message"`
}

func NewShouldSyncException() *ShouldSyncException {
  return &ShouldSyncException{}
}


func (p *ShouldSyncException) GetSyncOpRevision() int64 {
  return p.SyncOpRevision
}
var ShouldSyncException_SyncScope_DEFAULT *SyncScope
func (p *ShouldSyncException) GetSyncScope() *SyncScope {
  if !p.IsSetSyncScope() {
    return ShouldSyncException_SyncScope_DEFAULT
  }
return p.SyncScope
}

func (p *ShouldSyncException) GetSyncReason() SyncTriggerReason {
  return p.SyncReason
}

func (p *ShouldSyncException) GetMessage() string {
  return p.Message
}
func (p *ShouldSyncException) IsSetSyncScope() bool {
  return p.SyncScope != nil
}

func (p *ShouldSyncException) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ShouldSyncException)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.SyncOpRevision = v
}
  return nil
}

func (p *ShouldSyncException)  ReadField2(iprot thrift.TProtocol) error {
  p.SyncScope = &SyncScope{}
  if err := p.SyncScope.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SyncScope), err)
  }
  return nil
}

func (p *ShouldSyncException)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := SyncTriggerReason(v)
  p.SyncReason = temp
}
  return nil
}

func (p *ShouldSyncException)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Message = v
}
  return nil
}

func (p *ShouldSyncException) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ShouldSyncException"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ShouldSyncException) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("syncOpRevision", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:syncOpRevision: ", p), err) }
  if err := oprot.WriteI64(int64(p.SyncOpRevision)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.syncOpRevision (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:syncOpRevision: ", p), err) }
  return err
}

func (p *ShouldSyncException) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("syncScope", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:syncScope: ", p), err) }
  if err := p.SyncScope.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SyncScope), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:syncScope: ", p), err) }
  return err
}

func (p *ShouldSyncException) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("syncReason", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:syncReason: ", p), err) }
  if err := oprot.WriteI32(int32(p.SyncReason)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.syncReason (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:syncReason: ", p), err) }
  return err
}

func (p *ShouldSyncException) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("message", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:message: ", p), err) }
  if err := oprot.WriteString(string(p.Message)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.message (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:message: ", p), err) }
  return err
}

func (p *ShouldSyncException) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ShouldSyncException(%+v)", *p)
}

func (p *ShouldSyncException) Error() string {
  return p.String()
}

// Attributes:
//  - Type
//  - Luid
//  - Phones
//  - Emails
//  - Userids
//  - MobileContactName
//  - PhoneticName
type ContactModification struct {
  Type ContactModificationType `thrift:"type,1" db:"type" json:"type"`
  Luid string `thrift:"luid,2" db:"luid" json:"luid"`
  // unused fields # 3 to 10
  Phones []string `thrift:"phones,11" db:"phones" json:"phones"`
  Emails []string `thrift:"emails,12" db:"emails" json:"emails"`
  Userids []string `thrift:"userids,13" db:"userids" json:"userids"`
  MobileContactName string `thrift:"mobileContactName,14" db:"mobileContactName" json:"mobileContactName"`
  PhoneticName string `thrift:"phoneticName,15" db:"phoneticName" json:"phoneticName"`
}

func NewContactModification() *ContactModification {
  return &ContactModification{}
}


func (p *ContactModification) GetType() ContactModificationType {
  return p.Type
}

func (p *ContactModification) GetLuid() string {
  return p.Luid
}

func (p *ContactModification) GetPhones() []string {
  return p.Phones
}

func (p *ContactModification) GetEmails() []string {
  return p.Emails
}

func (p *ContactModification) GetUserids() []string {
  return p.Userids
}

func (p *ContactModification) GetMobileContactName() string {
  return p.MobileContactName
}

func (p *ContactModification) GetPhoneticName() string {
  return p.PhoneticName
}
func (p *ContactModification) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField11(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField12(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 13:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField13(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 14:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField14(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 15:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField15(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ContactModification)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := ContactModificationType(v)
  p.Type = temp
}
  return nil
}

func (p *ContactModification)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Luid = v
}
  return nil
}

func (p *ContactModification)  ReadField11(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Phones =  tSlice
  for i := 0; i < size; i ++ {
var _elem41 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem41 = v
}
    p.Phones = append(p.Phones, _elem41)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ContactModification)  ReadField12(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Emails =  tSlice
  for i := 0; i < size; i ++ {
var _elem42 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem42 = v
}
    p.Emails = append(p.Emails, _elem42)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ContactModification)  ReadField13(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Userids =  tSlice
  for i := 0; i < size; i ++ {
var _elem43 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem43 = v
}
    p.Userids = append(p.Userids, _elem43)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ContactModification)  ReadField14(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 14: ", err)
} else {
  p.MobileContactName = v
}
  return nil
}

func (p *ContactModification)  ReadField15(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 15: ", err)
} else {
  p.PhoneticName = v
}
  return nil
}

func (p *ContactModification) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ContactModification"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField11(oprot); err != nil { return err }
    if err := p.writeField12(oprot); err != nil { return err }
    if err := p.writeField13(oprot); err != nil { return err }
    if err := p.writeField14(oprot); err != nil { return err }
    if err := p.writeField15(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ContactModification) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("type", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:type: ", p), err) }
  if err := oprot.WriteI32(int32(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:type: ", p), err) }
  return err
}

func (p *ContactModification) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("luid", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:luid: ", p), err) }
  if err := oprot.WriteString(string(p.Luid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.luid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:luid: ", p), err) }
  return err
}

func (p *ContactModification) writeField11(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("phones", thrift.LIST, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:phones: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.Phones)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Phones {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:phones: ", p), err) }
  return err
}

func (p *ContactModification) writeField12(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("emails", thrift.LIST, 12); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:emails: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.Emails)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Emails {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 12:emails: ", p), err) }
  return err
}

func (p *ContactModification) writeField13(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("userids", thrift.LIST, 13); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:userids: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.Userids)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Userids {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 13:userids: ", p), err) }
  return err
}

func (p *ContactModification) writeField14(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("mobileContactName", thrift.STRING, 14); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:mobileContactName: ", p), err) }
  if err := oprot.WriteString(string(p.MobileContactName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.mobileContactName (14) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 14:mobileContactName: ", p), err) }
  return err
}

func (p *ContactModification) writeField15(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("phoneticName", thrift.STRING, 15); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:phoneticName: ", p), err) }
  if err := oprot.WriteString(string(p.PhoneticName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.phoneticName (15) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 15:phoneticName: ", p), err) }
  return err
}

func (p *ContactModification) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ContactModification(%+v)", *p)
}

// Attributes:
//  - Mid
//  - EMid
type FollowMid struct {
  Mid string `thrift:"mid,1" db:"mid" json:"mid"`
  EMid string `thrift:"eMid,2" db:"eMid" json:"eMid"`
}

func NewFollowMid() *FollowMid {
  return &FollowMid{}
}


func (p *FollowMid) GetMid() string {
  return p.Mid
}

func (p *FollowMid) GetEMid() string {
  return p.EMid
}
func (p *FollowMid) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *FollowMid)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Mid = v
}
  return nil
}

func (p *FollowMid)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.EMid = v
}
  return nil
}

func (p *FollowMid) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("FollowMid"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *FollowMid) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("mid", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:mid: ", p), err) }
  if err := oprot.WriteString(string(p.Mid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.mid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:mid: ", p), err) }
  return err
}

func (p *FollowMid) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("eMid", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:eMid: ", p), err) }
  if err := oprot.WriteString(string(p.EMid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.eMid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:eMid: ", p), err) }
  return err
}

func (p *FollowMid) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("FollowMid(%+v)", *p)
}

// Attributes:
//  - FollowMid
type FollowRequest struct {
  FollowMid *FollowMid `thrift:"followMid,1" db:"followMid" json:"followMid"`
}

func NewFollowRequest() *FollowRequest {
  return &FollowRequest{}
}

var FollowRequest_FollowMid_DEFAULT *FollowMid
func (p *FollowRequest) GetFollowMid() *FollowMid {
  if !p.IsSetFollowMid() {
    return FollowRequest_FollowMid_DEFAULT
  }
return p.FollowMid
}
func (p *FollowRequest) IsSetFollowMid() bool {
  return p.FollowMid != nil
}

func (p *FollowRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *FollowRequest)  ReadField1(iprot thrift.TProtocol) error {
  p.FollowMid = &FollowMid{}
  if err := p.FollowMid.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.FollowMid), err)
  }
  return nil
}

func (p *FollowRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("FollowRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *FollowRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("followMid", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:followMid: ", p), err) }
  if err := p.FollowMid.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.FollowMid), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:followMid: ", p), err) }
  return err
}

func (p *FollowRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("FollowRequest(%+v)", *p)
}

// Attributes:
//  - MessageId
//  - URL
//  - ChatMID
//  - OriginMID
type SendPostbackRequest struct {
  MessageId string `thrift:"messageId,1" db:"messageId" json:"messageId"`
  URL string `thrift:"url,2" db:"url" json:"url"`
  ChatMID string `thrift:"chatMID,3" db:"chatMID" json:"chatMID"`
  OriginMID string `thrift:"originMID,4" db:"originMID" json:"originMID"`
}

func NewSendPostbackRequest() *SendPostbackRequest {
  return &SendPostbackRequest{}
}


func (p *SendPostbackRequest) GetMessageId() string {
  return p.MessageId
}

func (p *SendPostbackRequest) GetURL() string {
  return p.URL
}

func (p *SendPostbackRequest) GetChatMID() string {
  return p.ChatMID
}

func (p *SendPostbackRequest) GetOriginMID() string {
  return p.OriginMID
}
func (p *SendPostbackRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SendPostbackRequest)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.MessageId = v
}
  return nil
}

func (p *SendPostbackRequest)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.URL = v
}
  return nil
}

func (p *SendPostbackRequest)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.ChatMID = v
}
  return nil
}

func (p *SendPostbackRequest)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.OriginMID = v
}
  return nil
}

func (p *SendPostbackRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SendPostbackRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SendPostbackRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("messageId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:messageId: ", p), err) }
  if err := oprot.WriteString(string(p.MessageId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.messageId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:messageId: ", p), err) }
  return err
}

func (p *SendPostbackRequest) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("url", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:url: ", p), err) }
  if err := oprot.WriteString(string(p.URL)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.url (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:url: ", p), err) }
  return err
}

func (p *SendPostbackRequest) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("chatMID", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:chatMID: ", p), err) }
  if err := oprot.WriteString(string(p.ChatMID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.chatMID (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:chatMID: ", p), err) }
  return err
}

func (p *SendPostbackRequest) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("originMID", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:originMID: ", p), err) }
  if err := oprot.WriteString(string(p.OriginMID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.originMID (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:originMID: ", p), err) }
  return err
}

func (p *SendPostbackRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SendPostbackRequest(%+v)", *p)
}

// Attributes:
//  - Mid
//  - MemberCount
//  - OnAir
//  - BusinessAccount
//  - Addable
//  - AcceptableContentTypes
//  - CapableMyhome
//  - FreePhoneCallable
//  - PhoneNumberToDial
//  - NeedPermissionApproval
//  - ChannelId
//  - ChannelProviderName
//  - IconType
//  - BotType
//  - ShowRichMenu
//  - RichMenuRevision
//  - OnAirLabel
//  - UseTheme
//  - ThemeId
//  - UseBar
//  - BarRevision
//  - UseBackground
//  - BackgroundId
//  - StatusBarEnabled
//  - StatusBarRevision
//  - SearchId
//  - OnAirVersion
//  - Blockable
type BuddyDetail struct {
  Mid string `thrift:"mid,1" db:"mid" json:"mid"`
  MemberCount int64 `thrift:"memberCount,2" db:"memberCount" json:"memberCount"`
  OnAir int64 `thrift:"onAir,3" db:"onAir" json:"onAir"`
  BusinessAccount bool `thrift:"businessAccount,4" db:"businessAccount" json:"businessAccount"`
  Addable bool `thrift:"addable,5" db:"addable" json:"addable"`
  AcceptableContentTypes []C61914vb `thrift:"acceptableContentTypes,6" db:"acceptableContentTypes" json:"acceptableContentTypes"`
  CapableMyhome bool `thrift:"capableMyhome,7" db:"capableMyhome" json:"capableMyhome"`
  FreePhoneCallable bool `thrift:"freePhoneCallable,8" db:"freePhoneCallable" json:"freePhoneCallable"`
  PhoneNumberToDial string `thrift:"phoneNumberToDial,9" db:"phoneNumberToDial" json:"phoneNumberToDial"`
  NeedPermissionApproval bool `thrift:"needPermissionApproval,10" db:"needPermissionApproval" json:"needPermissionApproval"`
  ChannelId bool `thrift:"channelId,11" db:"channelId" json:"channelId"`
  ChannelProviderName string `thrift:"channelProviderName,12" db:"channelProviderName" json:"channelProviderName"`
  IconType int32 `thrift:"iconType,13" db:"iconType" json:"iconType"`
  BotType BotType `thrift:"botType,14" db:"botType" json:"botType"`
  ShowRichMenu bool `thrift:"showRichMenu,15" db:"showRichMenu" json:"showRichMenu"`
  RichMenuRevision bool `thrift:"richMenuRevision,16" db:"richMenuRevision" json:"richMenuRevision"`
  OnAirLabel OnAirLabel `thrift:"onAirLabel,17" db:"onAirLabel" json:"onAirLabel"`
  UseTheme int32 `thrift:"useTheme,18" db:"useTheme" json:"useTheme"`
  ThemeId string `thrift:"themeId,19" db:"themeId" json:"themeId"`
  UseBar bool `thrift:"useBar,20" db:"useBar" json:"useBar"`
  BarRevision bool `thrift:"barRevision,21" db:"barRevision" json:"barRevision"`
  UseBackground int64 `thrift:"useBackground,22" db:"useBackground" json:"useBackground"`
  BackgroundId string `thrift:"backgroundId,23" db:"backgroundId" json:"backgroundId"`
  StatusBarEnabled bool `thrift:"statusBarEnabled,24" db:"statusBarEnabled" json:"statusBarEnabled"`
  StatusBarRevision bool `thrift:"statusBarRevision,25" db:"statusBarRevision" json:"statusBarRevision"`
  SearchId string `thrift:"searchId,26" db:"searchId" json:"searchId"`
  OnAirVersion int32 `thrift:"onAirVersion,27" db:"onAirVersion" json:"onAirVersion"`
  Blockable bool `thrift:"blockable,28" db:"blockable" json:"blockable"`
}

func NewBuddyDetail() *BuddyDetail {
  return &BuddyDetail{}
}


func (p *BuddyDetail) GetMid() string {
  return p.Mid
}

func (p *BuddyDetail) GetMemberCount() int64 {
  return p.MemberCount
}

func (p *BuddyDetail) GetOnAir() int64 {
  return p.OnAir
}

func (p *BuddyDetail) GetBusinessAccount() bool {
  return p.BusinessAccount
}

func (p *BuddyDetail) GetAddable() bool {
  return p.Addable
}

func (p *BuddyDetail) GetAcceptableContentTypes() []C61914vb {
  return p.AcceptableContentTypes
}

func (p *BuddyDetail) GetCapableMyhome() bool {
  return p.CapableMyhome
}

func (p *BuddyDetail) GetFreePhoneCallable() bool {
  return p.FreePhoneCallable
}

func (p *BuddyDetail) GetPhoneNumberToDial() string {
  return p.PhoneNumberToDial
}

func (p *BuddyDetail) GetNeedPermissionApproval() bool {
  return p.NeedPermissionApproval
}

func (p *BuddyDetail) GetChannelId() bool {
  return p.ChannelId
}

func (p *BuddyDetail) GetChannelProviderName() string {
  return p.ChannelProviderName
}

func (p *BuddyDetail) GetIconType() int32 {
  return p.IconType
}

func (p *BuddyDetail) GetBotType() BotType {
  return p.BotType
}

func (p *BuddyDetail) GetShowRichMenu() bool {
  return p.ShowRichMenu
}

func (p *BuddyDetail) GetRichMenuRevision() bool {
  return p.RichMenuRevision
}

func (p *BuddyDetail) GetOnAirLabel() OnAirLabel {
  return p.OnAirLabel
}

func (p *BuddyDetail) GetUseTheme() int32 {
  return p.UseTheme
}

func (p *BuddyDetail) GetThemeId() string {
  return p.ThemeId
}

func (p *BuddyDetail) GetUseBar() bool {
  return p.UseBar
}

func (p *BuddyDetail) GetBarRevision() bool {
  return p.BarRevision
}

func (p *BuddyDetail) GetUseBackground() int64 {
  return p.UseBackground
}

func (p *BuddyDetail) GetBackgroundId() string {
  return p.BackgroundId
}

func (p *BuddyDetail) GetStatusBarEnabled() bool {
  return p.StatusBarEnabled
}

func (p *BuddyDetail) GetStatusBarRevision() bool {
  return p.StatusBarRevision
}

func (p *BuddyDetail) GetSearchId() string {
  return p.SearchId
}

func (p *BuddyDetail) GetOnAirVersion() int32 {
  return p.OnAirVersion
}

func (p *BuddyDetail) GetBlockable() bool {
  return p.Blockable
}
func (p *BuddyDetail) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.SET {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField9(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField10(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField11(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField12(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 13:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField13(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 14:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField14(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 15:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField15(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 16:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField16(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 17:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField17(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 18:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField18(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 19:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField19(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 20:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField20(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 21:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField21(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 22:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField22(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 23:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField23(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 24:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField24(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 25:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField25(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 26:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField26(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 27:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField27(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 28:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField28(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BuddyDetail)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Mid = v
}
  return nil
}

func (p *BuddyDetail)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.MemberCount = v
}
  return nil
}

func (p *BuddyDetail)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.OnAir = v
}
  return nil
}

func (p *BuddyDetail)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.BusinessAccount = v
}
  return nil
}

func (p *BuddyDetail)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Addable = v
}
  return nil
}

func (p *BuddyDetail)  ReadField6(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadSetBegin()
  if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
  }
  tSet := make([]C61914vb, 0, size)
  p.AcceptableContentTypes =  tSet
  for i := 0; i < size; i ++ {
var _elem44 C61914vb
    if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := C61914vb(v)
    _elem44 = temp
}
    p.AcceptableContentTypes = append(p.AcceptableContentTypes, _elem44)
  }
  if err := iprot.ReadSetEnd(); err != nil {
    return thrift.PrependError("error reading set end: ", err)
  }
  return nil
}

func (p *BuddyDetail)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.CapableMyhome = v
}
  return nil
}

func (p *BuddyDetail)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.FreePhoneCallable = v
}
  return nil
}

func (p *BuddyDetail)  ReadField9(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.PhoneNumberToDial = v
}
  return nil
}

func (p *BuddyDetail)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.NeedPermissionApproval = v
}
  return nil
}

func (p *BuddyDetail)  ReadField11(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.ChannelId = v
}
  return nil
}

func (p *BuddyDetail)  ReadField12(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  p.ChannelProviderName = v
}
  return nil
}

func (p *BuddyDetail)  ReadField13(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 13: ", err)
} else {
  p.IconType = v
}
  return nil
}

func (p *BuddyDetail)  ReadField14(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 14: ", err)
} else {
  temp := BotType(v)
  p.BotType = temp
}
  return nil
}

func (p *BuddyDetail)  ReadField15(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 15: ", err)
} else {
  p.ShowRichMenu = v
}
  return nil
}

func (p *BuddyDetail)  ReadField16(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 16: ", err)
} else {
  p.RichMenuRevision = v
}
  return nil
}

func (p *BuddyDetail)  ReadField17(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 17: ", err)
} else {
  temp := OnAirLabel(v)
  p.OnAirLabel = temp
}
  return nil
}

func (p *BuddyDetail)  ReadField18(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 18: ", err)
} else {
  p.UseTheme = v
}
  return nil
}

func (p *BuddyDetail)  ReadField19(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 19: ", err)
} else {
  p.ThemeId = v
}
  return nil
}

func (p *BuddyDetail)  ReadField20(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 20: ", err)
} else {
  p.UseBar = v
}
  return nil
}

func (p *BuddyDetail)  ReadField21(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 21: ", err)
} else {
  p.BarRevision = v
}
  return nil
}

func (p *BuddyDetail)  ReadField22(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 22: ", err)
} else {
  p.UseBackground = v
}
  return nil
}

func (p *BuddyDetail)  ReadField23(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 23: ", err)
} else {
  p.BackgroundId = v
}
  return nil
}

func (p *BuddyDetail)  ReadField24(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 24: ", err)
} else {
  p.StatusBarEnabled = v
}
  return nil
}

func (p *BuddyDetail)  ReadField25(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 25: ", err)
} else {
  p.StatusBarRevision = v
}
  return nil
}

func (p *BuddyDetail)  ReadField26(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 26: ", err)
} else {
  p.SearchId = v
}
  return nil
}

func (p *BuddyDetail)  ReadField27(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 27: ", err)
} else {
  p.OnAirVersion = v
}
  return nil
}

func (p *BuddyDetail)  ReadField28(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 28: ", err)
} else {
  p.Blockable = v
}
  return nil
}

func (p *BuddyDetail) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("BuddyDetail"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField11(oprot); err != nil { return err }
    if err := p.writeField12(oprot); err != nil { return err }
    if err := p.writeField13(oprot); err != nil { return err }
    if err := p.writeField14(oprot); err != nil { return err }
    if err := p.writeField15(oprot); err != nil { return err }
    if err := p.writeField16(oprot); err != nil { return err }
    if err := p.writeField17(oprot); err != nil { return err }
    if err := p.writeField18(oprot); err != nil { return err }
    if err := p.writeField19(oprot); err != nil { return err }
    if err := p.writeField20(oprot); err != nil { return err }
    if err := p.writeField21(oprot); err != nil { return err }
    if err := p.writeField22(oprot); err != nil { return err }
    if err := p.writeField23(oprot); err != nil { return err }
    if err := p.writeField24(oprot); err != nil { return err }
    if err := p.writeField25(oprot); err != nil { return err }
    if err := p.writeField26(oprot); err != nil { return err }
    if err := p.writeField27(oprot); err != nil { return err }
    if err := p.writeField28(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BuddyDetail) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("mid", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:mid: ", p), err) }
  if err := oprot.WriteString(string(p.Mid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.mid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:mid: ", p), err) }
  return err
}

func (p *BuddyDetail) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("memberCount", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:memberCount: ", p), err) }
  if err := oprot.WriteI64(int64(p.MemberCount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.memberCount (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:memberCount: ", p), err) }
  return err
}

func (p *BuddyDetail) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("onAir", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:onAir: ", p), err) }
  if err := oprot.WriteI64(int64(p.OnAir)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.onAir (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:onAir: ", p), err) }
  return err
}

func (p *BuddyDetail) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("businessAccount", thrift.BOOL, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:businessAccount: ", p), err) }
  if err := oprot.WriteBool(bool(p.BusinessAccount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.businessAccount (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:businessAccount: ", p), err) }
  return err
}

func (p *BuddyDetail) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("addable", thrift.BOOL, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:addable: ", p), err) }
  if err := oprot.WriteBool(bool(p.Addable)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.addable (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:addable: ", p), err) }
  return err
}

func (p *BuddyDetail) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("acceptableContentTypes", thrift.SET, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:acceptableContentTypes: ", p), err) }
  if err := oprot.WriteSetBegin(thrift.I32, len(p.AcceptableContentTypes)); err != nil {
    return thrift.PrependError("error writing set begin: ", err)
  }
  for i := 0; i<len(p.AcceptableContentTypes); i++ {
    for j := i+1; j<len(p.AcceptableContentTypes); j++ {
      if reflect.DeepEqual(p.AcceptableContentTypes[i],p.AcceptableContentTypes[j]) { 
        return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", p.AcceptableContentTypes[i]))
      }
    }
  }
  for _, v := range p.AcceptableContentTypes {
    if err := oprot.WriteI32(int32(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteSetEnd(); err != nil {
    return thrift.PrependError("error writing set end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:acceptableContentTypes: ", p), err) }
  return err
}

func (p *BuddyDetail) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("capableMyhome", thrift.BOOL, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:capableMyhome: ", p), err) }
  if err := oprot.WriteBool(bool(p.CapableMyhome)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.capableMyhome (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:capableMyhome: ", p), err) }
  return err
}

func (p *BuddyDetail) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("freePhoneCallable", thrift.BOOL, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:freePhoneCallable: ", p), err) }
  if err := oprot.WriteBool(bool(p.FreePhoneCallable)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.freePhoneCallable (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:freePhoneCallable: ", p), err) }
  return err
}

func (p *BuddyDetail) writeField9(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("phoneNumberToDial", thrift.STRING, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:phoneNumberToDial: ", p), err) }
  if err := oprot.WriteString(string(p.PhoneNumberToDial)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.phoneNumberToDial (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:phoneNumberToDial: ", p), err) }
  return err
}

func (p *BuddyDetail) writeField10(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("needPermissionApproval", thrift.BOOL, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:needPermissionApproval: ", p), err) }
  if err := oprot.WriteBool(bool(p.NeedPermissionApproval)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.needPermissionApproval (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:needPermissionApproval: ", p), err) }
  return err
}

func (p *BuddyDetail) writeField11(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("channelId", thrift.BOOL, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:channelId: ", p), err) }
  if err := oprot.WriteBool(bool(p.ChannelId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.channelId (11) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:channelId: ", p), err) }
  return err
}

func (p *BuddyDetail) writeField12(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("channelProviderName", thrift.STRING, 12); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:channelProviderName: ", p), err) }
  if err := oprot.WriteString(string(p.ChannelProviderName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.channelProviderName (12) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 12:channelProviderName: ", p), err) }
  return err
}

func (p *BuddyDetail) writeField13(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("iconType", thrift.I32, 13); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:iconType: ", p), err) }
  if err := oprot.WriteI32(int32(p.IconType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.iconType (13) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 13:iconType: ", p), err) }
  return err
}

func (p *BuddyDetail) writeField14(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("botType", thrift.I32, 14); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:botType: ", p), err) }
  if err := oprot.WriteI32(int32(p.BotType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.botType (14) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 14:botType: ", p), err) }
  return err
}

func (p *BuddyDetail) writeField15(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("showRichMenu", thrift.BOOL, 15); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:showRichMenu: ", p), err) }
  if err := oprot.WriteBool(bool(p.ShowRichMenu)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.showRichMenu (15) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 15:showRichMenu: ", p), err) }
  return err
}

func (p *BuddyDetail) writeField16(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("richMenuRevision", thrift.BOOL, 16); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:richMenuRevision: ", p), err) }
  if err := oprot.WriteBool(bool(p.RichMenuRevision)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.richMenuRevision (16) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 16:richMenuRevision: ", p), err) }
  return err
}

func (p *BuddyDetail) writeField17(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("onAirLabel", thrift.I32, 17); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 17:onAirLabel: ", p), err) }
  if err := oprot.WriteI32(int32(p.OnAirLabel)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.onAirLabel (17) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 17:onAirLabel: ", p), err) }
  return err
}

func (p *BuddyDetail) writeField18(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("useTheme", thrift.I32, 18); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 18:useTheme: ", p), err) }
  if err := oprot.WriteI32(int32(p.UseTheme)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.useTheme (18) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 18:useTheme: ", p), err) }
  return err
}

func (p *BuddyDetail) writeField19(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("themeId", thrift.STRING, 19); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 19:themeId: ", p), err) }
  if err := oprot.WriteString(string(p.ThemeId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.themeId (19) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 19:themeId: ", p), err) }
  return err
}

func (p *BuddyDetail) writeField20(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("useBar", thrift.BOOL, 20); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:useBar: ", p), err) }
  if err := oprot.WriteBool(bool(p.UseBar)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.useBar (20) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 20:useBar: ", p), err) }
  return err
}

func (p *BuddyDetail) writeField21(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("barRevision", thrift.BOOL, 21); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 21:barRevision: ", p), err) }
  if err := oprot.WriteBool(bool(p.BarRevision)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.barRevision (21) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 21:barRevision: ", p), err) }
  return err
}

func (p *BuddyDetail) writeField22(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("useBackground", thrift.I64, 22); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 22:useBackground: ", p), err) }
  if err := oprot.WriteI64(int64(p.UseBackground)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.useBackground (22) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 22:useBackground: ", p), err) }
  return err
}

func (p *BuddyDetail) writeField23(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("backgroundId", thrift.STRING, 23); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 23:backgroundId: ", p), err) }
  if err := oprot.WriteString(string(p.BackgroundId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.backgroundId (23) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 23:backgroundId: ", p), err) }
  return err
}

func (p *BuddyDetail) writeField24(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("statusBarEnabled", thrift.BOOL, 24); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 24:statusBarEnabled: ", p), err) }
  if err := oprot.WriteBool(bool(p.StatusBarEnabled)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.statusBarEnabled (24) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 24:statusBarEnabled: ", p), err) }
  return err
}

func (p *BuddyDetail) writeField25(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("statusBarRevision", thrift.BOOL, 25); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 25:statusBarRevision: ", p), err) }
  if err := oprot.WriteBool(bool(p.StatusBarRevision)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.statusBarRevision (25) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 25:statusBarRevision: ", p), err) }
  return err
}

func (p *BuddyDetail) writeField26(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("searchId", thrift.STRING, 26); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 26:searchId: ", p), err) }
  if err := oprot.WriteString(string(p.SearchId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.searchId (26) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 26:searchId: ", p), err) }
  return err
}

func (p *BuddyDetail) writeField27(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("onAirVersion", thrift.I32, 27); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 27:onAirVersion: ", p), err) }
  if err := oprot.WriteI32(int32(p.OnAirVersion)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.onAirVersion (27) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 27:onAirVersion: ", p), err) }
  return err
}

func (p *BuddyDetail) writeField28(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("blockable", thrift.BOOL, 28); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 28:blockable: ", p), err) }
  if err := oprot.WriteBool(bool(p.Blockable)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.blockable (28) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 28:blockable: ", p), err) }
  return err
}

func (p *BuddyDetail) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BuddyDetail(%+v)", *p)
}

// Attributes:
//  - Contact
//  - BuddyDetail
type ProximityMatchCandidateEntry struct {
  Contact *Contact `thrift:"contact,1" db:"contact" json:"contact"`
  // unused fields # 2 to 10
  BuddyDetail *BuddyDetail `thrift:"buddyDetail,11" db:"buddyDetail" json:"buddyDetail"`
}

func NewProximityMatchCandidateEntry() *ProximityMatchCandidateEntry {
  return &ProximityMatchCandidateEntry{}
}

var ProximityMatchCandidateEntry_Contact_DEFAULT *Contact
func (p *ProximityMatchCandidateEntry) GetContact() *Contact {
  if !p.IsSetContact() {
    return ProximityMatchCandidateEntry_Contact_DEFAULT
  }
return p.Contact
}
var ProximityMatchCandidateEntry_BuddyDetail_DEFAULT *BuddyDetail
func (p *ProximityMatchCandidateEntry) GetBuddyDetail() *BuddyDetail {
  if !p.IsSetBuddyDetail() {
    return ProximityMatchCandidateEntry_BuddyDetail_DEFAULT
  }
return p.BuddyDetail
}
func (p *ProximityMatchCandidateEntry) IsSetContact() bool {
  return p.Contact != nil
}

func (p *ProximityMatchCandidateEntry) IsSetBuddyDetail() bool {
  return p.BuddyDetail != nil
}

func (p *ProximityMatchCandidateEntry) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField11(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ProximityMatchCandidateEntry)  ReadField1(iprot thrift.TProtocol) error {
  p.Contact = &Contact{}
  if err := p.Contact.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Contact), err)
  }
  return nil
}

func (p *ProximityMatchCandidateEntry)  ReadField11(iprot thrift.TProtocol) error {
  p.BuddyDetail = &BuddyDetail{}
  if err := p.BuddyDetail.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.BuddyDetail), err)
  }
  return nil
}

func (p *ProximityMatchCandidateEntry) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ProximityMatchCandidateEntry"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField11(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ProximityMatchCandidateEntry) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("contact", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:contact: ", p), err) }
  if err := p.Contact.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Contact), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:contact: ", p), err) }
  return err
}

func (p *ProximityMatchCandidateEntry) writeField11(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("buddyDetail", thrift.STRUCT, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:buddyDetail: ", p), err) }
  if err := p.BuddyDetail.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.BuddyDetail), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:buddyDetail: ", p), err) }
  return err
}

func (p *ProximityMatchCandidateEntry) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ProximityMatchCandidateEntry(%+v)", *p)
}

// Attributes:
//  - Users
//  - Buddies
//  - EndOfResult_
type ProximityMatchCandidateResult_ struct {
  Users []*ProximityMatchCandidateEntry `thrift:"users,1" db:"users" json:"users"`
  Buddies []*ProximityMatchCandidateEntry `thrift:"buddies,2" db:"buddies" json:"buddies"`
  // unused fields # 3 to 90
  EndOfResult_ bool `thrift:"endOfResult,91" db:"endOfResult" json:"endOfResult"`
}

func NewProximityMatchCandidateResult_() *ProximityMatchCandidateResult_ {
  return &ProximityMatchCandidateResult_{}
}


func (p *ProximityMatchCandidateResult_) GetUsers() []*ProximityMatchCandidateEntry {
  return p.Users
}

func (p *ProximityMatchCandidateResult_) GetBuddies() []*ProximityMatchCandidateEntry {
  return p.Buddies
}

func (p *ProximityMatchCandidateResult_) GetEndOfResult_() bool {
  return p.EndOfResult_
}
func (p *ProximityMatchCandidateResult_) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 91:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField91(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ProximityMatchCandidateResult_)  ReadField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*ProximityMatchCandidateEntry, 0, size)
  p.Users =  tSlice
  for i := 0; i < size; i ++ {
    _elem45 := &ProximityMatchCandidateEntry{}
    if err := _elem45.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem45), err)
    }
    p.Users = append(p.Users, _elem45)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ProximityMatchCandidateResult_)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*ProximityMatchCandidateEntry, 0, size)
  p.Buddies =  tSlice
  for i := 0; i < size; i ++ {
    _elem46 := &ProximityMatchCandidateEntry{}
    if err := _elem46.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem46), err)
    }
    p.Buddies = append(p.Buddies, _elem46)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ProximityMatchCandidateResult_)  ReadField91(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 91: ", err)
} else {
  p.EndOfResult_ = v
}
  return nil
}

func (p *ProximityMatchCandidateResult_) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ProximityMatchCandidateResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField91(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ProximityMatchCandidateResult_) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("users", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:users: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Users)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Users {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:users: ", p), err) }
  return err
}

func (p *ProximityMatchCandidateResult_) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("buddies", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:buddies: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Buddies)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Buddies {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:buddies: ", p), err) }
  return err
}

func (p *ProximityMatchCandidateResult_) writeField91(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("endOfResult", thrift.BOOL, 91); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 91:endOfResult: ", p), err) }
  if err := oprot.WriteBool(bool(p.EndOfResult_)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.endOfResult (91) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 91:endOfResult: ", p), err) }
  return err
}

func (p *ProximityMatchCandidateResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ProximityMatchCandidateResult_(%+v)", *p)
}

// Attributes:
//  - PendingAgreements
type PendingAgreementsResponse struct {
  PendingAgreements []SettingAttribute `thrift:"pendingAgreements,1" db:"pendingAgreements" json:"pendingAgreements"`
}

func NewPendingAgreementsResponse() *PendingAgreementsResponse {
  return &PendingAgreementsResponse{}
}


func (p *PendingAgreementsResponse) GetPendingAgreements() []SettingAttribute {
  return p.PendingAgreements
}
func (p *PendingAgreementsResponse) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PendingAgreementsResponse)  ReadField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]SettingAttribute, 0, size)
  p.PendingAgreements =  tSlice
  for i := 0; i < size; i ++ {
var _elem47 SettingAttribute
    if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := SettingAttribute(v)
    _elem47 = temp
}
    p.PendingAgreements = append(p.PendingAgreements, _elem47)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *PendingAgreementsResponse) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("PendingAgreementsResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PendingAgreementsResponse) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("pendingAgreements", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:pendingAgreements: ", p), err) }
  if err := oprot.WriteListBegin(thrift.I32, len(p.PendingAgreements)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.PendingAgreements {
    if err := oprot.WriteI32(int32(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:pendingAgreements: ", p), err) }
  return err
}

func (p *PendingAgreementsResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PendingAgreementsResponse(%+v)", *p)
}

// Attributes:
//  - PushTrackingId
//  - RecvTimestamp
//  - Battery
//  - BatteryMode
//  - ClientNetworkType
//  - CarrierCode
//  - DisplayTimestamp
type PushRecvReport struct {
  PushTrackingId string `thrift:"pushTrackingId,1" db:"pushTrackingId" json:"pushTrackingId"`
  RecvTimestamp int64 `thrift:"recvTimestamp,2" db:"recvTimestamp" json:"recvTimestamp"`
  Battery int64 `thrift:"battery,3" db:"battery" json:"battery"`
  BatteryMode BatteryMode `thrift:"batteryMode,4" db:"batteryMode" json:"batteryMode"`
  ClientNetworkType NetworkType `thrift:"clientNetworkType,5" db:"clientNetworkType" json:"clientNetworkType"`
  CarrierCode string `thrift:"carrierCode,6" db:"carrierCode" json:"carrierCode"`
  DisplayTimestamp int64 `thrift:"displayTimestamp,7" db:"displayTimestamp" json:"displayTimestamp"`
}

func NewPushRecvReport() *PushRecvReport {
  return &PushRecvReport{}
}


func (p *PushRecvReport) GetPushTrackingId() string {
  return p.PushTrackingId
}

func (p *PushRecvReport) GetRecvTimestamp() int64 {
  return p.RecvTimestamp
}

func (p *PushRecvReport) GetBattery() int64 {
  return p.Battery
}

func (p *PushRecvReport) GetBatteryMode() BatteryMode {
  return p.BatteryMode
}

func (p *PushRecvReport) GetClientNetworkType() NetworkType {
  return p.ClientNetworkType
}

func (p *PushRecvReport) GetCarrierCode() string {
  return p.CarrierCode
}

func (p *PushRecvReport) GetDisplayTimestamp() int64 {
  return p.DisplayTimestamp
}
func (p *PushRecvReport) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PushRecvReport)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.PushTrackingId = v
}
  return nil
}

func (p *PushRecvReport)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.RecvTimestamp = v
}
  return nil
}

func (p *PushRecvReport)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Battery = v
}
  return nil
}

func (p *PushRecvReport)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  temp := BatteryMode(v)
  p.BatteryMode = temp
}
  return nil
}

func (p *PushRecvReport)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  temp := NetworkType(v)
  p.ClientNetworkType = temp
}
  return nil
}

func (p *PushRecvReport)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.CarrierCode = v
}
  return nil
}

func (p *PushRecvReport)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.DisplayTimestamp = v
}
  return nil
}

func (p *PushRecvReport) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("PushRecvReport"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PushRecvReport) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("pushTrackingId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:pushTrackingId: ", p), err) }
  if err := oprot.WriteString(string(p.PushTrackingId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.pushTrackingId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:pushTrackingId: ", p), err) }
  return err
}

func (p *PushRecvReport) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("recvTimestamp", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:recvTimestamp: ", p), err) }
  if err := oprot.WriteI64(int64(p.RecvTimestamp)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.recvTimestamp (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:recvTimestamp: ", p), err) }
  return err
}

func (p *PushRecvReport) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("battery", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:battery: ", p), err) }
  if err := oprot.WriteI64(int64(p.Battery)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.battery (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:battery: ", p), err) }
  return err
}

func (p *PushRecvReport) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("batteryMode", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:batteryMode: ", p), err) }
  if err := oprot.WriteI32(int32(p.BatteryMode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.batteryMode (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:batteryMode: ", p), err) }
  return err
}

func (p *PushRecvReport) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("clientNetworkType", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:clientNetworkType: ", p), err) }
  if err := oprot.WriteI32(int32(p.ClientNetworkType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.clientNetworkType (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:clientNetworkType: ", p), err) }
  return err
}

func (p *PushRecvReport) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("carrierCode", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:carrierCode: ", p), err) }
  if err := oprot.WriteString(string(p.CarrierCode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.carrierCode (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:carrierCode: ", p), err) }
  return err
}

func (p *PushRecvReport) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("displayTimestamp", thrift.I64, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:displayTimestamp: ", p), err) }
  if err := oprot.WriteI64(int64(p.DisplayTimestamp)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.displayTimestamp (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:displayTimestamp: ", p), err) }
  return err
}

func (p *PushRecvReport) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PushRecvReport(%+v)", *p)
}

// Attributes:
//  - FollowMid
type RemoveFollowerRequest struct {
  FollowMid *FollowMid `thrift:"followMid,1" db:"followMid" json:"followMid"`
}

func NewRemoveFollowerRequest() *RemoveFollowerRequest {
  return &RemoveFollowerRequest{}
}

var RemoveFollowerRequest_FollowMid_DEFAULT *FollowMid
func (p *RemoveFollowerRequest) GetFollowMid() *FollowMid {
  if !p.IsSetFollowMid() {
    return RemoveFollowerRequest_FollowMid_DEFAULT
  }
return p.FollowMid
}
func (p *RemoveFollowerRequest) IsSetFollowMid() bool {
  return p.FollowMid != nil
}

func (p *RemoveFollowerRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RemoveFollowerRequest)  ReadField1(iprot thrift.TProtocol) error {
  p.FollowMid = &FollowMid{}
  if err := p.FollowMid.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.FollowMid), err)
  }
  return nil
}

func (p *RemoveFollowerRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("RemoveFollowerRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RemoveFollowerRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("followMid", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:followMid: ", p), err) }
  if err := p.FollowMid.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.FollowMid), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:followMid: ", p), err) }
  return err
}

func (p *RemoveFollowerRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RemoveFollowerRequest(%+v)", *p)
}

// Attributes:
//  - UUID
//  - TrackId
//  - Title
//  - Oid
//  - Tids
//  - Sid
//  - Artist
//  - ChannelId
type RingbackTone struct {
  UUID string `thrift:"uuid,1" db:"uuid" json:"uuid"`
  TrackId string `thrift:"trackId,2" db:"trackId" json:"trackId"`
  Title string `thrift:"title,3" db:"title" json:"title"`
  Oid string `thrift:"oid,4" db:"oid" json:"oid"`
  Tids map[string]string `thrift:"tids,5" db:"tids" json:"tids"`
  Sid string `thrift:"sid,6" db:"sid" json:"sid"`
  Artist string `thrift:"artist,7" db:"artist" json:"artist"`
  ChannelId string `thrift:"channelId,8" db:"channelId" json:"channelId"`
}

func NewRingbackTone() *RingbackTone {
  return &RingbackTone{}
}


func (p *RingbackTone) GetUUID() string {
  return p.UUID
}

func (p *RingbackTone) GetTrackId() string {
  return p.TrackId
}

func (p *RingbackTone) GetTitle() string {
  return p.Title
}

func (p *RingbackTone) GetOid() string {
  return p.Oid
}

func (p *RingbackTone) GetTids() map[string]string {
  return p.Tids
}

func (p *RingbackTone) GetSid() string {
  return p.Sid
}

func (p *RingbackTone) GetArtist() string {
  return p.Artist
}

func (p *RingbackTone) GetChannelId() string {
  return p.ChannelId
}
func (p *RingbackTone) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RingbackTone)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UUID = v
}
  return nil
}

func (p *RingbackTone)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TrackId = v
}
  return nil
}

func (p *RingbackTone)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Title = v
}
  return nil
}

func (p *RingbackTone)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Oid = v
}
  return nil
}

func (p *RingbackTone)  ReadField5(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Tids =  tMap
  for i := 0; i < size; i ++ {
var _key48 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key48 = v
}
var _val49 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val49 = v
}
    p.Tids[_key48] = _val49
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *RingbackTone)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.Sid = v
}
  return nil
}

func (p *RingbackTone)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.Artist = v
}
  return nil
}

func (p *RingbackTone)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.ChannelId = v
}
  return nil
}

func (p *RingbackTone) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("RingbackTone"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RingbackTone) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("uuid", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:uuid: ", p), err) }
  if err := oprot.WriteString(string(p.UUID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.uuid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:uuid: ", p), err) }
  return err
}

func (p *RingbackTone) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("trackId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:trackId: ", p), err) }
  if err := oprot.WriteString(string(p.TrackId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.trackId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:trackId: ", p), err) }
  return err
}

func (p *RingbackTone) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("title", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:title: ", p), err) }
  if err := oprot.WriteString(string(p.Title)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.title (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:title: ", p), err) }
  return err
}

func (p *RingbackTone) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("oid", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:oid: ", p), err) }
  if err := oprot.WriteString(string(p.Oid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.oid (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:oid: ", p), err) }
  return err
}

func (p *RingbackTone) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("tids", thrift.MAP, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:tids: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Tids)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Tids {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:tids: ", p), err) }
  return err
}

func (p *RingbackTone) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("sid", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:sid: ", p), err) }
  if err := oprot.WriteString(string(p.Sid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sid (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:sid: ", p), err) }
  return err
}

func (p *RingbackTone) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("artist", thrift.STRING, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:artist: ", p), err) }
  if err := oprot.WriteString(string(p.Artist)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.artist (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:artist: ", p), err) }
  return err
}

func (p *RingbackTone) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("channelId", thrift.STRING, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:channelId: ", p), err) }
  if err := oprot.WriteString(string(p.ChannelId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.channelId (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:channelId: ", p), err) }
  return err
}

func (p *RingbackTone) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RingbackTone(%+v)", *p)
}

// Attributes:
//  - FollowMid
type UnfollowRequest struct {
  FollowMid *FollowMid `thrift:"followMid,1" db:"followMid" json:"followMid"`
}

func NewUnfollowRequest() *UnfollowRequest {
  return &UnfollowRequest{}
}

var UnfollowRequest_FollowMid_DEFAULT *FollowMid
func (p *UnfollowRequest) GetFollowMid() *FollowMid {
  if !p.IsSetFollowMid() {
    return UnfollowRequest_FollowMid_DEFAULT
  }
return p.FollowMid
}
func (p *UnfollowRequest) IsSetFollowMid() bool {
  return p.FollowMid != nil
}

func (p *UnfollowRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UnfollowRequest)  ReadField1(iprot thrift.TProtocol) error {
  p.FollowMid = &FollowMid{}
  if err := p.FollowMid.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.FollowMid), err)
  }
  return nil
}

func (p *UnfollowRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("UnfollowRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UnfollowRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("followMid", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:followMid: ", p), err) }
  if err := p.FollowMid.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.FollowMid), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:followMid: ", p), err) }
  return err
}

func (p *UnfollowRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UnfollowRequest(%+v)", *p)
}

// Attributes:
//  - AuthToken
//  - RecommendEmailRegistration
//  - Certificate
type RegisterWithPhoneNumberResult_ struct {
  AuthToken string `thrift:"authToken,1" db:"authToken" json:"authToken"`
  RecommendEmailRegistration bool `thrift:"recommendEmailRegistration,2" db:"recommendEmailRegistration" json:"recommendEmailRegistration"`
  Certificate string `thrift:"certificate,3" db:"certificate" json:"certificate"`
}

func NewRegisterWithPhoneNumberResult_() *RegisterWithPhoneNumberResult_ {
  return &RegisterWithPhoneNumberResult_{}
}


func (p *RegisterWithPhoneNumberResult_) GetAuthToken() string {
  return p.AuthToken
}

func (p *RegisterWithPhoneNumberResult_) GetRecommendEmailRegistration() bool {
  return p.RecommendEmailRegistration
}

func (p *RegisterWithPhoneNumberResult_) GetCertificate() string {
  return p.Certificate
}
func (p *RegisterWithPhoneNumberResult_) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RegisterWithPhoneNumberResult_)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.AuthToken = v
}
  return nil
}

func (p *RegisterWithPhoneNumberResult_)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.RecommendEmailRegistration = v
}
  return nil
}

func (p *RegisterWithPhoneNumberResult_)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Certificate = v
}
  return nil
}

func (p *RegisterWithPhoneNumberResult_) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("RegisterWithPhoneNumberResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RegisterWithPhoneNumberResult_) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authToken", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authToken: ", p), err) }
  if err := oprot.WriteString(string(p.AuthToken)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.authToken (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authToken: ", p), err) }
  return err
}

func (p *RegisterWithPhoneNumberResult_) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("recommendEmailRegistration", thrift.BOOL, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:recommendEmailRegistration: ", p), err) }
  if err := oprot.WriteBool(bool(p.RecommendEmailRegistration)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.recommendEmailRegistration (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:recommendEmailRegistration: ", p), err) }
  return err
}

func (p *RegisterWithPhoneNumberResult_) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("certificate", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:certificate: ", p), err) }
  if err := oprot.WriteString(string(p.Certificate)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.certificate (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:certificate: ", p), err) }
  return err
}

func (p *RegisterWithPhoneNumberResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RegisterWithPhoneNumberResult_(%+v)", *p)
}

// Attributes:
//  - FollowMid
//  - Cursor
type GetFollowersRequest struct {
  FollowMid *FollowMid `thrift:"followMid,1" db:"followMid" json:"followMid"`
  Cursor string `thrift:"cursor,2" db:"cursor" json:"cursor"`
}

func NewGetFollowersRequest() *GetFollowersRequest {
  return &GetFollowersRequest{}
}

var GetFollowersRequest_FollowMid_DEFAULT *FollowMid
func (p *GetFollowersRequest) GetFollowMid() *FollowMid {
  if !p.IsSetFollowMid() {
    return GetFollowersRequest_FollowMid_DEFAULT
  }
return p.FollowMid
}

func (p *GetFollowersRequest) GetCursor() string {
  return p.Cursor
}
func (p *GetFollowersRequest) IsSetFollowMid() bool {
  return p.FollowMid != nil
}

func (p *GetFollowersRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetFollowersRequest)  ReadField1(iprot thrift.TProtocol) error {
  p.FollowMid = &FollowMid{}
  if err := p.FollowMid.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.FollowMid), err)
  }
  return nil
}

func (p *GetFollowersRequest)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Cursor = v
}
  return nil
}

func (p *GetFollowersRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetFollowersRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetFollowersRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("followMid", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:followMid: ", p), err) }
  if err := p.FollowMid.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.FollowMid), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:followMid: ", p), err) }
  return err
}

func (p *GetFollowersRequest) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("cursor", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:cursor: ", p), err) }
  if err := oprot.WriteString(string(p.Cursor)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.cursor (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:cursor: ", p), err) }
  return err
}

func (p *GetFollowersRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetFollowersRequest(%+v)", *p)
}

// Attributes:
//  - IconType
type FollowBuddyDetail struct {
  IconType int32 `thrift:"iconType,1" db:"iconType" json:"iconType"`
}

func NewFollowBuddyDetail() *FollowBuddyDetail {
  return &FollowBuddyDetail{}
}


func (p *FollowBuddyDetail) GetIconType() int32 {
  return p.IconType
}
func (p *FollowBuddyDetail) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *FollowBuddyDetail)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.IconType = v
}
  return nil
}

func (p *FollowBuddyDetail) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("FollowBuddyDetail"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *FollowBuddyDetail) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("iconType", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:iconType: ", p), err) }
  if err := oprot.WriteI32(int32(p.IconType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.iconType (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:iconType: ", p), err) }
  return err
}

func (p *FollowBuddyDetail) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("FollowBuddyDetail(%+v)", *p)
}

// Attributes:
//  - FollowMid
//  - DisplayName
//  - PicturePath
//  - Following
//  - AllowFollow
//  - FollowBuddyDetail
type FollowProfile struct {
  FollowMid *FollowMid `thrift:"followMid,1" db:"followMid" json:"followMid"`
  DisplayName string `thrift:"displayName,2" db:"displayName" json:"displayName"`
  PicturePath string `thrift:"picturePath,3" db:"picturePath" json:"picturePath"`
  Following bool `thrift:"following,4" db:"following" json:"following"`
  AllowFollow bool `thrift:"allowFollow,5" db:"allowFollow" json:"allowFollow"`
  FollowBuddyDetail *FollowBuddyDetail `thrift:"followBuddyDetail,6" db:"followBuddyDetail" json:"followBuddyDetail"`
}

func NewFollowProfile() *FollowProfile {
  return &FollowProfile{}
}

var FollowProfile_FollowMid_DEFAULT *FollowMid
func (p *FollowProfile) GetFollowMid() *FollowMid {
  if !p.IsSetFollowMid() {
    return FollowProfile_FollowMid_DEFAULT
  }
return p.FollowMid
}

func (p *FollowProfile) GetDisplayName() string {
  return p.DisplayName
}

func (p *FollowProfile) GetPicturePath() string {
  return p.PicturePath
}

func (p *FollowProfile) GetFollowing() bool {
  return p.Following
}

func (p *FollowProfile) GetAllowFollow() bool {
  return p.AllowFollow
}
var FollowProfile_FollowBuddyDetail_DEFAULT *FollowBuddyDetail
func (p *FollowProfile) GetFollowBuddyDetail() *FollowBuddyDetail {
  if !p.IsSetFollowBuddyDetail() {
    return FollowProfile_FollowBuddyDetail_DEFAULT
  }
return p.FollowBuddyDetail
}
func (p *FollowProfile) IsSetFollowMid() bool {
  return p.FollowMid != nil
}

func (p *FollowProfile) IsSetFollowBuddyDetail() bool {
  return p.FollowBuddyDetail != nil
}

func (p *FollowProfile) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *FollowProfile)  ReadField1(iprot thrift.TProtocol) error {
  p.FollowMid = &FollowMid{}
  if err := p.FollowMid.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.FollowMid), err)
  }
  return nil
}

func (p *FollowProfile)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.DisplayName = v
}
  return nil
}

func (p *FollowProfile)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.PicturePath = v
}
  return nil
}

func (p *FollowProfile)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Following = v
}
  return nil
}

func (p *FollowProfile)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.AllowFollow = v
}
  return nil
}

func (p *FollowProfile)  ReadField6(iprot thrift.TProtocol) error {
  p.FollowBuddyDetail = &FollowBuddyDetail{}
  if err := p.FollowBuddyDetail.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.FollowBuddyDetail), err)
  }
  return nil
}

func (p *FollowProfile) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("FollowProfile"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *FollowProfile) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("followMid", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:followMid: ", p), err) }
  if err := p.FollowMid.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.FollowMid), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:followMid: ", p), err) }
  return err
}

func (p *FollowProfile) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("displayName", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:displayName: ", p), err) }
  if err := oprot.WriteString(string(p.DisplayName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.displayName (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:displayName: ", p), err) }
  return err
}

func (p *FollowProfile) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("picturePath", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:picturePath: ", p), err) }
  if err := oprot.WriteString(string(p.PicturePath)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.picturePath (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:picturePath: ", p), err) }
  return err
}

func (p *FollowProfile) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("following", thrift.BOOL, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:following: ", p), err) }
  if err := oprot.WriteBool(bool(p.Following)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.following (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:following: ", p), err) }
  return err
}

func (p *FollowProfile) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("allowFollow", thrift.BOOL, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:allowFollow: ", p), err) }
  if err := oprot.WriteBool(bool(p.AllowFollow)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.allowFollow (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:allowFollow: ", p), err) }
  return err
}

func (p *FollowProfile) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("followBuddyDetail", thrift.STRUCT, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:followBuddyDetail: ", p), err) }
  if err := p.FollowBuddyDetail.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.FollowBuddyDetail), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:followBuddyDetail: ", p), err) }
  return err
}

func (p *FollowProfile) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("FollowProfile(%+v)", *p)
}

// Attributes:
//  - Profiles
//  - Cursor
//  - FollowingCount
//  - FollowerCount
type GetFollowersResponse struct {
  Profiles []*FollowProfile `thrift:"profiles,1" db:"profiles" json:"profiles"`
  Cursor string `thrift:"cursor,2" db:"cursor" json:"cursor"`
  FollowingCount int64 `thrift:"followingCount,3" db:"followingCount" json:"followingCount"`
  FollowerCount int64 `thrift:"followerCount,4" db:"followerCount" json:"followerCount"`
}

func NewGetFollowersResponse() *GetFollowersResponse {
  return &GetFollowersResponse{}
}


func (p *GetFollowersResponse) GetProfiles() []*FollowProfile {
  return p.Profiles
}

func (p *GetFollowersResponse) GetCursor() string {
  return p.Cursor
}

func (p *GetFollowersResponse) GetFollowingCount() int64 {
  return p.FollowingCount
}

func (p *GetFollowersResponse) GetFollowerCount() int64 {
  return p.FollowerCount
}
func (p *GetFollowersResponse) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetFollowersResponse)  ReadField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*FollowProfile, 0, size)
  p.Profiles =  tSlice
  for i := 0; i < size; i ++ {
    _elem50 := &FollowProfile{}
    if err := _elem50.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem50), err)
    }
    p.Profiles = append(p.Profiles, _elem50)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *GetFollowersResponse)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Cursor = v
}
  return nil
}

func (p *GetFollowersResponse)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.FollowingCount = v
}
  return nil
}

func (p *GetFollowersResponse)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.FollowerCount = v
}
  return nil
}

func (p *GetFollowersResponse) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetFollowersResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetFollowersResponse) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("profiles", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:profiles: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Profiles)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Profiles {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:profiles: ", p), err) }
  return err
}

func (p *GetFollowersResponse) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("cursor", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:cursor: ", p), err) }
  if err := oprot.WriteString(string(p.Cursor)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.cursor (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:cursor: ", p), err) }
  return err
}

func (p *GetFollowersResponse) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("followingCount", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:followingCount: ", p), err) }
  if err := oprot.WriteI64(int64(p.FollowingCount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.followingCount (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:followingCount: ", p), err) }
  return err
}

func (p *GetFollowersResponse) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("followerCount", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:followerCount: ", p), err) }
  if err := oprot.WriteI64(int64(p.FollowerCount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.followerCount (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:followerCount: ", p), err) }
  return err
}

func (p *GetFollowersResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetFollowersResponse(%+v)", *p)
}

// Attributes:
//  - FollowMid
//  - Cursor
type GetFollowingsRequest struct {
  FollowMid *FollowMid `thrift:"followMid,1" db:"followMid" json:"followMid"`
  Cursor string `thrift:"cursor,2" db:"cursor" json:"cursor"`
}

func NewGetFollowingsRequest() *GetFollowingsRequest {
  return &GetFollowingsRequest{}
}

var GetFollowingsRequest_FollowMid_DEFAULT *FollowMid
func (p *GetFollowingsRequest) GetFollowMid() *FollowMid {
  if !p.IsSetFollowMid() {
    return GetFollowingsRequest_FollowMid_DEFAULT
  }
return p.FollowMid
}

func (p *GetFollowingsRequest) GetCursor() string {
  return p.Cursor
}
func (p *GetFollowingsRequest) IsSetFollowMid() bool {
  return p.FollowMid != nil
}

func (p *GetFollowingsRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetFollowingsRequest)  ReadField1(iprot thrift.TProtocol) error {
  p.FollowMid = &FollowMid{}
  if err := p.FollowMid.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.FollowMid), err)
  }
  return nil
}

func (p *GetFollowingsRequest)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Cursor = v
}
  return nil
}

func (p *GetFollowingsRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetFollowingsRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetFollowingsRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("followMid", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:followMid: ", p), err) }
  if err := p.FollowMid.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.FollowMid), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:followMid: ", p), err) }
  return err
}

func (p *GetFollowingsRequest) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("cursor", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:cursor: ", p), err) }
  if err := oprot.WriteString(string(p.Cursor)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.cursor (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:cursor: ", p), err) }
  return err
}

func (p *GetFollowingsRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetFollowingsRequest(%+v)", *p)
}

// Attributes:
//  - Profiles
//  - Cursor
//  - FollowingCount
//  - FollowerCount
type GetFollowingsResponse struct {
  Profiles []*FollowProfile `thrift:"profiles,1" db:"profiles" json:"profiles"`
  Cursor string `thrift:"cursor,2" db:"cursor" json:"cursor"`
  FollowingCount int64 `thrift:"followingCount,3" db:"followingCount" json:"followingCount"`
  FollowerCount int64 `thrift:"followerCount,4" db:"followerCount" json:"followerCount"`
}

func NewGetFollowingsResponse() *GetFollowingsResponse {
  return &GetFollowingsResponse{}
}


func (p *GetFollowingsResponse) GetProfiles() []*FollowProfile {
  return p.Profiles
}

func (p *GetFollowingsResponse) GetCursor() string {
  return p.Cursor
}

func (p *GetFollowingsResponse) GetFollowingCount() int64 {
  return p.FollowingCount
}

func (p *GetFollowingsResponse) GetFollowerCount() int64 {
  return p.FollowerCount
}
func (p *GetFollowingsResponse) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetFollowingsResponse)  ReadField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*FollowProfile, 0, size)
  p.Profiles =  tSlice
  for i := 0; i < size; i ++ {
    _elem51 := &FollowProfile{}
    if err := _elem51.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem51), err)
    }
    p.Profiles = append(p.Profiles, _elem51)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *GetFollowingsResponse)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Cursor = v
}
  return nil
}

func (p *GetFollowingsResponse)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.FollowingCount = v
}
  return nil
}

func (p *GetFollowingsResponse)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.FollowerCount = v
}
  return nil
}

func (p *GetFollowingsResponse) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetFollowingsResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetFollowingsResponse) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("profiles", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:profiles: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Profiles)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Profiles {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:profiles: ", p), err) }
  return err
}

func (p *GetFollowingsResponse) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("cursor", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:cursor: ", p), err) }
  if err := oprot.WriteString(string(p.Cursor)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.cursor (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:cursor: ", p), err) }
  return err
}

func (p *GetFollowingsResponse) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("followingCount", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:followingCount: ", p), err) }
  if err := oprot.WriteI64(int64(p.FollowingCount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.followingCount (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:followingCount: ", p), err) }
  return err
}

func (p *GetFollowingsResponse) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("followerCount", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:followerCount: ", p), err) }
  if err := oprot.WriteI64(int64(p.FollowerCount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.followerCount (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:followerCount: ", p), err) }
  return err
}

func (p *GetFollowingsResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetFollowingsResponse(%+v)", *p)
}

// Attributes:
//  - Emid
//  - Distance
//  - LastUpdatedInSec
//  - Property
//  - Profile
type NearbyEntry struct {
  Emid string `thrift:"emid,1" db:"emid" json:"emid"`
  Distance float64 `thrift:"distance,2" db:"distance" json:"distance"`
  LastUpdatedInSec float64 `thrift:"lastUpdatedInSec,3" db:"lastUpdatedInSec" json:"lastUpdatedInSec"`
  Property map[string]string `thrift:"property,4" db:"property" json:"property"`
  Profile *Profile `thrift:"profile,5" db:"profile" json:"profile"`
}

func NewNearbyEntry() *NearbyEntry {
  return &NearbyEntry{}
}


func (p *NearbyEntry) GetEmid() string {
  return p.Emid
}

func (p *NearbyEntry) GetDistance() float64 {
  return p.Distance
}

func (p *NearbyEntry) GetLastUpdatedInSec() float64 {
  return p.LastUpdatedInSec
}

func (p *NearbyEntry) GetProperty() map[string]string {
  return p.Property
}
var NearbyEntry_Profile_DEFAULT *Profile
func (p *NearbyEntry) GetProfile() *Profile {
  if !p.IsSetProfile() {
    return NearbyEntry_Profile_DEFAULT
  }
return p.Profile
}
func (p *NearbyEntry) IsSetProfile() bool {
  return p.Profile != nil
}

func (p *NearbyEntry) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *NearbyEntry)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Emid = v
}
  return nil
}

func (p *NearbyEntry)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Distance = v
}
  return nil
}

func (p *NearbyEntry)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.LastUpdatedInSec = v
}
  return nil
}

func (p *NearbyEntry)  ReadField4(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Property =  tMap
  for i := 0; i < size; i ++ {
var _key52 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key52 = v
}
var _val53 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val53 = v
}
    p.Property[_key52] = _val53
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *NearbyEntry)  ReadField5(iprot thrift.TProtocol) error {
  p.Profile = &Profile{}
  if err := p.Profile.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Profile), err)
  }
  return nil
}

func (p *NearbyEntry) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("NearbyEntry"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *NearbyEntry) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("emid", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:emid: ", p), err) }
  if err := oprot.WriteString(string(p.Emid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.emid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:emid: ", p), err) }
  return err
}

func (p *NearbyEntry) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("distance", thrift.DOUBLE, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:distance: ", p), err) }
  if err := oprot.WriteDouble(float64(p.Distance)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.distance (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:distance: ", p), err) }
  return err
}

func (p *NearbyEntry) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("lastUpdatedInSec", thrift.DOUBLE, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:lastUpdatedInSec: ", p), err) }
  if err := oprot.WriteDouble(float64(p.LastUpdatedInSec)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.lastUpdatedInSec (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:lastUpdatedInSec: ", p), err) }
  return err
}

func (p *NearbyEntry) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("property", thrift.MAP, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:property: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Property)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Property {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:property: ", p), err) }
  return err
}

func (p *NearbyEntry) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("profile", thrift.STRUCT, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:profile: ", p), err) }
  if err := p.Profile.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Profile), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:profile: ", p), err) }
  return err
}

func (p *NearbyEntry) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("NearbyEntry(%+v)", *p)
}

// Attributes:
//  - StartMessageId
//  - EndMessageId
//  - StartTime
//  - EndTime
type TMessageReadRangeEntry struct {
  StartMessageId int64 `thrift:"startMessageId,1" db:"startMessageId" json:"startMessageId"`
  EndMessageId int64 `thrift:"endMessageId,2" db:"endMessageId" json:"endMessageId"`
  StartTime int64 `thrift:"startTime,3" db:"startTime" json:"startTime"`
  EndTime int64 `thrift:"endTime,4" db:"endTime" json:"endTime"`
}

func NewTMessageReadRangeEntry() *TMessageReadRangeEntry {
  return &TMessageReadRangeEntry{}
}


func (p *TMessageReadRangeEntry) GetStartMessageId() int64 {
  return p.StartMessageId
}

func (p *TMessageReadRangeEntry) GetEndMessageId() int64 {
  return p.EndMessageId
}

func (p *TMessageReadRangeEntry) GetStartTime() int64 {
  return p.StartTime
}

func (p *TMessageReadRangeEntry) GetEndTime() int64 {
  return p.EndTime
}
func (p *TMessageReadRangeEntry) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TMessageReadRangeEntry)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.StartMessageId = v
}
  return nil
}

func (p *TMessageReadRangeEntry)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.EndMessageId = v
}
  return nil
}

func (p *TMessageReadRangeEntry)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.StartTime = v
}
  return nil
}

func (p *TMessageReadRangeEntry)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.EndTime = v
}
  return nil
}

func (p *TMessageReadRangeEntry) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TMessageReadRangeEntry"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TMessageReadRangeEntry) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("startMessageId", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:startMessageId: ", p), err) }
  if err := oprot.WriteI64(int64(p.StartMessageId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.startMessageId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:startMessageId: ", p), err) }
  return err
}

func (p *TMessageReadRangeEntry) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("endMessageId", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:endMessageId: ", p), err) }
  if err := oprot.WriteI64(int64(p.EndMessageId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.endMessageId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:endMessageId: ", p), err) }
  return err
}

func (p *TMessageReadRangeEntry) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("startTime", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:startTime: ", p), err) }
  if err := oprot.WriteI64(int64(p.StartTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.startTime (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:startTime: ", p), err) }
  return err
}

func (p *TMessageReadRangeEntry) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("endTime", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:endTime: ", p), err) }
  if err := oprot.WriteI64(int64(p.EndTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.endTime (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:endTime: ", p), err) }
  return err
}

func (p *TMessageReadRangeEntry) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TMessageReadRangeEntry(%+v)", *p)
}

// Attributes:
//  - ChatId
//  - Ranges
type TMessageReadRange struct {
  ChatId string `thrift:"chatId,1" db:"chatId" json:"chatId"`
  Ranges map[string][]*TMessageReadRangeEntry `thrift:"ranges,2" db:"ranges" json:"ranges"`
}

func NewTMessageReadRange() *TMessageReadRange {
  return &TMessageReadRange{}
}


func (p *TMessageReadRange) GetChatId() string {
  return p.ChatId
}

func (p *TMessageReadRange) GetRanges() map[string][]*TMessageReadRangeEntry {
  return p.Ranges
}
func (p *TMessageReadRange) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TMessageReadRange)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ChatId = v
}
  return nil
}

func (p *TMessageReadRange)  ReadField2(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string][]*TMessageReadRangeEntry, size)
  p.Ranges =  tMap
  for i := 0; i < size; i ++ {
var _key54 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key54 = v
}
    _, size, err := iprot.ReadListBegin()
    if err != nil {
      return thrift.PrependError("error reading list begin: ", err)
    }
    tSlice := make([]*TMessageReadRangeEntry, 0, size)
    _val55 :=  tSlice
    for i := 0; i < size; i ++ {
      _elem56 := &TMessageReadRangeEntry{}
      if err := _elem56.Read(iprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem56), err)
      }
      _val55 = append(_val55, _elem56)
    }
    if err := iprot.ReadListEnd(); err != nil {
      return thrift.PrependError("error reading list end: ", err)
    }
    p.Ranges[_key54] = _val55
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *TMessageReadRange) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TMessageReadRange"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TMessageReadRange) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("chatId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:chatId: ", p), err) }
  if err := oprot.WriteString(string(p.ChatId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.chatId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:chatId: ", p), err) }
  return err
}

func (p *TMessageReadRange) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("ranges", thrift.MAP, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ranges: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.LIST, len(p.Ranges)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Ranges {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(v)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range v {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ranges: ", p), err) }
  return err
}

func (p *TMessageReadRange) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TMessageReadRange(%+v)", *p)
}

// Attributes:
//  - Value
//  - Meta
type ProfileContent struct {
  Value string `thrift:"value,1" db:"value" json:"value"`
  Meta map[string]string `thrift:"meta,2" db:"meta" json:"meta"`
}

func NewProfileContent() *ProfileContent {
  return &ProfileContent{}
}


func (p *ProfileContent) GetValue() string {
  return p.Value
}

func (p *ProfileContent) GetMeta() map[string]string {
  return p.Meta
}
func (p *ProfileContent) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ProfileContent)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Value = v
}
  return nil
}

func (p *ProfileContent)  ReadField2(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Meta =  tMap
  for i := 0; i < size; i ++ {
var _key57 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key57 = v
}
var _val58 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val58 = v
}
    p.Meta[_key57] = _val58
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *ProfileContent) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ProfileContent"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ProfileContent) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("value", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:value: ", p), err) }
  if err := oprot.WriteString(string(p.Value)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.value (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:value: ", p), err) }
  return err
}

func (p *ProfileContent) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("meta", thrift.MAP, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:meta: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Meta)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Meta {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:meta: ", p), err) }
  return err
}

func (p *ProfileContent) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ProfileContent(%+v)", *p)
}

// Attributes:
//  - ProfileAttributes
type UpdateProfileAttributesRequest struct {
  ProfileAttributes map[ProfileAttribute]*ProfileContent `thrift:"profileAttributes,1" db:"profileAttributes" json:"profileAttributes"`
}

func NewUpdateProfileAttributesRequest() *UpdateProfileAttributesRequest {
  return &UpdateProfileAttributesRequest{}
}


func (p *UpdateProfileAttributesRequest) GetProfileAttributes() map[ProfileAttribute]*ProfileContent {
  return p.ProfileAttributes
}
func (p *UpdateProfileAttributesRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *UpdateProfileAttributesRequest)  ReadField1(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[ProfileAttribute]*ProfileContent, size)
  p.ProfileAttributes =  tMap
  for i := 0; i < size; i ++ {
var _key59 ProfileAttribute
    if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := ProfileAttribute(v)
    _key59 = temp
}
    _val60 := &ProfileContent{}
    if err := _val60.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val60), err)
    }
    p.ProfileAttributes[_key59] = _val60
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *UpdateProfileAttributesRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("UpdateProfileAttributesRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UpdateProfileAttributesRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("profileAttributes", thrift.MAP, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:profileAttributes: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.I32, thrift.STRUCT, len(p.ProfileAttributes)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.ProfileAttributes {
    if err := oprot.WriteI32(int32(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:profileAttributes: ", p), err) }
  return err
}

func (p *UpdateProfileAttributesRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UpdateProfileAttributesRequest(%+v)", *p)
}

// Attributes:
//  - Chats
type GetChatsResponse struct {
  Chats []*Chat `thrift:"chats,1" db:"chats" json:"chats"`
}

func NewGetChatsResponse() *GetChatsResponse {
  return &GetChatsResponse{}
}


func (p *GetChatsResponse) GetChats() []*Chat {
  return p.Chats
}
func (p *GetChatsResponse) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *GetChatsResponse)  ReadField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Chat, 0, size)
  p.Chats =  tSlice
  for i := 0; i < size; i ++ {
    _elem61 := &Chat{}
    if err := _elem61.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem61), err)
    }
    p.Chats = append(p.Chats, _elem61)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *GetChatsResponse) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetChatsResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetChatsResponse) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("chats", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:chats: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Chats)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Chats {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:chats: ", p), err) }
  return err
}

func (p *GetChatsResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetChatsResponse(%+v)", *p)
}

// Attributes:
//  - AuthSessionId
type CreateQrSessionResponse struct {
  AuthSessionId string `thrift:"authSessionId,1" db:"authSessionId" json:"authSessionId"`
}

func NewCreateQrSessionResponse() *CreateQrSessionResponse {
  return &CreateQrSessionResponse{}
}


func (p *CreateQrSessionResponse) GetAuthSessionId() string {
  return p.AuthSessionId
}
func (p *CreateQrSessionResponse) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CreateQrSessionResponse)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.AuthSessionId = v
}
  return nil
}

func (p *CreateQrSessionResponse) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("CreateQrSessionResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CreateQrSessionResponse) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authSessionId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authSessionId: ", p), err) }
  if err := oprot.WriteString(string(p.AuthSessionId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.authSessionId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authSessionId: ", p), err) }
  return err
}

func (p *CreateQrSessionResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CreateQrSessionResponse(%+v)", *p)
}

type CreateQrSessionRequest struct {
}

func NewCreateQrSessionRequest() *CreateQrSessionRequest {
  return &CreateQrSessionRequest{}
}

func (p *CreateQrSessionRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CreateQrSessionRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("CreateQrSessionRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CreateQrSessionRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CreateQrSessionRequest(%+v)", *p)
}

// Attributes:
//  - CallbackUrl
type CreateQrCodeResponse struct {
  CallbackUrl string `thrift:"callbackUrl,1" db:"callbackUrl" json:"callbackUrl"`
}

func NewCreateQrCodeResponse() *CreateQrCodeResponse {
  return &CreateQrCodeResponse{}
}


func (p *CreateQrCodeResponse) GetCallbackUrl() string {
  return p.CallbackUrl
}
func (p *CreateQrCodeResponse) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CreateQrCodeResponse)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.CallbackUrl = v
}
  return nil
}

func (p *CreateQrCodeResponse) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("CreateQrCodeResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CreateQrCodeResponse) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("callbackUrl", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:callbackUrl: ", p), err) }
  if err := oprot.WriteString(string(p.CallbackUrl)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.callbackUrl (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:callbackUrl: ", p), err) }
  return err
}

func (p *CreateQrCodeResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CreateQrCodeResponse(%+v)", *p)
}

// Attributes:
//  - AuthSessionId
type CreateQrCodeRequest struct {
  AuthSessionId string `thrift:"authSessionId,1" db:"authSessionId" json:"authSessionId"`
}

func NewCreateQrCodeRequest() *CreateQrCodeRequest {
  return &CreateQrCodeRequest{}
}


func (p *CreateQrCodeRequest) GetAuthSessionId() string {
  return p.AuthSessionId
}
func (p *CreateQrCodeRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CreateQrCodeRequest)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.AuthSessionId = v
}
  return nil
}

func (p *CreateQrCodeRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("CreateQrCodeRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CreateQrCodeRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authSessionId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authSessionId: ", p), err) }
  if err := oprot.WriteString(string(p.AuthSessionId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.authSessionId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authSessionId: ", p), err) }
  return err
}

func (p *CreateQrCodeRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CreateQrCodeRequest(%+v)", *p)
}

// Attributes:
//  - PinCode
type CreatePinCodeResponse struct {
  PinCode string `thrift:"pinCode,1" db:"pinCode" json:"pinCode"`
}

func NewCreatePinCodeResponse() *CreatePinCodeResponse {
  return &CreatePinCodeResponse{}
}


func (p *CreatePinCodeResponse) GetPinCode() string {
  return p.PinCode
}
func (p *CreatePinCodeResponse) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CreatePinCodeResponse)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.PinCode = v
}
  return nil
}

func (p *CreatePinCodeResponse) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("CreatePinCodeResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CreatePinCodeResponse) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("pinCode", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:pinCode: ", p), err) }
  if err := oprot.WriteString(string(p.PinCode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.pinCode (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:pinCode: ", p), err) }
  return err
}

func (p *CreatePinCodeResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CreatePinCodeResponse(%+v)", *p)
}

// Attributes:
//  - AuthSessionId
type CreatePinCodeRequest struct {
  AuthSessionId string `thrift:"authSessionId,1" db:"authSessionId" json:"authSessionId"`
}

func NewCreatePinCodeRequest() *CreatePinCodeRequest {
  return &CreatePinCodeRequest{}
}


func (p *CreatePinCodeRequest) GetAuthSessionId() string {
  return p.AuthSessionId
}
func (p *CreatePinCodeRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CreatePinCodeRequest)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.AuthSessionId = v
}
  return nil
}

func (p *CreatePinCodeRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("CreatePinCodeRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CreatePinCodeRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authSessionId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authSessionId: ", p), err) }
  if err := oprot.WriteString(string(p.AuthSessionId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.authSessionId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authSessionId: ", p), err) }
  return err
}

func (p *CreatePinCodeRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CreatePinCodeRequest(%+v)", *p)
}

// Attributes:
//  - Certificate
//  - AccessToken
//  - LastBindTimestamp
//  - MetaData
type QrCodeLoginResponse struct {
  Certificate string `thrift:"certificate,1" db:"certificate" json:"certificate"`
  AccessToken string `thrift:"accessToken,2" db:"accessToken" json:"accessToken"`
  LastBindTimestamp int64 `thrift:"lastBindTimestamp,3" db:"lastBindTimestamp" json:"lastBindTimestamp"`
  MetaData map[string]string `thrift:"metaData,4" db:"metaData" json:"metaData"`
}

func NewQrCodeLoginResponse() *QrCodeLoginResponse {
  return &QrCodeLoginResponse{}
}


func (p *QrCodeLoginResponse) GetCertificate() string {
  return p.Certificate
}

func (p *QrCodeLoginResponse) GetAccessToken() string {
  return p.AccessToken
}

func (p *QrCodeLoginResponse) GetLastBindTimestamp() int64 {
  return p.LastBindTimestamp
}

func (p *QrCodeLoginResponse) GetMetaData() map[string]string {
  return p.MetaData
}
func (p *QrCodeLoginResponse) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *QrCodeLoginResponse)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Certificate = v
}
  return nil
}

func (p *QrCodeLoginResponse)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.AccessToken = v
}
  return nil
}

func (p *QrCodeLoginResponse)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.LastBindTimestamp = v
}
  return nil
}

func (p *QrCodeLoginResponse)  ReadField4(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.MetaData =  tMap
  for i := 0; i < size; i ++ {
var _key62 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key62 = v
}
var _val63 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val63 = v
}
    p.MetaData[_key62] = _val63
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *QrCodeLoginResponse) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("QrCodeLoginResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *QrCodeLoginResponse) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("certificate", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:certificate: ", p), err) }
  if err := oprot.WriteString(string(p.Certificate)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.certificate (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:certificate: ", p), err) }
  return err
}

func (p *QrCodeLoginResponse) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("accessToken", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:accessToken: ", p), err) }
  if err := oprot.WriteString(string(p.AccessToken)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.accessToken (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:accessToken: ", p), err) }
  return err
}

func (p *QrCodeLoginResponse) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("lastBindTimestamp", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:lastBindTimestamp: ", p), err) }
  if err := oprot.WriteI64(int64(p.LastBindTimestamp)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.lastBindTimestamp (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:lastBindTimestamp: ", p), err) }
  return err
}

func (p *QrCodeLoginResponse) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("metaData", thrift.MAP, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:metaData: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.MetaData)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.MetaData {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:metaData: ", p), err) }
  return err
}

func (p *QrCodeLoginResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("QrCodeLoginResponse(%+v)", *p)
}

// Attributes:
//  - AuthSessionId
//  - SystemName
//  - AutoLoginIsRequired
type QrCodeLoginRequest struct {
  AuthSessionId string `thrift:"authSessionId,1" db:"authSessionId" json:"authSessionId"`
  SystemName string `thrift:"systemName,2" db:"systemName" json:"systemName"`
  AutoLoginIsRequired bool `thrift:"autoLoginIsRequired,3" db:"autoLoginIsRequired" json:"autoLoginIsRequired"`
}

func NewQrCodeLoginRequest() *QrCodeLoginRequest {
  return &QrCodeLoginRequest{}
}


func (p *QrCodeLoginRequest) GetAuthSessionId() string {
  return p.AuthSessionId
}

func (p *QrCodeLoginRequest) GetSystemName() string {
  return p.SystemName
}

func (p *QrCodeLoginRequest) GetAutoLoginIsRequired() bool {
  return p.AutoLoginIsRequired
}
func (p *QrCodeLoginRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *QrCodeLoginRequest)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.AuthSessionId = v
}
  return nil
}

func (p *QrCodeLoginRequest)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.SystemName = v
}
  return nil
}

func (p *QrCodeLoginRequest)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.AutoLoginIsRequired = v
}
  return nil
}

func (p *QrCodeLoginRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("QrCodeLoginRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *QrCodeLoginRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authSessionId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authSessionId: ", p), err) }
  if err := oprot.WriteString(string(p.AuthSessionId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.authSessionId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authSessionId: ", p), err) }
  return err
}

func (p *QrCodeLoginRequest) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("systemName", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:systemName: ", p), err) }
  if err := oprot.WriteString(string(p.SystemName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.systemName (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:systemName: ", p), err) }
  return err
}

func (p *QrCodeLoginRequest) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("autoLoginIsRequired", thrift.BOOL, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:autoLoginIsRequired: ", p), err) }
  if err := oprot.WriteBool(bool(p.AutoLoginIsRequired)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.autoLoginIsRequired (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:autoLoginIsRequired: ", p), err) }
  return err
}

func (p *QrCodeLoginRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("QrCodeLoginRequest(%+v)", *p)
}

// Attributes:
//  - AuthSessionId
//  - Certificate
type VerifyCertificateRequest struct {
  AuthSessionId string `thrift:"authSessionId,1" db:"authSessionId" json:"authSessionId"`
  Certificate string `thrift:"certificate,2" db:"certificate" json:"certificate"`
}

func NewVerifyCertificateRequest() *VerifyCertificateRequest {
  return &VerifyCertificateRequest{}
}


func (p *VerifyCertificateRequest) GetAuthSessionId() string {
  return p.AuthSessionId
}

func (p *VerifyCertificateRequest) GetCertificate() string {
  return p.Certificate
}
func (p *VerifyCertificateRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *VerifyCertificateRequest)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.AuthSessionId = v
}
  return nil
}

func (p *VerifyCertificateRequest)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Certificate = v
}
  return nil
}

func (p *VerifyCertificateRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("VerifyCertificateRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *VerifyCertificateRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authSessionId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authSessionId: ", p), err) }
  if err := oprot.WriteString(string(p.AuthSessionId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.authSessionId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authSessionId: ", p), err) }
  return err
}

func (p *VerifyCertificateRequest) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("certificate", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:certificate: ", p), err) }
  if err := oprot.WriteString(string(p.Certificate)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.certificate (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:certificate: ", p), err) }
  return err
}

func (p *VerifyCertificateRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("VerifyCertificateRequest(%+v)", *p)
}

// Attributes:
//  - AuthSessionId
type CheckPinCodeVerifiedRequest struct {
  AuthSessionId string `thrift:"authSessionId,1" db:"authSessionId" json:"authSessionId"`
}

func NewCheckPinCodeVerifiedRequest() *CheckPinCodeVerifiedRequest {
  return &CheckPinCodeVerifiedRequest{}
}


func (p *CheckPinCodeVerifiedRequest) GetAuthSessionId() string {
  return p.AuthSessionId
}
func (p *CheckPinCodeVerifiedRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CheckPinCodeVerifiedRequest)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.AuthSessionId = v
}
  return nil
}

func (p *CheckPinCodeVerifiedRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("CheckPinCodeVerifiedRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CheckPinCodeVerifiedRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authSessionId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authSessionId: ", p), err) }
  if err := oprot.WriteString(string(p.AuthSessionId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.authSessionId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authSessionId: ", p), err) }
  return err
}

func (p *CheckPinCodeVerifiedRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CheckPinCodeVerifiedRequest(%+v)", *p)
}

// Attributes:
//  - AuthSessionId
type CheckQrCodeVerifiedRequest struct {
  AuthSessionId string `thrift:"authSessionId,1" db:"authSessionId" json:"authSessionId"`
}

func NewCheckQrCodeVerifiedRequest() *CheckQrCodeVerifiedRequest {
  return &CheckQrCodeVerifiedRequest{}
}


func (p *CheckQrCodeVerifiedRequest) GetAuthSessionId() string {
  return p.AuthSessionId
}
func (p *CheckQrCodeVerifiedRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *CheckQrCodeVerifiedRequest)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.AuthSessionId = v
}
  return nil
}

func (p *CheckQrCodeVerifiedRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("CheckQrCodeVerifiedRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CheckQrCodeVerifiedRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("authSessionId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authSessionId: ", p), err) }
  if err := oprot.WriteString(string(p.AuthSessionId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.authSessionId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authSessionId: ", p), err) }
  return err
}

func (p *CheckQrCodeVerifiedRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CheckQrCodeVerifiedRequest(%+v)", *p)
}

// Attributes:
//  - Code
//  - AlertMessage
type SecondaryQrCodeException struct {
  Code SecondaryQrCodeErrorCode `thrift:"code,1" db:"code" json:"code"`
  AlertMessage string `thrift:"alertMessage,2" db:"alertMessage" json:"alertMessage"`
}

func NewSecondaryQrCodeException() *SecondaryQrCodeException {
  return &SecondaryQrCodeException{}
}


func (p *SecondaryQrCodeException) GetCode() SecondaryQrCodeErrorCode {
  return p.Code
}

func (p *SecondaryQrCodeException) GetAlertMessage() string {
  return p.AlertMessage
}
func (p *SecondaryQrCodeException) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SecondaryQrCodeException)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := SecondaryQrCodeErrorCode(v)
  p.Code = temp
}
  return nil
}

func (p *SecondaryQrCodeException)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.AlertMessage = v
}
  return nil
}

func (p *SecondaryQrCodeException) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SecondaryQrCodeException"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SecondaryQrCodeException) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *SecondaryQrCodeException) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("alertMessage", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:alertMessage: ", p), err) }
  if err := oprot.WriteString(string(p.AlertMessage)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.alertMessage (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:alertMessage: ", p), err) }
  return err
}

func (p *SecondaryQrCodeException) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SecondaryQrCodeException(%+v)", *p)
}

func (p *SecondaryQrCodeException) Error() string {
  return p.String()
}

type TalkService interface {
  // Parameters:
  //  - ReqSeq
  //  - AttributesToUpdate
  //  - Settings
  UpdateSettingsAttributes2(ctx context.Context, reqSeq int32, attributesToUpdate []SettingAttribute, settings *Settings) (r []SettingAttribute, err error)
  // Parameters:
  //  - ReqSeq
  //  - Request
  UpdateProfileAttributes(ctx context.Context, reqSeq int32, request *UpdateProfileAttributesRequest) (err error)
  // Parameters:
  //  - ReqSeq
  //  - Mid
  //  - Flag
  //  - Value
  UpdateContactSetting(ctx context.Context, reqSeq int32, mid string, flag ContactSettingAttribute, value string) (err error)
  // Parameters:
  //  - SyncReason
  GetRecentFriendRequests(ctx context.Context, syncReason SyncReason) (r *FriendRequestsInfo, err error)
  GetCountryWithRequestIp(ctx context.Context) (r string, err error)
  // Parameters:
  //  - ID
  GetContact(ctx context.Context, id string) (r *Contact, err error)
  // Parameters:
  //  - ChatMid
  GetLastE2EEPublicKeys(ctx context.Context, chatMid string) (r map[string]*E2EEPublicKey, err error)
  GetRingtone(ctx context.Context) (r *Ringtone, err error)
  // Parameters:
  //  - Mid
  NegotiateE2EEPublicKey(ctx context.Context, mid string) (r *E2EENegotiationResult_, err error)
  // Parameters:
  //  - SearchId
  FindContactByUserid(ctx context.Context, searchId string) (r *Contact, err error)
  // Parameters:
  //  - Oid
  ClearRingtone(ctx context.Context, oid string) (err error)
  // Parameters:
  //  - ReqSeq
  //  - Type
  //  - Target
  //  - Enablement
  SetNotificationsEnabled(ctx context.Context, reqSeq int32, type_a1 MidType, target string, enablement bool) (err error)
  // Parameters:
  //  - Request
  DeleteOtherFromChat(ctx context.Context, request *DeleteOtherFromChatRequest) (r *DeleteOtherFromChatResponse, err error)
  // Parameters:
  //  - Request
  InviteIntoChat(ctx context.Context, request *InviteIntoChatRequest) (r *InviteIntoChatResponse, err error)
  // Parameters:
  //  - Request
  AcceptChatInvitationByTicket(ctx context.Context, request *AcceptChatInvitationByTicketRequest) (r *AcceptChatInvitationByTicketResponse, err error)
  // Parameters:
  //  - Request
  DeleteSelfFromChat(ctx context.Context, request *DeleteSelfFromChatRequest) (r *DeleteSelfFromChatResponse, err error)
  // Parameters:
  //  - Request
  FindChatByTicket(ctx context.Context, request *FindChatByTicketRequest) (r *FindChatByTicketResponse, err error)
  // Parameters:
  //  - Request
  CancelChatInvitation(ctx context.Context, request *CancelChatInvitationRequest) (r *CancelChatInvitationResponse, err error)
  // Parameters:
  //  - Request
  AcceptChatInvitation(ctx context.Context, request *AcceptChatInvitationRequest) (r *AcceptChatInvitationResponse, err error)
  // Parameters:
  //  - MessageBoxListRequest
  //  - SyncReason
  GetMessageBoxes(ctx context.Context, messageBoxListRequest *MessageBoxListRequest, syncReason SyncReason) (r *MessageBoxList, err error)
  // Parameters:
  //  - Request
  UpdateChat(ctx context.Context, request *UpdateChatRequest) (r *UpdateChatResponse, err error)
  // Parameters:
  //  - Request
  ReissueChatTicket(ctx context.Context, request *ReissueChatTicketRequest) (r *ReissueChatTicketResponse, err error)
  // Parameters:
  //  - Request
  //  - SyncReason
  GetAllChatMids(ctx context.Context, request *GetAllChatMidsRequest, syncReason SyncReason) (r *GetAllChatMidsResponse, err error)
  // Parameters:
  //  - Request
  RejectChatInvitation(ctx context.Context, request *RejectChatInvitationRequest) (r *RejectChatInvitationResponse, err error)
  // Parameters:
  //  - Request
  CreateChat(ctx context.Context, request *CreateChatRequest) (r *CreateChatResponse, err error)
  // Parameters:
  //  - ChatRoomMids
  //  - SyncReason
  GetChatRoomAnnouncementsBulk(ctx context.Context, chatRoomMids []string, syncReason SyncReason) (r map[string][]*ChatRoomAnnouncement, err error)
  // Parameters:
  //  - Request
  GetChats(ctx context.Context, request *GetChatsRequest) (r *GetChatsResponse, err error)
  // Parameters:
  //  - Region
  //  - Carrier
  //  - Phone
  //  - UdidHash
  //  - DeviceInfo
  //  - NetworkCode
  //  - Locale
  //  - SimInfo
  StartUpdateVerification(ctx context.Context, region string, carrier Carrier, phone string, udidHash string, deviceInfo *DeviceInfo, networkCode string, locale string, simInfo *SIMInfo) (r *VerificationSessionData, err error)
  // Parameters:
  //  - Region
  //  - Carrier
  //  - Phone
  //  - UdidHash
  //  - DeviceInfo
  //  - NetworkCode
  //  - Mid
  //  - Locale
  //  - SimInfo
  //  - OldUdidHash
  StartVerification(ctx context.Context, region string, carrier Carrier, phone string, udidHash string, deviceInfo *DeviceInfo, networkCode string, mid string, locale string, simInfo *SIMInfo, oldUdidHash string) (r *VerificationSessionData, err error)
  // Parameters:
  //  - SessionId
  //  - Method
  ChangeVerificationMethod(ctx context.Context, sessionId string, method Y30) (r *VerificationSessionData, err error)
  GetEncryptedIdentityV3(ctx context.Context) (r *GetEncryptedIdentityV3Response, err error)
  // Parameters:
  //  - KeyVersion
  //  - ChatMid
  //  - GroupKeyId
  GetE2EEGroupSharedKey(ctx context.Context, keyVersion int32, chatMid string, groupKeyId int32) (r *E2EEGroupSharedKey, err error)
  // Parameters:
  //  - KeyVersion
  //  - ChatMid
  //  - Members
  //  - KeyIds
  //  - EncryptedSharedKeys
  RegisterE2EEGroupKey(ctx context.Context, keyVersion int32, chatMid string, members []string, keyIds []int32, encryptedSharedKeys [][]byte) (r *E2EEGroupSharedKey, err error)
  // Parameters:
  //  - ExpirationTime
  //  - MaxUseCount
  GenerateUserTicket(ctx context.Context, expirationTime int64, maxUseCount int32) (r *Ticket, err error)
  // Parameters:
  //  - ReqSeq
  //  - PublicKey
  RegisterE2EEPublicKey(ctx context.Context, reqSeq int32, publicKey *E2EEPublicKey) (r *E2EEPublicKey, err error)
  // Parameters:
  //  - Mid
  //  - KeyVersion
  //  - KeyId
  GetE2EEPublicKey(ctx context.Context, mid string, keyVersion int32, keyId int32) (r *E2EEPublicKey, err error)
  // Parameters:
  //  - Provider
  GetRSAKeyInfo(ctx context.Context, provider IdentityProvider) (r *RSAKey, err error)
  // Parameters:
  //  - SnsIdType
  //  - SnsAccessToken
  //  - Region
  //  - UdidHash
  //  - DeviceInfo
  //  - Mid
  //  - MigrationPincodeSessionId
  RegisterWithSnsId(ctx context.Context, snsIdType C60759oi, snsAccessToken string, region string, udidHash string, deviceInfo *DeviceInfo, mid string, migrationPincodeSessionId string) (r *RegisterWithSnsIdResult_, err error)
  // Parameters:
  //  - SnsIdType
  //  - SnsAccessToken
  //  - UdidHash
  //  - MigrationPincodeSessionId
  //  - OldUdidHash
  FindSnsIdUserStatus(ctx context.Context, snsIdType C60759oi, snsAccessToken string, udidHash string, migrationPincodeSessionId string, oldUdidHash string) (r *SnsIdUserStatus, err error)
  // Parameters:
  //  - ID
  //  - Type
  GetContactRegistration(ctx context.Context, id string, type_a1 ContactType) (r *ContactRegistration, err error)
  // Parameters:
  //  - SessionId
  //  - PinCode
  //  - UdidHash
  //  - MigrationPincodeSessionId
  //  - OldUdidHash
  VerifyPhoneNumber(ctx context.Context, sessionId string, pinCode string, udidHash string, migrationPincodeSessionId string, oldUdidHash string) (r *PhoneVerificationResult_, err error)
  // Parameters:
  //  - FeatureType
  AcquireEncryptedAccessToken(ctx context.Context, featureType FeatureType) (r string, err error)
  // Parameters:
  //  - SnsIdType
  //  - SnsAccessToken
  //  - IdentityCredential
  //  - Region
  //  - UdidHash
  //  - DeviceInfo
  //  - MigrationPincodeSessionId
  RegisterWithSnsIdAndIdentityCredential(ctx context.Context, snsIdType C60759oi, snsAccessToken string, identityCredential *IdentityCredential, region string, udidHash string, deviceInfo *DeviceInfo, migrationPincodeSessionId string) (r string, err error)
  // Parameters:
  //  - Location
  GetShakeEventV1(ctx context.Context, location *Geolocation) (r string, err error)
  // Parameters:
  //  - SessionId
  //  - Identifier
  //  - Verifier
  //  - Provider
  //  - MigrationPincodeSessionId
  RegisterDeviceWithIdentityCredential(ctx context.Context, sessionId string, identifier string, verifier string, provider IdentityProvider, migrationPincodeSessionId string) (r string, err error)
  // Parameters:
  //  - Latitude
  //  - Longitude
  //  - Accuracy
  //  - NetworkStatus
  //  - AltitudeMeters
  //  - VelocityMetersPerSecond
  //  - BearingDegrees
  UpdateAndGetNearby(ctx context.Context, latitude float64, longitude float64, accuracy *GeolocationAccuracy, networkStatus *ClientNetworkStatus, altitudeMeters float64, velocityMetersPerSecond float64, bearingDegrees float64) (r []*NearbyEntry, err error)
  // Parameters:
  //  - LocalRev
  //  - Count
  FetchOperations(ctx context.Context, localRev int64, count int32) (r []*Operation, err error)
  // Parameters:
  //  - LocalRev
  //  - Count
  //  - GlobalRev
  //  - IndividualRev
  FetchOps(ctx context.Context, localRev int64, count int32, globalRev int64, individualRev int64) (r []*Operation, err error)
  // Parameters:
  //  - Seq
  //  - MessageId
  UnsendMessage(ctx context.Context, seq int32, messageId string) (err error)
  // Parameters:
  //  - ReqSeq
  //  - ID
  BlockRecommendation(ctx context.Context, reqSeq int32, id string) (err error)
  // Parameters:
  //  - ReqSeq
  //  - Mid
  //  - Type
  //  - Reference
  FindAndAddContactsByMid(ctx context.Context, reqSeq int32, mid string, type_a1 ContactType, reference string) (r map[string]*Contact, err error)
  // Parameters:
  //  - ReqSeq
  //  - SenderMid
  //  - MessageId
  RequestResendMessage(ctx context.Context, reqSeq int32, senderMid string, messageId string) (err error)
  // Parameters:
  //  - Seq
  //  - ChatMid
  //  - LastMessageId
  //  - SessionId
  SendChatRemoved(ctx context.Context, seq int32, chatMid string, lastMessageId string, sessionId int32) (err error)
  // Parameters:
  //  - ReqSeq
  //  - ReceiverMid
  //  - OriginalMessageId
  //  - ResendMessage
  //  - ErrorCode
  RespondResendMessage(ctx context.Context, reqSeq int32, receiverMid string, originalMessageId string, resendMessage *Message, errorCode TalkExceptionCode) (err error)
  // Parameters:
  //  - ReqSeq
  //  - RoomId
  //  - ContactIds
  InviteIntoRoom(ctx context.Context, reqSeq int32, roomId string, contactIds []string) (err error)
  // Parameters:
  //  - ReqSeq
  //  - EncryptedKeyChain
  //  - HashKeyChain
  RespondE2EEKeyExchange(ctx context.Context, reqSeq int32, encryptedKeyChain []byte, hashKeyChain []byte) (err error)
  // Parameters:
  //  - ReqSeq
  //  - LocalContacts
  SyncContacts(ctx context.Context, reqSeq int32, localContacts []*ContactModification) (r map[string]*ContactRegistration, err error)
  // Parameters:
  //  - ReqSeq
  //  - Phones
  //  - Reference
  FindAndAddContactsByPhone(ctx context.Context, reqSeq int32, phones []string, reference string) (r map[string]*Contact, err error)
  // Parameters:
  //  - LastRev
  //  - Badge
  NotifySleep(ctx context.Context, lastRev int64, badge int32) (err error)
  // Parameters:
  //  - SyncOpRevision
  //  - Profile
  ReportProfile(ctx context.Context, syncOpRevision int64, profile *Profile) (err error)
  // Parameters:
  //  - LastRev
  //  - DeviceInfo
  //  - UdidHash
  //  - OldUdidHash
  NotifyUpdated(ctx context.Context, lastRev int64, deviceInfo *DeviceInfo, udidHash string, oldUdidHash string) (err error)
  // Parameters:
  //  - SyncOpRevision
  //  - Settings
  ReportSettings(ctx context.Context, syncOpRevision int64, settings *Settings) (err error)
  // Parameters:
  //  - SyncReason
  GetBlockedContactIds(ctx context.Context, syncReason SyncReason) (r []string, err error)
  // Parameters:
  //  - Location
  //  - NetworkStatus
  OpenProximityMatch(ctx context.Context, location *Location, networkStatus *ClientNetworkStatus) (r string, err error)
  // Parameters:
  //  - Direction
  //  - MidOrEMid
  RemoveFriendRequest(ctx context.Context, direction Direction, midOrEMid string) (err error)
  // Parameters:
  //  - Token
  //  - Type
  UpdateNotificationToken(ctx context.Context, token string, type_a1 UpdateNotificationTokenType) (err error)
  // Parameters:
  //  - ReqSeq
  //  - Attr
  //  - ExtendedProfile
  UpdateExtendedProfileAttribute(ctx context.Context, reqSeq int32, attr UpdateExtendedProfileAttributeAttr, extendedProfile *ExtendedProfile) (err error)
  // Parameters:
  //  - IdentityCredential
  //  - MigrationPincodeSessionId
  VerifyIdentityCredentialWithResult_(ctx context.Context, identityCredential *IdentityCredential, migrationPincodeSessionId string) (r *UserAuthStatus, err error)
  // Parameters:
  //  - Identifier
  //  - Provider
  //  - Locale
  RequestAccountPasswordReset(ctx context.Context, identifier string, provider IdentityProvider, locale string) (err error)
  // Parameters:
  //  - Request
  SendPostback(ctx context.Context, request *SendPostbackRequest) (err error)
  // Parameters:
  //  - MidOrEMid
  //  - Method
  //  - FriendRequestParams
  TryFriendRequest(ctx context.Context, midOrEMid string, method FriendRequestMethod, friendRequestParams string) (err error)
  // Parameters:
  //  - SessionId
  //  - Ids
  AcceptProximityMatches(ctx context.Context, sessionId string, ids []string) (err error)
  // Parameters:
  //  - Ids
  GetContacts(ctx context.Context, ids []string) (r []*Contact, err error)
  // Parameters:
  //  - BooleanState
  //  - StringState
  ReportDeviceState(ctx context.Context, booleanState map[C59122ec]bool, stringState map[C59430gc]string) (err error)
  // Parameters:
  //  - ReqSeq
  //  - ID
  BlockContact(ctx context.Context, reqSeq int32, id string) (err error)
  // Parameters:
  //  - SyncReason
  GetExtendedProfile(ctx context.Context, syncReason SyncReason) (r *ExtendedProfile, err error)
  // Parameters:
  //  - AttributesToRetrieve
  GetSettingsAttributes2(ctx context.Context, attributesToRetrieve []SettingAttribute) (r *Settings, err error)
  // Parameters:
  //  - SyncReason
  GetProfile(ctx context.Context, syncReason SyncReason) (r *Profile, err error)
  // Parameters:
  //  - SessionId
  GetProximityMatchCandidateList(ctx context.Context, sessionId string) (r *ProximityMatchCandidateResult_, err error)
  // Parameters:
  //  - ReqSeq
  //  - SearchId
  //  - Reference
  FindAndAddContactByMetaTag(ctx context.Context, reqSeq int32, searchId string, reference string) (r *PendingAgreementsResponse, err error)
  // Parameters:
  //  - ChatIds
  //  - SyncReason
  GetMessageReadRange(ctx context.Context, chatIds []string, syncReason SyncReason) (r []*TMessageReadRange, err error)
  // Parameters:
  //  - ReqSeq
  //  - SearchId
  RegisterUserid(ctx context.Context, reqSeq int32, searchId string) (r bool, err error)
  // Parameters:
  //  - ReqSeq
  //  - PushRecvReports
  ReportPushRecvReports(ctx context.Context, reqSeq int32, pushRecvReports []*PushRecvReport) (err error)
  Noop(ctx context.Context) (err error)
  // Parameters:
  //  - SyncReason
  GetBlockedRecommendationIds(ctx context.Context, syncReason SyncReason) (r []string, err error)
  // Parameters:
  //  - RemoveFollowerRequest
  RemoveFollower(ctx context.Context, removeFollowerRequest *RemoveFollowerRequest) (err error)
  // Parameters:
  //  - MigrationSessionId
  VerifyAccountMigration(ctx context.Context, migrationSessionId string) (err error)
  // Parameters:
  //  - SyncReason
  GetSettings(ctx context.Context, syncReason SyncReason) (r *Settings, err error)
  // Parameters:
  //  - KeyVersion
  //  - ChatMid
  GetLastE2EEGroupSharedKey(ctx context.Context, keyVersion int32, chatMid string) (r *E2EEGroupSharedKey, err error)
  GetRingbackTone(ctx context.Context) (r *RingbackTone, err error)
  // Parameters:
  //  - ReqSeq
  //  - RoomId
  LeaveRoom(ctx context.Context, reqSeq int32, roomId string) (err error)
  // Parameters:
  //  - Seq
  //  - ChatMid
  //  - LastMessageId
  //  - SessionId
  SendChatChecked(ctx context.Context, seq int32, chatMid string, lastMessageId string, sessionId int32) (err error)
  // Parameters:
  //  - ReqSeq
  //  - SearchId
  //  - Reference
  FindAndAddContactsByUserid(ctx context.Context, reqSeq int32, searchId string, reference string) (r map[string]*Contact, err error)
  // Parameters:
  //  - SyncReason
  GetAllContactIds(ctx context.Context, syncReason SyncReason) (r []string, err error)
  // Parameters:
  //  - UnfollowRequest
  Unfollow(ctx context.Context, unfollowRequest *UnfollowRequest) (err error)
  // Parameters:
  //  - SessionId
  CloseProximityMatch(ctx context.Context, sessionId string) (err error)
  // Parameters:
  //  - PhoneNumberList
  InviteFriendsBySms(ctx context.Context, phoneNumberList []string) (err error)
  // Parameters:
  //  - Categories
  GetChatEffectMetaList(ctx context.Context, categories []C58964da) (r []*ChatEffectMeta, err error)
  // Parameters:
  //  - Seq
  //  - LastMessageId
  RemoveAllMessages(ctx context.Context, seq int32, lastMessageId string) (err error)
  // Parameters:
  //  - ReqSeq
  //  - ID
  //  - Reference
  UnblockContact(ctx context.Context, reqSeq int32, id string, reference string) (err error)
  GetAnalyticsInfo(ctx context.Context) (r *AnalyticsInfo, err error)
  // Parameters:
  //  - SyncReason
  GetRecommendationIds(ctx context.Context, syncReason SyncReason) (r []string, err error)
  // Parameters:
  //  - UdidHash
  //  - ApplicationTypeWithExtensions
  NotifyRegistrationComplete(ctx context.Context, udidHash string, applicationTypeWithExtensions string) (err error)
  // Parameters:
  //  - ClientRevision
  WakeUpLongPolling(ctx context.Context, clientRevision int64) (r bool, err error)
  // Parameters:
  //  - ReqSeq
  //  - ID
  UnblockRecommendation(ctx context.Context, reqSeq int32, id string) (err error)
  // Parameters:
  //  - Seq
  //  - Message
  SendMessage(ctx context.Context, seq int32, message *Message) (r *Message, err error)
  // Parameters:
  //  - Text
  SendEchoPush(ctx context.Context, text string) (err error)
  // Parameters:
  //  - MigrationPincodeSessionId
  //  - AccountMigrationPincode
  VerifyAccountMigrationPincode(ctx context.Context, migrationPincodeSessionId string, accountMigrationPincode string) (err error)
  // Parameters:
  //  - UdidHash
  //  - ApplicationTypeWithExtensions
  NotifyInstalled(ctx context.Context, udidHash string, applicationTypeWithExtensions string) (err error)
  // Parameters:
  //  - Verifier
  //  - PinCode
  VerifyQrcode(ctx context.Context, verifier string, pinCode string) (r string, err error)
  // Parameters:
  //  - SearchId
  //  - Reference
  FindContactByMetaTag(ctx context.Context, searchId string, reference string) (r *Contact, err error)
  // Parameters:
  //  - Phones
  FindContactsByPhone(ctx context.Context, phones []string) (r map[string]*Contact, err error)
  // Parameters:
  //  - SessionId
  //  - MigrationPincodeSessionId
  RegisterWithPhoneNumber(ctx context.Context, sessionId string, migrationPincodeSessionId string) (r *RegisterWithPhoneNumberResult_, err error)
  // Parameters:
  //  - EMid
  DecryptFollowEMid(ctx context.Context, eMid string) (r string, err error)
  // Parameters:
  //  - AccountMigrationPincode
  UpdateAccountMigrationPincode(ctx context.Context, accountMigrationPincode string) (err error)
  // Parameters:
  //  - SearchId
  IsUseridAvailable(ctx context.Context, searchId string) (r bool, err error)
  // Parameters:
  //  - GetFollowersRequest
  GetFollowers(ctx context.Context, getFollowersRequest *GetFollowersRequest) (r *GetFollowersResponse, err error)
  CreateAccountMigrationPincodeSession(ctx context.Context) (r string, err error)
  // Parameters:
  //  - SessionId
  ResendPinCode(ctx context.Context, sessionId string) (err error)
  // Parameters:
  //  - GetFollowingsRequest
  GetFollowings(ctx context.Context, getFollowingsRequest *GetFollowingsRequest) (r *GetFollowingsResponse, err error)
  GetServerTime(ctx context.Context) (r int64, err error)
  GetLastOpRevision(ctx context.Context) (r int64, err error)
  // Parameters:
  //  - TicketIdWithTag
  FindContactByUserTicket(ctx context.Context, ticketIdWithTag string) (r *Contact, err error)
  // Parameters:
  //  - SessionId
  FinishUpdateVerification(ctx context.Context, sessionId string) (err error)
  // Parameters:
  //  - SessionId
  GetAcceptedProximityMatches(ctx context.Context, sessionId string) (r []string, err error)
  ClearRingbackTone(ctx context.Context) (err error)
  UnregisterUserAndDevice(ctx context.Context) (r string, err error)
}

type TalkServiceClient struct {
  c thrift.TClient
}

func NewTalkServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *TalkServiceClient {
  return &TalkServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewTalkServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *TalkServiceClient {
  return &TalkServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewTalkServiceClient(c thrift.TClient) *TalkServiceClient {
  return &TalkServiceClient{
    c: c,
  }
}

func (p *TalkServiceClient) Client_() thrift.TClient {
  return p.c
}
// Parameters:
//  - ReqSeq
//  - AttributesToUpdate
//  - Settings
func (p *TalkServiceClient) UpdateSettingsAttributes2(ctx context.Context, reqSeq int32, attributesToUpdate []SettingAttribute, settings *Settings) (r []SettingAttribute, err error) {
  var _args64 TalkServiceUpdateSettingsAttributes2Args
  _args64.ReqSeq = reqSeq
  _args64.AttributesToUpdate = attributesToUpdate
  _args64.Settings = settings
  var _result65 TalkServiceUpdateSettingsAttributes2Result
  if err = p.Client_().Call(ctx, "updateSettingsAttributes2", &_args64, &_result65); err != nil {
    return
  }
  switch {
  case _result65.E!= nil:
    return r, _result65.E
  }

  return _result65.GetSuccess(), nil
}

// Parameters:
//  - ReqSeq
//  - Request
func (p *TalkServiceClient) UpdateProfileAttributes(ctx context.Context, reqSeq int32, request *UpdateProfileAttributesRequest) (err error) {
  var _args66 TalkServiceUpdateProfileAttributesArgs
  _args66.ReqSeq = reqSeq
  _args66.Request = request
  var _result67 TalkServiceUpdateProfileAttributesResult
  if err = p.Client_().Call(ctx, "updateProfileAttributes", &_args66, &_result67); err != nil {
    return
  }
  switch {
  case _result67.E!= nil:
    return _result67.E
  }

  return nil
}

// Parameters:
//  - ReqSeq
//  - Mid
//  - Flag
//  - Value
func (p *TalkServiceClient) UpdateContactSetting(ctx context.Context, reqSeq int32, mid string, flag ContactSettingAttribute, value string) (err error) {
  var _args68 TalkServiceUpdateContactSettingArgs
  _args68.ReqSeq = reqSeq
  _args68.Mid = mid
  _args68.Flag = flag
  _args68.Value = value
  var _result69 TalkServiceUpdateContactSettingResult
  if err = p.Client_().Call(ctx, "updateContactSetting", &_args68, &_result69); err != nil {
    return
  }
  switch {
  case _result69.E!= nil:
    return _result69.E
  }

  return nil
}

// Parameters:
//  - SyncReason
func (p *TalkServiceClient) GetRecentFriendRequests(ctx context.Context, syncReason SyncReason) (r *FriendRequestsInfo, err error) {
  var _args70 TalkServiceGetRecentFriendRequestsArgs
  _args70.SyncReason = syncReason
  var _result71 TalkServiceGetRecentFriendRequestsResult
  if err = p.Client_().Call(ctx, "getRecentFriendRequests", &_args70, &_result71); err != nil {
    return
  }
  switch {
  case _result71.E!= nil:
    return r, _result71.E
  }

  return _result71.GetSuccess(), nil
}

func (p *TalkServiceClient) GetCountryWithRequestIp(ctx context.Context) (r string, err error) {
  var _args72 TalkServiceGetCountryWithRequestIpArgs
  var _result73 TalkServiceGetCountryWithRequestIpResult
  if err = p.Client_().Call(ctx, "getCountryWithRequestIp", &_args72, &_result73); err != nil {
    return
  }
  switch {
  case _result73.E!= nil:
    return r, _result73.E
  }

  return _result73.GetSuccess(), nil
}

// Parameters:
//  - ID
func (p *TalkServiceClient) GetContact(ctx context.Context, id string) (r *Contact, err error) {
  var _args74 TalkServiceGetContactArgs
  _args74.ID = id
  var _result75 TalkServiceGetContactResult
  if err = p.Client_().Call(ctx, "getContact", &_args74, &_result75); err != nil {
    return
  }
  switch {
  case _result75.E!= nil:
    return r, _result75.E
  }

  return _result75.GetSuccess(), nil
}

// Parameters:
//  - ChatMid
func (p *TalkServiceClient) GetLastE2EEPublicKeys(ctx context.Context, chatMid string) (r map[string]*E2EEPublicKey, err error) {
  var _args76 TalkServiceGetLastE2EEPublicKeysArgs
  _args76.ChatMid = chatMid
  var _result77 TalkServiceGetLastE2EEPublicKeysResult
  if err = p.Client_().Call(ctx, "getLastE2EEPublicKeys", &_args76, &_result77); err != nil {
    return
  }
  switch {
  case _result77.E!= nil:
    return r, _result77.E
  }

  return _result77.GetSuccess(), nil
}

func (p *TalkServiceClient) GetRingtone(ctx context.Context) (r *Ringtone, err error) {
  var _args78 TalkServiceGetRingtoneArgs
  var _result79 TalkServiceGetRingtoneResult
  if err = p.Client_().Call(ctx, "getRingtone", &_args78, &_result79); err != nil {
    return
  }
  switch {
  case _result79.E!= nil:
    return r, _result79.E
  }

  return _result79.GetSuccess(), nil
}

// Parameters:
//  - Mid
func (p *TalkServiceClient) NegotiateE2EEPublicKey(ctx context.Context, mid string) (r *E2EENegotiationResult_, err error) {
  var _args80 TalkServiceNegotiateE2EEPublicKeyArgs
  _args80.Mid = mid
  var _result81 TalkServiceNegotiateE2EEPublicKeyResult
  if err = p.Client_().Call(ctx, "negotiateE2EEPublicKey", &_args80, &_result81); err != nil {
    return
  }
  switch {
  case _result81.E!= nil:
    return r, _result81.E
  }

  return _result81.GetSuccess(), nil
}

// Parameters:
//  - SearchId
func (p *TalkServiceClient) FindContactByUserid(ctx context.Context, searchId string) (r *Contact, err error) {
  var _args82 TalkServiceFindContactByUseridArgs
  _args82.SearchId = searchId
  var _result83 TalkServiceFindContactByUseridResult
  if err = p.Client_().Call(ctx, "findContactByUserid", &_args82, &_result83); err != nil {
    return
  }
  switch {
  case _result83.E!= nil:
    return r, _result83.E
  }

  return _result83.GetSuccess(), nil
}

// Parameters:
//  - Oid
func (p *TalkServiceClient) ClearRingtone(ctx context.Context, oid string) (err error) {
  var _args84 TalkServiceClearRingtoneArgs
  _args84.Oid = oid
  var _result85 TalkServiceClearRingtoneResult
  if err = p.Client_().Call(ctx, "clearRingtone", &_args84, &_result85); err != nil {
    return
  }
  switch {
  case _result85.E!= nil:
    return _result85.E
  }

  return nil
}

// Parameters:
//  - ReqSeq
//  - Type
//  - Target
//  - Enablement
func (p *TalkServiceClient) SetNotificationsEnabled(ctx context.Context, reqSeq int32, type_a1 MidType, target string, enablement bool) (err error) {
  var _args86 TalkServiceSetNotificationsEnabledArgs
  _args86.ReqSeq = reqSeq
  _args86.Type = type_a1
  _args86.Target = target
  _args86.Enablement = enablement
  var _result87 TalkServiceSetNotificationsEnabledResult
  if err = p.Client_().Call(ctx, "setNotificationsEnabled", &_args86, &_result87); err != nil {
    return
  }
  switch {
  case _result87.E!= nil:
    return _result87.E
  }

  return nil
}

// Parameters:
//  - Request
func (p *TalkServiceClient) DeleteOtherFromChat(ctx context.Context, request *DeleteOtherFromChatRequest) (r *DeleteOtherFromChatResponse, err error) {
  var _args88 TalkServiceDeleteOtherFromChatArgs
  _args88.Request = request
  var _result89 TalkServiceDeleteOtherFromChatResult
  if err = p.Client_().Call(ctx, "deleteOtherFromChat", &_args88, &_result89); err != nil {
    return
  }
  switch {
  case _result89.E!= nil:
    return r, _result89.E
  }

  return _result89.GetSuccess(), nil
}

// Parameters:
//  - Request
func (p *TalkServiceClient) InviteIntoChat(ctx context.Context, request *InviteIntoChatRequest) (r *InviteIntoChatResponse, err error) {
  var _args90 TalkServiceInviteIntoChatArgs
  _args90.Request = request
  var _result91 TalkServiceInviteIntoChatResult
  if err = p.Client_().Call(ctx, "inviteIntoChat", &_args90, &_result91); err != nil {
    return
  }
  switch {
  case _result91.E!= nil:
    return r, _result91.E
  }

  return _result91.GetSuccess(), nil
}

// Parameters:
//  - Request
func (p *TalkServiceClient) AcceptChatInvitationByTicket(ctx context.Context, request *AcceptChatInvitationByTicketRequest) (r *AcceptChatInvitationByTicketResponse, err error) {
  var _args92 TalkServiceAcceptChatInvitationByTicketArgs
  _args92.Request = request
  var _result93 TalkServiceAcceptChatInvitationByTicketResult
  if err = p.Client_().Call(ctx, "acceptChatInvitationByTicket", &_args92, &_result93); err != nil {
    return
  }
  switch {
  case _result93.E!= nil:
    return r, _result93.E
  }

  return _result93.GetSuccess(), nil
}

// Parameters:
//  - Request
func (p *TalkServiceClient) DeleteSelfFromChat(ctx context.Context, request *DeleteSelfFromChatRequest) (r *DeleteSelfFromChatResponse, err error) {
  var _args94 TalkServiceDeleteSelfFromChatArgs
  _args94.Request = request
  var _result95 TalkServiceDeleteSelfFromChatResult
  if err = p.Client_().Call(ctx, "deleteSelfFromChat", &_args94, &_result95); err != nil {
    return
  }
  switch {
  case _result95.E!= nil:
    return r, _result95.E
  }

  return _result95.GetSuccess(), nil
}

// Parameters:
//  - Request
func (p *TalkServiceClient) FindChatByTicket(ctx context.Context, request *FindChatByTicketRequest) (r *FindChatByTicketResponse, err error) {
  var _args96 TalkServiceFindChatByTicketArgs
  _args96.Request = request
  var _result97 TalkServiceFindChatByTicketResult
  if err = p.Client_().Call(ctx, "findChatByTicket", &_args96, &_result97); err != nil {
    return
  }
  switch {
  case _result97.E!= nil:
    return r, _result97.E
  }

  return _result97.GetSuccess(), nil
}

// Parameters:
//  - Request
func (p *TalkServiceClient) CancelChatInvitation(ctx context.Context, request *CancelChatInvitationRequest) (r *CancelChatInvitationResponse, err error) {
  var _args98 TalkServiceCancelChatInvitationArgs
  _args98.Request = request
  var _result99 TalkServiceCancelChatInvitationResult
  if err = p.Client_().Call(ctx, "cancelChatInvitation", &_args98, &_result99); err != nil {
    return
  }
  switch {
  case _result99.E!= nil:
    return r, _result99.E
  }

  return _result99.GetSuccess(), nil
}

// Parameters:
//  - Request
func (p *TalkServiceClient) AcceptChatInvitation(ctx context.Context, request *AcceptChatInvitationRequest) (r *AcceptChatInvitationResponse, err error) {
  var _args100 TalkServiceAcceptChatInvitationArgs
  _args100.Request = request
  var _result101 TalkServiceAcceptChatInvitationResult
  if err = p.Client_().Call(ctx, "acceptChatInvitation", &_args100, &_result101); err != nil {
    return
  }
  switch {
  case _result101.E!= nil:
    return r, _result101.E
  }

  return _result101.GetSuccess(), nil
}

// Parameters:
//  - MessageBoxListRequest
//  - SyncReason
func (p *TalkServiceClient) GetMessageBoxes(ctx context.Context, messageBoxListRequest *MessageBoxListRequest, syncReason SyncReason) (r *MessageBoxList, err error) {
  var _args102 TalkServiceGetMessageBoxesArgs
  _args102.MessageBoxListRequest = messageBoxListRequest
  _args102.SyncReason = syncReason
  var _result103 TalkServiceGetMessageBoxesResult
  if err = p.Client_().Call(ctx, "getMessageBoxes", &_args102, &_result103); err != nil {
    return
  }
  switch {
  case _result103.E!= nil:
    return r, _result103.E
  }

  return _result103.GetSuccess(), nil
}

// Parameters:
//  - Request
func (p *TalkServiceClient) UpdateChat(ctx context.Context, request *UpdateChatRequest) (r *UpdateChatResponse, err error) {
  var _args104 TalkServiceUpdateChatArgs
  _args104.Request = request
  var _result105 TalkServiceUpdateChatResult
  if err = p.Client_().Call(ctx, "updateChat", &_args104, &_result105); err != nil {
    return
  }
  switch {
  case _result105.E!= nil:
    return r, _result105.E
  }

  return _result105.GetSuccess(), nil
}

// Parameters:
//  - Request
func (p *TalkServiceClient) ReissueChatTicket(ctx context.Context, request *ReissueChatTicketRequest) (r *ReissueChatTicketResponse, err error) {
  var _args106 TalkServiceReissueChatTicketArgs
  _args106.Request = request
  var _result107 TalkServiceReissueChatTicketResult
  if err = p.Client_().Call(ctx, "reissueChatTicket", &_args106, &_result107); err != nil {
    return
  }
  switch {
  case _result107.E!= nil:
    return r, _result107.E
  }

  return _result107.GetSuccess(), nil
}

// Parameters:
//  - Request
//  - SyncReason
func (p *TalkServiceClient) GetAllChatMids(ctx context.Context, request *GetAllChatMidsRequest, syncReason SyncReason) (r *GetAllChatMidsResponse, err error) {
  var _args108 TalkServiceGetAllChatMidsArgs
  _args108.Request = request
  _args108.SyncReason = syncReason
  var _result109 TalkServiceGetAllChatMidsResult
  if err = p.Client_().Call(ctx, "getAllChatMids", &_args108, &_result109); err != nil {
    return
  }
  switch {
  case _result109.E!= nil:
    return r, _result109.E
  }

  return _result109.GetSuccess(), nil
}

// Parameters:
//  - Request
func (p *TalkServiceClient) RejectChatInvitation(ctx context.Context, request *RejectChatInvitationRequest) (r *RejectChatInvitationResponse, err error) {
  var _args110 TalkServiceRejectChatInvitationArgs
  _args110.Request = request
  var _result111 TalkServiceRejectChatInvitationResult
  if err = p.Client_().Call(ctx, "rejectChatInvitation", &_args110, &_result111); err != nil {
    return
  }
  switch {
  case _result111.E!= nil:
    return r, _result111.E
  }

  return _result111.GetSuccess(), nil
}

// Parameters:
//  - Request
func (p *TalkServiceClient) CreateChat(ctx context.Context, request *CreateChatRequest) (r *CreateChatResponse, err error) {
  var _args112 TalkServiceCreateChatArgs
  _args112.Request = request
  var _result113 TalkServiceCreateChatResult
  if err = p.Client_().Call(ctx, "createChat", &_args112, &_result113); err != nil {
    return
  }
  switch {
  case _result113.E!= nil:
    return r, _result113.E
  }

  return _result113.GetSuccess(), nil
}

// Parameters:
//  - ChatRoomMids
//  - SyncReason
func (p *TalkServiceClient) GetChatRoomAnnouncementsBulk(ctx context.Context, chatRoomMids []string, syncReason SyncReason) (r map[string][]*ChatRoomAnnouncement, err error) {
  var _args114 TalkServiceGetChatRoomAnnouncementsBulkArgs
  _args114.ChatRoomMids = chatRoomMids
  _args114.SyncReason = syncReason
  var _result115 TalkServiceGetChatRoomAnnouncementsBulkResult
  if err = p.Client_().Call(ctx, "getChatRoomAnnouncementsBulk", &_args114, &_result115); err != nil {
    return
  }
  switch {
  case _result115.E!= nil:
    return r, _result115.E
  }

  return _result115.GetSuccess(), nil
}

// Parameters:
//  - Request
func (p *TalkServiceClient) GetChats(ctx context.Context, request *GetChatsRequest) (r *GetChatsResponse, err error) {
  var _args116 TalkServiceGetChatsArgs
  _args116.Request = request
  var _result117 TalkServiceGetChatsResult
  if err = p.Client_().Call(ctx, "getChats", &_args116, &_result117); err != nil {
    return
  }
  switch {
  case _result117.E!= nil:
    return r, _result117.E
  }

  return _result117.GetSuccess(), nil
}

// Parameters:
//  - Region
//  - Carrier
//  - Phone
//  - UdidHash
//  - DeviceInfo
//  - NetworkCode
//  - Locale
//  - SimInfo
func (p *TalkServiceClient) StartUpdateVerification(ctx context.Context, region string, carrier Carrier, phone string, udidHash string, deviceInfo *DeviceInfo, networkCode string, locale string, simInfo *SIMInfo) (r *VerificationSessionData, err error) {
  var _args118 TalkServiceStartUpdateVerificationArgs
  _args118.Region = region
  _args118.Carrier = carrier
  _args118.Phone = phone
  _args118.UdidHash = udidHash
  _args118.DeviceInfo = deviceInfo
  _args118.NetworkCode = networkCode
  _args118.Locale = locale
  _args118.SimInfo = simInfo
  var _result119 TalkServiceStartUpdateVerificationResult
  if err = p.Client_().Call(ctx, "startUpdateVerification", &_args118, &_result119); err != nil {
    return
  }
  switch {
  case _result119.E!= nil:
    return r, _result119.E
  }

  return _result119.GetSuccess(), nil
}

// Parameters:
//  - Region
//  - Carrier
//  - Phone
//  - UdidHash
//  - DeviceInfo
//  - NetworkCode
//  - Mid
//  - Locale
//  - SimInfo
//  - OldUdidHash
func (p *TalkServiceClient) StartVerification(ctx context.Context, region string, carrier Carrier, phone string, udidHash string, deviceInfo *DeviceInfo, networkCode string, mid string, locale string, simInfo *SIMInfo, oldUdidHash string) (r *VerificationSessionData, err error) {
  var _args120 TalkServiceStartVerificationArgs
  _args120.Region = region
  _args120.Carrier = carrier
  _args120.Phone = phone
  _args120.UdidHash = udidHash
  _args120.DeviceInfo = deviceInfo
  _args120.NetworkCode = networkCode
  _args120.Mid = mid
  _args120.Locale = locale
  _args120.SimInfo = simInfo
  _args120.OldUdidHash = oldUdidHash
  var _result121 TalkServiceStartVerificationResult
  if err = p.Client_().Call(ctx, "startVerification", &_args120, &_result121); err != nil {
    return
  }
  switch {
  case _result121.E!= nil:
    return r, _result121.E
  }

  return _result121.GetSuccess(), nil
}

// Parameters:
//  - SessionId
//  - Method
func (p *TalkServiceClient) ChangeVerificationMethod(ctx context.Context, sessionId string, method Y30) (r *VerificationSessionData, err error) {
  var _args122 TalkServiceChangeVerificationMethodArgs
  _args122.SessionId = sessionId
  _args122.Method = method
  var _result123 TalkServiceChangeVerificationMethodResult
  if err = p.Client_().Call(ctx, "changeVerificationMethod", &_args122, &_result123); err != nil {
    return
  }
  switch {
  case _result123.E!= nil:
    return r, _result123.E
  }

  return _result123.GetSuccess(), nil
}

func (p *TalkServiceClient) GetEncryptedIdentityV3(ctx context.Context) (r *GetEncryptedIdentityV3Response, err error) {
  var _args124 TalkServiceGetEncryptedIdentityV3Args
  var _result125 TalkServiceGetEncryptedIdentityV3Result
  if err = p.Client_().Call(ctx, "getEncryptedIdentityV3", &_args124, &_result125); err != nil {
    return
  }
  switch {
  case _result125.E!= nil:
    return r, _result125.E
  }

  return _result125.GetSuccess(), nil
}

// Parameters:
//  - KeyVersion
//  - ChatMid
//  - GroupKeyId
func (p *TalkServiceClient) GetE2EEGroupSharedKey(ctx context.Context, keyVersion int32, chatMid string, groupKeyId int32) (r *E2EEGroupSharedKey, err error) {
  var _args126 TalkServiceGetE2EEGroupSharedKeyArgs
  _args126.KeyVersion = keyVersion
  _args126.ChatMid = chatMid
  _args126.GroupKeyId = groupKeyId
  var _result127 TalkServiceGetE2EEGroupSharedKeyResult
  if err = p.Client_().Call(ctx, "getE2EEGroupSharedKey", &_args126, &_result127); err != nil {
    return
  }
  switch {
  case _result127.E!= nil:
    return r, _result127.E
  }

  return _result127.GetSuccess(), nil
}

// Parameters:
//  - KeyVersion
//  - ChatMid
//  - Members
//  - KeyIds
//  - EncryptedSharedKeys
func (p *TalkServiceClient) RegisterE2EEGroupKey(ctx context.Context, keyVersion int32, chatMid string, members []string, keyIds []int32, encryptedSharedKeys [][]byte) (r *E2EEGroupSharedKey, err error) {
  var _args128 TalkServiceRegisterE2EEGroupKeyArgs
  _args128.KeyVersion = keyVersion
  _args128.ChatMid = chatMid
  _args128.Members = members
  _args128.KeyIds = keyIds
  _args128.EncryptedSharedKeys = encryptedSharedKeys
  var _result129 TalkServiceRegisterE2EEGroupKeyResult
  if err = p.Client_().Call(ctx, "registerE2EEGroupKey", &_args128, &_result129); err != nil {
    return
  }
  switch {
  case _result129.E!= nil:
    return r, _result129.E
  }

  return _result129.GetSuccess(), nil
}

// Parameters:
//  - ExpirationTime
//  - MaxUseCount
func (p *TalkServiceClient) GenerateUserTicket(ctx context.Context, expirationTime int64, maxUseCount int32) (r *Ticket, err error) {
  var _args130 TalkServiceGenerateUserTicketArgs
  _args130.ExpirationTime = expirationTime
  _args130.MaxUseCount = maxUseCount
  var _result131 TalkServiceGenerateUserTicketResult
  if err = p.Client_().Call(ctx, "generateUserTicket", &_args130, &_result131); err != nil {
    return
  }
  switch {
  case _result131.E!= nil:
    return r, _result131.E
  }

  return _result131.GetSuccess(), nil
}

// Parameters:
//  - ReqSeq
//  - PublicKey
func (p *TalkServiceClient) RegisterE2EEPublicKey(ctx context.Context, reqSeq int32, publicKey *E2EEPublicKey) (r *E2EEPublicKey, err error) {
  var _args132 TalkServiceRegisterE2EEPublicKeyArgs
  _args132.ReqSeq = reqSeq
  _args132.PublicKey = publicKey
  var _result133 TalkServiceRegisterE2EEPublicKeyResult
  if err = p.Client_().Call(ctx, "registerE2EEPublicKey", &_args132, &_result133); err != nil {
    return
  }
  switch {
  case _result133.E!= nil:
    return r, _result133.E
  }

  return _result133.GetSuccess(), nil
}

// Parameters:
//  - Mid
//  - KeyVersion
//  - KeyId
func (p *TalkServiceClient) GetE2EEPublicKey(ctx context.Context, mid string, keyVersion int32, keyId int32) (r *E2EEPublicKey, err error) {
  var _args134 TalkServiceGetE2EEPublicKeyArgs
  _args134.Mid = mid
  _args134.KeyVersion = keyVersion
  _args134.KeyId = keyId
  var _result135 TalkServiceGetE2EEPublicKeyResult
  if err = p.Client_().Call(ctx, "getE2EEPublicKey", &_args134, &_result135); err != nil {
    return
  }
  switch {
  case _result135.E!= nil:
    return r, _result135.E
  }

  return _result135.GetSuccess(), nil
}

// Parameters:
//  - Provider
func (p *TalkServiceClient) GetRSAKeyInfo(ctx context.Context, provider IdentityProvider) (r *RSAKey, err error) {
  var _args136 TalkServiceGetRSAKeyInfoArgs
  _args136.Provider = provider
  var _result137 TalkServiceGetRSAKeyInfoResult
  if err = p.Client_().Call(ctx, "getRSAKeyInfo", &_args136, &_result137); err != nil {
    return
  }
  switch {
  case _result137.E!= nil:
    return r, _result137.E
  }

  return _result137.GetSuccess(), nil
}

// Parameters:
//  - SnsIdType
//  - SnsAccessToken
//  - Region
//  - UdidHash
//  - DeviceInfo
//  - Mid
//  - MigrationPincodeSessionId
func (p *TalkServiceClient) RegisterWithSnsId(ctx context.Context, snsIdType C60759oi, snsAccessToken string, region string, udidHash string, deviceInfo *DeviceInfo, mid string, migrationPincodeSessionId string) (r *RegisterWithSnsIdResult_, err error) {
  var _args138 TalkServiceRegisterWithSnsIdArgs
  _args138.SnsIdType = snsIdType
  _args138.SnsAccessToken = snsAccessToken
  _args138.Region = region
  _args138.UdidHash = udidHash
  _args138.DeviceInfo = deviceInfo
  _args138.Mid = mid
  _args138.MigrationPincodeSessionId = migrationPincodeSessionId
  var _result139 TalkServiceRegisterWithSnsIdResult
  if err = p.Client_().Call(ctx, "registerWithSnsId", &_args138, &_result139); err != nil {
    return
  }
  switch {
  case _result139.E!= nil:
    return r, _result139.E
  }

  return _result139.GetSuccess(), nil
}

// Parameters:
//  - SnsIdType
//  - SnsAccessToken
//  - UdidHash
//  - MigrationPincodeSessionId
//  - OldUdidHash
func (p *TalkServiceClient) FindSnsIdUserStatus(ctx context.Context, snsIdType C60759oi, snsAccessToken string, udidHash string, migrationPincodeSessionId string, oldUdidHash string) (r *SnsIdUserStatus, err error) {
  var _args140 TalkServiceFindSnsIdUserStatusArgs
  _args140.SnsIdType = snsIdType
  _args140.SnsAccessToken = snsAccessToken
  _args140.UdidHash = udidHash
  _args140.MigrationPincodeSessionId = migrationPincodeSessionId
  _args140.OldUdidHash = oldUdidHash
  var _result141 TalkServiceFindSnsIdUserStatusResult
  if err = p.Client_().Call(ctx, "findSnsIdUserStatus", &_args140, &_result141); err != nil {
    return
  }
  switch {
  case _result141.E!= nil:
    return r, _result141.E
  }

  return _result141.GetSuccess(), nil
}

// Parameters:
//  - ID
//  - Type
func (p *TalkServiceClient) GetContactRegistration(ctx context.Context, id string, type_a1 ContactType) (r *ContactRegistration, err error) {
  var _args142 TalkServiceGetContactRegistrationArgs
  _args142.ID = id
  _args142.Type = type_a1
  var _result143 TalkServiceGetContactRegistrationResult
  if err = p.Client_().Call(ctx, "getContactRegistration", &_args142, &_result143); err != nil {
    return
  }
  switch {
  case _result143.E!= nil:
    return r, _result143.E
  }

  return _result143.GetSuccess(), nil
}

// Parameters:
//  - SessionId
//  - PinCode
//  - UdidHash
//  - MigrationPincodeSessionId
//  - OldUdidHash
func (p *TalkServiceClient) VerifyPhoneNumber(ctx context.Context, sessionId string, pinCode string, udidHash string, migrationPincodeSessionId string, oldUdidHash string) (r *PhoneVerificationResult_, err error) {
  var _args144 TalkServiceVerifyPhoneNumberArgs
  _args144.SessionId = sessionId
  _args144.PinCode = pinCode
  _args144.UdidHash = udidHash
  _args144.MigrationPincodeSessionId = migrationPincodeSessionId
  _args144.OldUdidHash = oldUdidHash
  var _result145 TalkServiceVerifyPhoneNumberResult
  if err = p.Client_().Call(ctx, "verifyPhoneNumber", &_args144, &_result145); err != nil {
    return
  }
  switch {
  case _result145.E!= nil:
    return r, _result145.E
  }

  return _result145.GetSuccess(), nil
}

// Parameters:
//  - FeatureType
func (p *TalkServiceClient) AcquireEncryptedAccessToken(ctx context.Context, featureType FeatureType) (r string, err error) {
  var _args146 TalkServiceAcquireEncryptedAccessTokenArgs
  _args146.FeatureType = featureType
  var _result147 TalkServiceAcquireEncryptedAccessTokenResult
  if err = p.Client_().Call(ctx, "acquireEncryptedAccessToken", &_args146, &_result147); err != nil {
    return
  }
  switch {
  case _result147.E!= nil:
    return r, _result147.E
  }

  return _result147.GetSuccess(), nil
}

// Parameters:
//  - SnsIdType
//  - SnsAccessToken
//  - IdentityCredential
//  - Region
//  - UdidHash
//  - DeviceInfo
//  - MigrationPincodeSessionId
func (p *TalkServiceClient) RegisterWithSnsIdAndIdentityCredential(ctx context.Context, snsIdType C60759oi, snsAccessToken string, identityCredential *IdentityCredential, region string, udidHash string, deviceInfo *DeviceInfo, migrationPincodeSessionId string) (r string, err error) {
  var _args148 TalkServiceRegisterWithSnsIdAndIdentityCredentialArgs
  _args148.SnsIdType = snsIdType
  _args148.SnsAccessToken = snsAccessToken
  _args148.IdentityCredential = identityCredential
  _args148.Region = region
  _args148.UdidHash = udidHash
  _args148.DeviceInfo = deviceInfo
  _args148.MigrationPincodeSessionId = migrationPincodeSessionId
  var _result149 TalkServiceRegisterWithSnsIdAndIdentityCredentialResult
  if err = p.Client_().Call(ctx, "registerWithSnsIdAndIdentityCredential", &_args148, &_result149); err != nil {
    return
  }
  switch {
  case _result149.E!= nil:
    return r, _result149.E
  }

  return _result149.GetSuccess(), nil
}

// Parameters:
//  - Location
func (p *TalkServiceClient) GetShakeEventV1(ctx context.Context, location *Geolocation) (r string, err error) {
  var _args150 TalkServiceGetShakeEventV1Args
  _args150.Location = location
  var _result151 TalkServiceGetShakeEventV1Result
  if err = p.Client_().Call(ctx, "getShakeEventV1", &_args150, &_result151); err != nil {
    return
  }
  switch {
  case _result151.E!= nil:
    return r, _result151.E
  }

  return _result151.GetSuccess(), nil
}

// Parameters:
//  - SessionId
//  - Identifier
//  - Verifier
//  - Provider
//  - MigrationPincodeSessionId
func (p *TalkServiceClient) RegisterDeviceWithIdentityCredential(ctx context.Context, sessionId string, identifier string, verifier string, provider IdentityProvider, migrationPincodeSessionId string) (r string, err error) {
  var _args152 TalkServiceRegisterDeviceWithIdentityCredentialArgs
  _args152.SessionId = sessionId
  _args152.Identifier = identifier
  _args152.Verifier = verifier
  _args152.Provider = provider
  _args152.MigrationPincodeSessionId = migrationPincodeSessionId
  var _result153 TalkServiceRegisterDeviceWithIdentityCredentialResult
  if err = p.Client_().Call(ctx, "registerDeviceWithIdentityCredential", &_args152, &_result153); err != nil {
    return
  }
  switch {
  case _result153.E!= nil:
    return r, _result153.E
  }

  return _result153.GetSuccess(), nil
}

// Parameters:
//  - Latitude
//  - Longitude
//  - Accuracy
//  - NetworkStatus
//  - AltitudeMeters
//  - VelocityMetersPerSecond
//  - BearingDegrees
func (p *TalkServiceClient) UpdateAndGetNearby(ctx context.Context, latitude float64, longitude float64, accuracy *GeolocationAccuracy, networkStatus *ClientNetworkStatus, altitudeMeters float64, velocityMetersPerSecond float64, bearingDegrees float64) (r []*NearbyEntry, err error) {
  var _args154 TalkServiceUpdateAndGetNearbyArgs
  _args154.Latitude = latitude
  _args154.Longitude = longitude
  _args154.Accuracy = accuracy
  _args154.NetworkStatus = networkStatus
  _args154.AltitudeMeters = altitudeMeters
  _args154.VelocityMetersPerSecond = velocityMetersPerSecond
  _args154.BearingDegrees = bearingDegrees
  var _result155 TalkServiceUpdateAndGetNearbyResult
  if err = p.Client_().Call(ctx, "updateAndGetNearby", &_args154, &_result155); err != nil {
    return
  }
  switch {
  case _result155.E!= nil:
    return r, _result155.E
  }

  return _result155.GetSuccess(), nil
}

// Parameters:
//  - LocalRev
//  - Count
func (p *TalkServiceClient) FetchOperations(ctx context.Context, localRev int64, count int32) (r []*Operation, err error) {
  var _args156 TalkServiceFetchOperationsArgs
  _args156.LocalRev = localRev
  _args156.Count = count
  var _result157 TalkServiceFetchOperationsResult
  if err = p.Client_().Call(ctx, "fetchOperations", &_args156, &_result157); err != nil {
    return
  }
  switch {
  case _result157.E!= nil:
    return r, _result157.E
  }

  return _result157.GetSuccess(), nil
}

// Parameters:
//  - LocalRev
//  - Count
//  - GlobalRev
//  - IndividualRev
func (p *TalkServiceClient) FetchOps(ctx context.Context, localRev int64, count int32, globalRev int64, individualRev int64) (r []*Operation, err error) {
  var _args158 TalkServiceFetchOpsArgs
  _args158.LocalRev = localRev
  _args158.Count = count
  _args158.GlobalRev = globalRev
  _args158.IndividualRev = individualRev
  var _result159 TalkServiceFetchOpsResult
  if err = p.Client_().Call(ctx, "fetchOps", &_args158, &_result159); err != nil {
    return
  }
  switch {
  case _result159.E!= nil:
    return r, _result159.E
  }

  return _result159.GetSuccess(), nil
}

// Parameters:
//  - Seq
//  - MessageId
func (p *TalkServiceClient) UnsendMessage(ctx context.Context, seq int32, messageId string) (err error) {
  var _args160 TalkServiceUnsendMessageArgs
  _args160.Seq = seq
  _args160.MessageId = messageId
  var _result161 TalkServiceUnsendMessageResult
  if err = p.Client_().Call(ctx, "unsendMessage", &_args160, &_result161); err != nil {
    return
  }
  switch {
  case _result161.E!= nil:
    return _result161.E
  }

  return nil
}

// Parameters:
//  - ReqSeq
//  - ID
func (p *TalkServiceClient) BlockRecommendation(ctx context.Context, reqSeq int32, id string) (err error) {
  var _args162 TalkServiceBlockRecommendationArgs
  _args162.ReqSeq = reqSeq
  _args162.ID = id
  var _result163 TalkServiceBlockRecommendationResult
  if err = p.Client_().Call(ctx, "blockRecommendation", &_args162, &_result163); err != nil {
    return
  }
  switch {
  case _result163.E!= nil:
    return _result163.E
  }

  return nil
}

// Parameters:
//  - ReqSeq
//  - Mid
//  - Type
//  - Reference
func (p *TalkServiceClient) FindAndAddContactsByMid(ctx context.Context, reqSeq int32, mid string, type_a1 ContactType, reference string) (r map[string]*Contact, err error) {
  var _args164 TalkServiceFindAndAddContactsByMidArgs
  _args164.ReqSeq = reqSeq
  _args164.Mid = mid
  _args164.Type = type_a1
  _args164.Reference = reference
  var _result165 TalkServiceFindAndAddContactsByMidResult
  if err = p.Client_().Call(ctx, "findAndAddContactsByMid", &_args164, &_result165); err != nil {
    return
  }
  switch {
  case _result165.E!= nil:
    return r, _result165.E
  }

  return _result165.GetSuccess(), nil
}

// Parameters:
//  - ReqSeq
//  - SenderMid
//  - MessageId
func (p *TalkServiceClient) RequestResendMessage(ctx context.Context, reqSeq int32, senderMid string, messageId string) (err error) {
  var _args166 TalkServiceRequestResendMessageArgs
  _args166.ReqSeq = reqSeq
  _args166.SenderMid = senderMid
  _args166.MessageId = messageId
  var _result167 TalkServiceRequestResendMessageResult
  if err = p.Client_().Call(ctx, "requestResendMessage", &_args166, &_result167); err != nil {
    return
  }
  switch {
  case _result167.E!= nil:
    return _result167.E
  }

  return nil
}

// Parameters:
//  - Seq
//  - ChatMid
//  - LastMessageId
//  - SessionId
func (p *TalkServiceClient) SendChatRemoved(ctx context.Context, seq int32, chatMid string, lastMessageId string, sessionId int32) (err error) {
  var _args168 TalkServiceSendChatRemovedArgs
  _args168.Seq = seq
  _args168.ChatMid = chatMid
  _args168.LastMessageId = lastMessageId
  _args168.SessionId = sessionId
  var _result169 TalkServiceSendChatRemovedResult
  if err = p.Client_().Call(ctx, "sendChatRemoved", &_args168, &_result169); err != nil {
    return
  }
  switch {
  case _result169.E!= nil:
    return _result169.E
  }

  return nil
}

// Parameters:
//  - ReqSeq
//  - ReceiverMid
//  - OriginalMessageId
//  - ResendMessage
//  - ErrorCode
func (p *TalkServiceClient) RespondResendMessage(ctx context.Context, reqSeq int32, receiverMid string, originalMessageId string, resendMessage *Message, errorCode TalkExceptionCode) (err error) {
  var _args170 TalkServiceRespondResendMessageArgs
  _args170.ReqSeq = reqSeq
  _args170.ReceiverMid = receiverMid
  _args170.OriginalMessageId = originalMessageId
  _args170.ResendMessage = resendMessage
  _args170.ErrorCode = errorCode
  var _result171 TalkServiceRespondResendMessageResult
  if err = p.Client_().Call(ctx, "respondResendMessage", &_args170, &_result171); err != nil {
    return
  }
  switch {
  case _result171.E!= nil:
    return _result171.E
  }

  return nil
}

// Parameters:
//  - ReqSeq
//  - RoomId
//  - ContactIds
func (p *TalkServiceClient) InviteIntoRoom(ctx context.Context, reqSeq int32, roomId string, contactIds []string) (err error) {
  var _args172 TalkServiceInviteIntoRoomArgs
  _args172.ReqSeq = reqSeq
  _args172.RoomId = roomId
  _args172.ContactIds = contactIds
  var _result173 TalkServiceInviteIntoRoomResult
  if err = p.Client_().Call(ctx, "inviteIntoRoom", &_args172, &_result173); err != nil {
    return
  }
  switch {
  case _result173.E!= nil:
    return _result173.E
  }

  return nil
}

// Parameters:
//  - ReqSeq
//  - EncryptedKeyChain
//  - HashKeyChain
func (p *TalkServiceClient) RespondE2EEKeyExchange(ctx context.Context, reqSeq int32, encryptedKeyChain []byte, hashKeyChain []byte) (err error) {
  var _args174 TalkServiceRespondE2EEKeyExchangeArgs
  _args174.ReqSeq = reqSeq
  _args174.EncryptedKeyChain = encryptedKeyChain
  _args174.HashKeyChain = hashKeyChain
  var _result175 TalkServiceRespondE2EEKeyExchangeResult
  if err = p.Client_().Call(ctx, "respondE2EEKeyExchange", &_args174, &_result175); err != nil {
    return
  }
  switch {
  case _result175.E!= nil:
    return _result175.E
  }

  return nil
}

// Parameters:
//  - ReqSeq
//  - LocalContacts
func (p *TalkServiceClient) SyncContacts(ctx context.Context, reqSeq int32, localContacts []*ContactModification) (r map[string]*ContactRegistration, err error) {
  var _args176 TalkServiceSyncContactsArgs
  _args176.ReqSeq = reqSeq
  _args176.LocalContacts = localContacts
  var _result177 TalkServiceSyncContactsResult
  if err = p.Client_().Call(ctx, "syncContacts", &_args176, &_result177); err != nil {
    return
  }
  switch {
  case _result177.E!= nil:
    return r, _result177.E
  }

  return _result177.GetSuccess(), nil
}

// Parameters:
//  - ReqSeq
//  - Phones
//  - Reference
func (p *TalkServiceClient) FindAndAddContactsByPhone(ctx context.Context, reqSeq int32, phones []string, reference string) (r map[string]*Contact, err error) {
  var _args178 TalkServiceFindAndAddContactsByPhoneArgs
  _args178.ReqSeq = reqSeq
  _args178.Phones = phones
  _args178.Reference = reference
  var _result179 TalkServiceFindAndAddContactsByPhoneResult
  if err = p.Client_().Call(ctx, "findAndAddContactsByPhone", &_args178, &_result179); err != nil {
    return
  }
  switch {
  case _result179.E!= nil:
    return r, _result179.E
  }

  return _result179.GetSuccess(), nil
}

// Parameters:
//  - LastRev
//  - Badge
func (p *TalkServiceClient) NotifySleep(ctx context.Context, lastRev int64, badge int32) (err error) {
  var _args180 TalkServiceNotifySleepArgs
  _args180.LastRev = lastRev
  _args180.Badge = badge
  var _result181 TalkServiceNotifySleepResult
  if err = p.Client_().Call(ctx, "notifySleep", &_args180, &_result181); err != nil {
    return
  }
  switch {
  case _result181.E!= nil:
    return _result181.E
  }

  return nil
}

// Parameters:
//  - SyncOpRevision
//  - Profile
func (p *TalkServiceClient) ReportProfile(ctx context.Context, syncOpRevision int64, profile *Profile) (err error) {
  var _args182 TalkServiceReportProfileArgs
  _args182.SyncOpRevision = syncOpRevision
  _args182.Profile = profile
  var _result183 TalkServiceReportProfileResult
  if err = p.Client_().Call(ctx, "reportProfile", &_args182, &_result183); err != nil {
    return
  }
  switch {
  case _result183.E!= nil:
    return _result183.E
  }

  return nil
}

// Parameters:
//  - LastRev
//  - DeviceInfo
//  - UdidHash
//  - OldUdidHash
func (p *TalkServiceClient) NotifyUpdated(ctx context.Context, lastRev int64, deviceInfo *DeviceInfo, udidHash string, oldUdidHash string) (err error) {
  var _args184 TalkServiceNotifyUpdatedArgs
  _args184.LastRev = lastRev
  _args184.DeviceInfo = deviceInfo
  _args184.UdidHash = udidHash
  _args184.OldUdidHash = oldUdidHash
  var _result185 TalkServiceNotifyUpdatedResult
  if err = p.Client_().Call(ctx, "notifyUpdated", &_args184, &_result185); err != nil {
    return
  }
  switch {
  case _result185.E!= nil:
    return _result185.E
  }

  return nil
}

// Parameters:
//  - SyncOpRevision
//  - Settings
func (p *TalkServiceClient) ReportSettings(ctx context.Context, syncOpRevision int64, settings *Settings) (err error) {
  var _args186 TalkServiceReportSettingsArgs
  _args186.SyncOpRevision = syncOpRevision
  _args186.Settings = settings
  var _result187 TalkServiceReportSettingsResult
  if err = p.Client_().Call(ctx, "reportSettings", &_args186, &_result187); err != nil {
    return
  }
  switch {
  case _result187.E!= nil:
    return _result187.E
  }

  return nil
}

// Parameters:
//  - SyncReason
func (p *TalkServiceClient) GetBlockedContactIds(ctx context.Context, syncReason SyncReason) (r []string, err error) {
  var _args188 TalkServiceGetBlockedContactIdsArgs
  _args188.SyncReason = syncReason
  var _result189 TalkServiceGetBlockedContactIdsResult
  if err = p.Client_().Call(ctx, "getBlockedContactIds", &_args188, &_result189); err != nil {
    return
  }
  switch {
  case _result189.E!= nil:
    return r, _result189.E
  }

  return _result189.GetSuccess(), nil
}

// Parameters:
//  - Location
//  - NetworkStatus
func (p *TalkServiceClient) OpenProximityMatch(ctx context.Context, location *Location, networkStatus *ClientNetworkStatus) (r string, err error) {
  var _args190 TalkServiceOpenProximityMatchArgs
  _args190.Location = location
  _args190.NetworkStatus = networkStatus
  var _result191 TalkServiceOpenProximityMatchResult
  if err = p.Client_().Call(ctx, "openProximityMatch", &_args190, &_result191); err != nil {
    return
  }
  switch {
  case _result191.E!= nil:
    return r, _result191.E
  }

  return _result191.GetSuccess(), nil
}

// Parameters:
//  - Direction
//  - MidOrEMid
func (p *TalkServiceClient) RemoveFriendRequest(ctx context.Context, direction Direction, midOrEMid string) (err error) {
  var _args192 TalkServiceRemoveFriendRequestArgs
  _args192.Direction = direction
  _args192.MidOrEMid = midOrEMid
  var _result193 TalkServiceRemoveFriendRequestResult
  if err = p.Client_().Call(ctx, "removeFriendRequest", &_args192, &_result193); err != nil {
    return
  }
  switch {
  case _result193.E!= nil:
    return _result193.E
  }

  return nil
}

// Parameters:
//  - Token
//  - Type
func (p *TalkServiceClient) UpdateNotificationToken(ctx context.Context, token string, type_a1 UpdateNotificationTokenType) (err error) {
  var _args194 TalkServiceUpdateNotificationTokenArgs
  _args194.Token = token
  _args194.Type = type_a1
  var _result195 TalkServiceUpdateNotificationTokenResult
  if err = p.Client_().Call(ctx, "updateNotificationToken", &_args194, &_result195); err != nil {
    return
  }
  switch {
  case _result195.E!= nil:
    return _result195.E
  }

  return nil
}

// Parameters:
//  - ReqSeq
//  - Attr
//  - ExtendedProfile
func (p *TalkServiceClient) UpdateExtendedProfileAttribute(ctx context.Context, reqSeq int32, attr UpdateExtendedProfileAttributeAttr, extendedProfile *ExtendedProfile) (err error) {
  var _args196 TalkServiceUpdateExtendedProfileAttributeArgs
  _args196.ReqSeq = reqSeq
  _args196.Attr = attr
  _args196.ExtendedProfile = extendedProfile
  var _result197 TalkServiceUpdateExtendedProfileAttributeResult
  if err = p.Client_().Call(ctx, "updateExtendedProfileAttribute", &_args196, &_result197); err != nil {
    return
  }
  switch {
  case _result197.E!= nil:
    return _result197.E
  }

  return nil
}

// Parameters:
//  - IdentityCredential
//  - MigrationPincodeSessionId
func (p *TalkServiceClient) VerifyIdentityCredentialWithResult_(ctx context.Context, identityCredential *IdentityCredential, migrationPincodeSessionId string) (r *UserAuthStatus, err error) {
  var _args198 TalkServiceVerifyIdentityCredentialWithResultArgs
  _args198.IdentityCredential = identityCredential
  _args198.MigrationPincodeSessionId = migrationPincodeSessionId
  var _result199 TalkServiceVerifyIdentityCredentialWithResultResult
  if err = p.Client_().Call(ctx, "verifyIdentityCredentialWithResult", &_args198, &_result199); err != nil {
    return
  }
  switch {
  case _result199.E!= nil:
    return r, _result199.E
  }

  return _result199.GetSuccess(), nil
}

// Parameters:
//  - Identifier
//  - Provider
//  - Locale
func (p *TalkServiceClient) RequestAccountPasswordReset(ctx context.Context, identifier string, provider IdentityProvider, locale string) (err error) {
  var _args200 TalkServiceRequestAccountPasswordResetArgs
  _args200.Identifier = identifier
  _args200.Provider = provider
  _args200.Locale = locale
  var _result201 TalkServiceRequestAccountPasswordResetResult
  if err = p.Client_().Call(ctx, "requestAccountPasswordReset", &_args200, &_result201); err != nil {
    return
  }
  switch {
  case _result201.E!= nil:
    return _result201.E
  }

  return nil
}

// Parameters:
//  - Request
func (p *TalkServiceClient) SendPostback(ctx context.Context, request *SendPostbackRequest) (err error) {
  var _args202 TalkServiceSendPostbackArgs
  _args202.Request = request
  var _result203 TalkServiceSendPostbackResult
  if err = p.Client_().Call(ctx, "sendPostback", &_args202, &_result203); err != nil {
    return
  }
  switch {
  case _result203.E!= nil:
    return _result203.E
  }

  return nil
}

// Parameters:
//  - MidOrEMid
//  - Method
//  - FriendRequestParams
func (p *TalkServiceClient) TryFriendRequest(ctx context.Context, midOrEMid string, method FriendRequestMethod, friendRequestParams string) (err error) {
  var _args204 TalkServiceTryFriendRequestArgs
  _args204.MidOrEMid = midOrEMid
  _args204.Method = method
  _args204.FriendRequestParams = friendRequestParams
  var _result205 TalkServiceTryFriendRequestResult
  if err = p.Client_().Call(ctx, "tryFriendRequest", &_args204, &_result205); err != nil {
    return
  }
  switch {
  case _result205.E!= nil:
    return _result205.E
  }

  return nil
}

// Parameters:
//  - SessionId
//  - Ids
func (p *TalkServiceClient) AcceptProximityMatches(ctx context.Context, sessionId string, ids []string) (err error) {
  var _args206 TalkServiceAcceptProximityMatchesArgs
  _args206.SessionId = sessionId
  _args206.Ids = ids
  var _result207 TalkServiceAcceptProximityMatchesResult
  if err = p.Client_().Call(ctx, "acceptProximityMatches", &_args206, &_result207); err != nil {
    return
  }
  switch {
  case _result207.E!= nil:
    return _result207.E
  }

  return nil
}

// Parameters:
//  - Ids
func (p *TalkServiceClient) GetContacts(ctx context.Context, ids []string) (r []*Contact, err error) {
  var _args208 TalkServiceGetContactsArgs
  _args208.Ids = ids
  var _result209 TalkServiceGetContactsResult
  if err = p.Client_().Call(ctx, "getContacts", &_args208, &_result209); err != nil {
    return
  }
  switch {
  case _result209.E!= nil:
    return r, _result209.E
  }

  return _result209.GetSuccess(), nil
}

// Parameters:
//  - BooleanState
//  - StringState
func (p *TalkServiceClient) ReportDeviceState(ctx context.Context, booleanState map[C59122ec]bool, stringState map[C59430gc]string) (err error) {
  var _args210 TalkServiceReportDeviceStateArgs
  _args210.BooleanState = booleanState
  _args210.StringState = stringState
  var _result211 TalkServiceReportDeviceStateResult
  if err = p.Client_().Call(ctx, "reportDeviceState", &_args210, &_result211); err != nil {
    return
  }
  switch {
  case _result211.E!= nil:
    return _result211.E
  }

  return nil
}

// Parameters:
//  - ReqSeq
//  - ID
func (p *TalkServiceClient) BlockContact(ctx context.Context, reqSeq int32, id string) (err error) {
  var _args212 TalkServiceBlockContactArgs
  _args212.ReqSeq = reqSeq
  _args212.ID = id
  var _result213 TalkServiceBlockContactResult
  if err = p.Client_().Call(ctx, "blockContact", &_args212, &_result213); err != nil {
    return
  }
  switch {
  case _result213.E!= nil:
    return _result213.E
  }

  return nil
}

// Parameters:
//  - SyncReason
func (p *TalkServiceClient) GetExtendedProfile(ctx context.Context, syncReason SyncReason) (r *ExtendedProfile, err error) {
  var _args214 TalkServiceGetExtendedProfileArgs
  _args214.SyncReason = syncReason
  var _result215 TalkServiceGetExtendedProfileResult
  if err = p.Client_().Call(ctx, "getExtendedProfile", &_args214, &_result215); err != nil {
    return
  }
  switch {
  case _result215.E!= nil:
    return r, _result215.E
  }

  return _result215.GetSuccess(), nil
}

// Parameters:
//  - AttributesToRetrieve
func (p *TalkServiceClient) GetSettingsAttributes2(ctx context.Context, attributesToRetrieve []SettingAttribute) (r *Settings, err error) {
  var _args216 TalkServiceGetSettingsAttributes2Args
  _args216.AttributesToRetrieve = attributesToRetrieve
  var _result217 TalkServiceGetSettingsAttributes2Result
  if err = p.Client_().Call(ctx, "getSettingsAttributes2", &_args216, &_result217); err != nil {
    return
  }
  return _result217.GetSuccess(), nil
}

// Parameters:
//  - SyncReason
func (p *TalkServiceClient) GetProfile(ctx context.Context, syncReason SyncReason) (r *Profile, err error) {
  var _args218 TalkServiceGetProfileArgs
  _args218.SyncReason = syncReason
  var _result219 TalkServiceGetProfileResult
  if err = p.Client_().Call(ctx, "getProfile", &_args218, &_result219); err != nil {
    return
  }
  switch {
  case _result219.E!= nil:
    return r, _result219.E
  }

  return _result219.GetSuccess(), nil
}

// Parameters:
//  - SessionId
func (p *TalkServiceClient) GetProximityMatchCandidateList(ctx context.Context, sessionId string) (r *ProximityMatchCandidateResult_, err error) {
  var _args220 TalkServiceGetProximityMatchCandidateListArgs
  _args220.SessionId = sessionId
  var _result221 TalkServiceGetProximityMatchCandidateListResult
  if err = p.Client_().Call(ctx, "getProximityMatchCandidateList", &_args220, &_result221); err != nil {
    return
  }
  switch {
  case _result221.E!= nil:
    return r, _result221.E
  }

  return _result221.GetSuccess(), nil
}

// Parameters:
//  - ReqSeq
//  - SearchId
//  - Reference
func (p *TalkServiceClient) FindAndAddContactByMetaTag(ctx context.Context, reqSeq int32, searchId string, reference string) (r *PendingAgreementsResponse, err error) {
  var _args222 TalkServiceFindAndAddContactByMetaTagArgs
  _args222.ReqSeq = reqSeq
  _args222.SearchId = searchId
  _args222.Reference = reference
  var _result223 TalkServiceFindAndAddContactByMetaTagResult
  if err = p.Client_().Call(ctx, "findAndAddContactByMetaTag", &_args222, &_result223); err != nil {
    return
  }
  switch {
  case _result223.E!= nil:
    return r, _result223.E
  }

  return _result223.GetSuccess(), nil
}

// Parameters:
//  - ChatIds
//  - SyncReason
func (p *TalkServiceClient) GetMessageReadRange(ctx context.Context, chatIds []string, syncReason SyncReason) (r []*TMessageReadRange, err error) {
  var _args224 TalkServiceGetMessageReadRangeArgs
  _args224.ChatIds = chatIds
  _args224.SyncReason = syncReason
  var _result225 TalkServiceGetMessageReadRangeResult
  if err = p.Client_().Call(ctx, "getMessageReadRange", &_args224, &_result225); err != nil {
    return
  }
  switch {
  case _result225.E!= nil:
    return r, _result225.E
  }

  return _result225.GetSuccess(), nil
}

// Parameters:
//  - ReqSeq
//  - SearchId
func (p *TalkServiceClient) RegisterUserid(ctx context.Context, reqSeq int32, searchId string) (r bool, err error) {
  var _args226 TalkServiceRegisterUseridArgs
  _args226.ReqSeq = reqSeq
  _args226.SearchId = searchId
  var _result227 TalkServiceRegisterUseridResult
  if err = p.Client_().Call(ctx, "registerUserid", &_args226, &_result227); err != nil {
    return
  }
  switch {
  case _result227.E!= nil:
    return r, _result227.E
  }

  return _result227.GetSuccess(), nil
}

// Parameters:
//  - ReqSeq
//  - PushRecvReports
func (p *TalkServiceClient) ReportPushRecvReports(ctx context.Context, reqSeq int32, pushRecvReports []*PushRecvReport) (err error) {
  var _args228 TalkServiceReportPushRecvReportsArgs
  _args228.ReqSeq = reqSeq
  _args228.PushRecvReports = pushRecvReports
  var _result229 TalkServiceReportPushRecvReportsResult
  if err = p.Client_().Call(ctx, "reportPushRecvReports", &_args228, &_result229); err != nil {
    return
  }
  switch {
  case _result229.E!= nil:
    return _result229.E
  }

  return nil
}

func (p *TalkServiceClient) Noop(ctx context.Context) (err error) {
  var _args230 TalkServiceNoopArgs
  var _result231 TalkServiceNoopResult
  if err = p.Client_().Call(ctx, "noop", &_args230, &_result231); err != nil {
    return
  }
  switch {
  case _result231.E!= nil:
    return _result231.E
  }

  return nil
}

// Parameters:
//  - SyncReason
func (p *TalkServiceClient) GetBlockedRecommendationIds(ctx context.Context, syncReason SyncReason) (r []string, err error) {
  var _args232 TalkServiceGetBlockedRecommendationIdsArgs
  _args232.SyncReason = syncReason
  var _result233 TalkServiceGetBlockedRecommendationIdsResult
  if err = p.Client_().Call(ctx, "getBlockedRecommendationIds", &_args232, &_result233); err != nil {
    return
  }
  switch {
  case _result233.E!= nil:
    return r, _result233.E
  }

  return _result233.GetSuccess(), nil
}

// Parameters:
//  - RemoveFollowerRequest
func (p *TalkServiceClient) RemoveFollower(ctx context.Context, removeFollowerRequest *RemoveFollowerRequest) (err error) {
  var _args234 TalkServiceRemoveFollowerArgs
  _args234.RemoveFollowerRequest = removeFollowerRequest
  var _result235 TalkServiceRemoveFollowerResult
  if err = p.Client_().Call(ctx, "removeFollower", &_args234, &_result235); err != nil {
    return
  }
  switch {
  case _result235.E!= nil:
    return _result235.E
  }

  return nil
}

// Parameters:
//  - MigrationSessionId
func (p *TalkServiceClient) VerifyAccountMigration(ctx context.Context, migrationSessionId string) (err error) {
  var _args236 TalkServiceVerifyAccountMigrationArgs
  _args236.MigrationSessionId = migrationSessionId
  var _result237 TalkServiceVerifyAccountMigrationResult
  if err = p.Client_().Call(ctx, "verifyAccountMigration", &_args236, &_result237); err != nil {
    return
  }
  switch {
  case _result237.E!= nil:
    return _result237.E
  }

  return nil
}

// Parameters:
//  - SyncReason
func (p *TalkServiceClient) GetSettings(ctx context.Context, syncReason SyncReason) (r *Settings, err error) {
  var _args238 TalkServiceGetSettingsArgs
  _args238.SyncReason = syncReason
  var _result239 TalkServiceGetSettingsResult
  if err = p.Client_().Call(ctx, "getSettings", &_args238, &_result239); err != nil {
    return
  }
  switch {
  case _result239.E!= nil:
    return r, _result239.E
  }

  return _result239.GetSuccess(), nil
}

// Parameters:
//  - KeyVersion
//  - ChatMid
func (p *TalkServiceClient) GetLastE2EEGroupSharedKey(ctx context.Context, keyVersion int32, chatMid string) (r *E2EEGroupSharedKey, err error) {
  var _args240 TalkServiceGetLastE2EEGroupSharedKeyArgs
  _args240.KeyVersion = keyVersion
  _args240.ChatMid = chatMid
  var _result241 TalkServiceGetLastE2EEGroupSharedKeyResult
  if err = p.Client_().Call(ctx, "getLastE2EEGroupSharedKey", &_args240, &_result241); err != nil {
    return
  }
  switch {
  case _result241.E!= nil:
    return r, _result241.E
  }

  return _result241.GetSuccess(), nil
}

func (p *TalkServiceClient) GetRingbackTone(ctx context.Context) (r *RingbackTone, err error) {
  var _args242 TalkServiceGetRingbackToneArgs
  var _result243 TalkServiceGetRingbackToneResult
  if err = p.Client_().Call(ctx, "getRingbackTone", &_args242, &_result243); err != nil {
    return
  }
  switch {
  case _result243.E!= nil:
    return r, _result243.E
  }

  return _result243.GetSuccess(), nil
}

// Parameters:
//  - ReqSeq
//  - RoomId
func (p *TalkServiceClient) LeaveRoom(ctx context.Context, reqSeq int32, roomId string) (err error) {
  var _args244 TalkServiceLeaveRoomArgs
  _args244.ReqSeq = reqSeq
  _args244.RoomId = roomId
  var _result245 TalkServiceLeaveRoomResult
  if err = p.Client_().Call(ctx, "leaveRoom", &_args244, &_result245); err != nil {
    return
  }
  switch {
  case _result245.E!= nil:
    return _result245.E
  }

  return nil
}

// Parameters:
//  - Seq
//  - ChatMid
//  - LastMessageId
//  - SessionId
func (p *TalkServiceClient) SendChatChecked(ctx context.Context, seq int32, chatMid string, lastMessageId string, sessionId int32) (err error) {
  var _args246 TalkServiceSendChatCheckedArgs
  _args246.Seq = seq
  _args246.ChatMid = chatMid
  _args246.LastMessageId = lastMessageId
  _args246.SessionId = sessionId
  var _result247 TalkServiceSendChatCheckedResult
  if err = p.Client_().Call(ctx, "sendChatChecked", &_args246, &_result247); err != nil {
    return
  }
  switch {
  case _result247.E!= nil:
    return _result247.E
  }

  return nil
}

// Parameters:
//  - ReqSeq
//  - SearchId
//  - Reference
func (p *TalkServiceClient) FindAndAddContactsByUserid(ctx context.Context, reqSeq int32, searchId string, reference string) (r map[string]*Contact, err error) {
  var _args248 TalkServiceFindAndAddContactsByUseridArgs
  _args248.ReqSeq = reqSeq
  _args248.SearchId = searchId
  _args248.Reference = reference
  var _result249 TalkServiceFindAndAddContactsByUseridResult
  if err = p.Client_().Call(ctx, "findAndAddContactsByUserid", &_args248, &_result249); err != nil {
    return
  }
  switch {
  case _result249.E!= nil:
    return r, _result249.E
  }

  return _result249.GetSuccess(), nil
}

// Parameters:
//  - SyncReason
func (p *TalkServiceClient) GetAllContactIds(ctx context.Context, syncReason SyncReason) (r []string, err error) {
  var _args250 TalkServiceGetAllContactIdsArgs
  _args250.SyncReason = syncReason
  var _result251 TalkServiceGetAllContactIdsResult
  if err = p.Client_().Call(ctx, "getAllContactIds", &_args250, &_result251); err != nil {
    return
  }
  switch {
  case _result251.E!= nil:
    return r, _result251.E
  }

  return _result251.GetSuccess(), nil
}

// Parameters:
//  - UnfollowRequest
func (p *TalkServiceClient) Unfollow(ctx context.Context, unfollowRequest *UnfollowRequest) (err error) {
  var _args252 TalkServiceUnfollowArgs
  _args252.UnfollowRequest = unfollowRequest
  var _result253 TalkServiceUnfollowResult
  if err = p.Client_().Call(ctx, "unfollow", &_args252, &_result253); err != nil {
    return
  }
  switch {
  case _result253.E!= nil:
    return _result253.E
  }

  return nil
}

// Parameters:
//  - SessionId
func (p *TalkServiceClient) CloseProximityMatch(ctx context.Context, sessionId string) (err error) {
  var _args254 TalkServiceCloseProximityMatchArgs
  _args254.SessionId = sessionId
  var _result255 TalkServiceCloseProximityMatchResult
  if err = p.Client_().Call(ctx, "closeProximityMatch", &_args254, &_result255); err != nil {
    return
  }
  switch {
  case _result255.E!= nil:
    return _result255.E
  }

  return nil
}

// Parameters:
//  - PhoneNumberList
func (p *TalkServiceClient) InviteFriendsBySms(ctx context.Context, phoneNumberList []string) (err error) {
  var _args256 TalkServiceInviteFriendsBySmsArgs
  _args256.PhoneNumberList = phoneNumberList
  var _result257 TalkServiceInviteFriendsBySmsResult
  if err = p.Client_().Call(ctx, "inviteFriendsBySms", &_args256, &_result257); err != nil {
    return
  }
  switch {
  case _result257.E!= nil:
    return _result257.E
  }

  return nil
}

// Parameters:
//  - Categories
func (p *TalkServiceClient) GetChatEffectMetaList(ctx context.Context, categories []C58964da) (r []*ChatEffectMeta, err error) {
  var _args258 TalkServiceGetChatEffectMetaListArgs
  _args258.Categories = categories
  var _result259 TalkServiceGetChatEffectMetaListResult
  if err = p.Client_().Call(ctx, "getChatEffectMetaList", &_args258, &_result259); err != nil {
    return
  }
  switch {
  case _result259.E!= nil:
    return r, _result259.E
  }

  return _result259.GetSuccess(), nil
}

// Parameters:
//  - Seq
//  - LastMessageId
func (p *TalkServiceClient) RemoveAllMessages(ctx context.Context, seq int32, lastMessageId string) (err error) {
  var _args260 TalkServiceRemoveAllMessagesArgs
  _args260.Seq = seq
  _args260.LastMessageId = lastMessageId
  var _result261 TalkServiceRemoveAllMessagesResult
  if err = p.Client_().Call(ctx, "removeAllMessages", &_args260, &_result261); err != nil {
    return
  }
  switch {
  case _result261.E!= nil:
    return _result261.E
  }

  return nil
}

// Parameters:
//  - ReqSeq
//  - ID
//  - Reference
func (p *TalkServiceClient) UnblockContact(ctx context.Context, reqSeq int32, id string, reference string) (err error) {
  var _args262 TalkServiceUnblockContactArgs
  _args262.ReqSeq = reqSeq
  _args262.ID = id
  _args262.Reference = reference
  var _result263 TalkServiceUnblockContactResult
  if err = p.Client_().Call(ctx, "unblockContact", &_args262, &_result263); err != nil {
    return
  }
  switch {
  case _result263.E!= nil:
    return _result263.E
  }

  return nil
}

func (p *TalkServiceClient) GetAnalyticsInfo(ctx context.Context) (r *AnalyticsInfo, err error) {
  var _args264 TalkServiceGetAnalyticsInfoArgs
  var _result265 TalkServiceGetAnalyticsInfoResult
  if err = p.Client_().Call(ctx, "getAnalyticsInfo", &_args264, &_result265); err != nil {
    return
  }
  switch {
  case _result265.E!= nil:
    return r, _result265.E
  }

  return _result265.GetSuccess(), nil
}

// Parameters:
//  - SyncReason
func (p *TalkServiceClient) GetRecommendationIds(ctx context.Context, syncReason SyncReason) (r []string, err error) {
  var _args266 TalkServiceGetRecommendationIdsArgs
  _args266.SyncReason = syncReason
  var _result267 TalkServiceGetRecommendationIdsResult
  if err = p.Client_().Call(ctx, "getRecommendationIds", &_args266, &_result267); err != nil {
    return
  }
  switch {
  case _result267.E!= nil:
    return r, _result267.E
  }

  return _result267.GetSuccess(), nil
}

// Parameters:
//  - UdidHash
//  - ApplicationTypeWithExtensions
func (p *TalkServiceClient) NotifyRegistrationComplete(ctx context.Context, udidHash string, applicationTypeWithExtensions string) (err error) {
  var _args268 TalkServiceNotifyRegistrationCompleteArgs
  _args268.UdidHash = udidHash
  _args268.ApplicationTypeWithExtensions = applicationTypeWithExtensions
  var _result269 TalkServiceNotifyRegistrationCompleteResult
  if err = p.Client_().Call(ctx, "notifyRegistrationComplete", &_args268, &_result269); err != nil {
    return
  }
  switch {
  case _result269.E!= nil:
    return _result269.E
  }

  return nil
}

// Parameters:
//  - ClientRevision
func (p *TalkServiceClient) WakeUpLongPolling(ctx context.Context, clientRevision int64) (r bool, err error) {
  var _args270 TalkServiceWakeUpLongPollingArgs
  _args270.ClientRevision = clientRevision
  var _result271 TalkServiceWakeUpLongPollingResult
  if err = p.Client_().Call(ctx, "wakeUpLongPolling", &_args270, &_result271); err != nil {
    return
  }
  switch {
  case _result271.E!= nil:
    return r, _result271.E
  }

  return _result271.GetSuccess(), nil
}

// Parameters:
//  - ReqSeq
//  - ID
func (p *TalkServiceClient) UnblockRecommendation(ctx context.Context, reqSeq int32, id string) (err error) {
  var _args272 TalkServiceUnblockRecommendationArgs
  _args272.ReqSeq = reqSeq
  _args272.ID = id
  var _result273 TalkServiceUnblockRecommendationResult
  if err = p.Client_().Call(ctx, "unblockRecommendation", &_args272, &_result273); err != nil {
    return
  }
  switch {
  case _result273.E!= nil:
    return _result273.E
  }

  return nil
}

// Parameters:
//  - Seq
//  - Message
func (p *TalkServiceClient) SendMessage(ctx context.Context, seq int32, message *Message) (r *Message, err error) {
  var _args274 TalkServiceSendMessageArgs
  _args274.Seq = seq
  _args274.Message = message
  var _result275 TalkServiceSendMessageResult
  if err = p.Client_().Call(ctx, "sendMessage", &_args274, &_result275); err != nil {
    return
  }
  switch {
  case _result275.E!= nil:
    return r, _result275.E
  }

  return _result275.GetSuccess(), nil
}

// Parameters:
//  - Text
func (p *TalkServiceClient) SendEchoPush(ctx context.Context, text string) (err error) {
  var _args276 TalkServiceSendEchoPushArgs
  _args276.Text = text
  var _result277 TalkServiceSendEchoPushResult
  if err = p.Client_().Call(ctx, "sendEchoPush", &_args276, &_result277); err != nil {
    return
  }
  switch {
  case _result277.E!= nil:
    return _result277.E
  }

  return nil
}

// Parameters:
//  - MigrationPincodeSessionId
//  - AccountMigrationPincode
func (p *TalkServiceClient) VerifyAccountMigrationPincode(ctx context.Context, migrationPincodeSessionId string, accountMigrationPincode string) (err error) {
  var _args278 TalkServiceVerifyAccountMigrationPincodeArgs
  _args278.MigrationPincodeSessionId = migrationPincodeSessionId
  _args278.AccountMigrationPincode = accountMigrationPincode
  var _result279 TalkServiceVerifyAccountMigrationPincodeResult
  if err = p.Client_().Call(ctx, "verifyAccountMigrationPincode", &_args278, &_result279); err != nil {
    return
  }
  switch {
  case _result279.E!= nil:
    return _result279.E
  }

  return nil
}

// Parameters:
//  - UdidHash
//  - ApplicationTypeWithExtensions
func (p *TalkServiceClient) NotifyInstalled(ctx context.Context, udidHash string, applicationTypeWithExtensions string) (err error) {
  var _args280 TalkServiceNotifyInstalledArgs
  _args280.UdidHash = udidHash
  _args280.ApplicationTypeWithExtensions = applicationTypeWithExtensions
  var _result281 TalkServiceNotifyInstalledResult
  if err = p.Client_().Call(ctx, "notifyInstalled", &_args280, &_result281); err != nil {
    return
  }
  switch {
  case _result281.E!= nil:
    return _result281.E
  }

  return nil
}

// Parameters:
//  - Verifier
//  - PinCode
func (p *TalkServiceClient) VerifyQrcode(ctx context.Context, verifier string, pinCode string) (r string, err error) {
  var _args282 TalkServiceVerifyQrcodeArgs
  _args282.Verifier = verifier
  _args282.PinCode = pinCode
  var _result283 TalkServiceVerifyQrcodeResult
  if err = p.Client_().Call(ctx, "verifyQrcode", &_args282, &_result283); err != nil {
    return
  }
  switch {
  case _result283.E!= nil:
    return r, _result283.E
  }

  return _result283.GetSuccess(), nil
}

// Parameters:
//  - SearchId
//  - Reference
func (p *TalkServiceClient) FindContactByMetaTag(ctx context.Context, searchId string, reference string) (r *Contact, err error) {
  var _args284 TalkServiceFindContactByMetaTagArgs
  _args284.SearchId = searchId
  _args284.Reference = reference
  var _result285 TalkServiceFindContactByMetaTagResult
  if err = p.Client_().Call(ctx, "findContactByMetaTag", &_args284, &_result285); err != nil {
    return
  }
  switch {
  case _result285.E!= nil:
    return r, _result285.E
  }

  return _result285.GetSuccess(), nil
}

// Parameters:
//  - Phones
func (p *TalkServiceClient) FindContactsByPhone(ctx context.Context, phones []string) (r map[string]*Contact, err error) {
  var _args286 TalkServiceFindContactsByPhoneArgs
  _args286.Phones = phones
  var _result287 TalkServiceFindContactsByPhoneResult
  if err = p.Client_().Call(ctx, "findContactsByPhone", &_args286, &_result287); err != nil {
    return
  }
  switch {
  case _result287.E!= nil:
    return r, _result287.E
  }

  return _result287.GetSuccess(), nil
}

// Parameters:
//  - SessionId
//  - MigrationPincodeSessionId
func (p *TalkServiceClient) RegisterWithPhoneNumber(ctx context.Context, sessionId string, migrationPincodeSessionId string) (r *RegisterWithPhoneNumberResult_, err error) {
  var _args288 TalkServiceRegisterWithPhoneNumberArgs
  _args288.SessionId = sessionId
  _args288.MigrationPincodeSessionId = migrationPincodeSessionId
  var _result289 TalkServiceRegisterWithPhoneNumberResult
  if err = p.Client_().Call(ctx, "registerWithPhoneNumber", &_args288, &_result289); err != nil {
    return
  }
  switch {
  case _result289.E!= nil:
    return r, _result289.E
  }

  return _result289.GetSuccess(), nil
}

// Parameters:
//  - EMid
func (p *TalkServiceClient) DecryptFollowEMid(ctx context.Context, eMid string) (r string, err error) {
  var _args290 TalkServiceDecryptFollowEMidArgs
  _args290.EMid = eMid
  var _result291 TalkServiceDecryptFollowEMidResult
  if err = p.Client_().Call(ctx, "decryptFollowEMid", &_args290, &_result291); err != nil {
    return
  }
  switch {
  case _result291.E!= nil:
    return r, _result291.E
  }

  return _result291.GetSuccess(), nil
}

// Parameters:
//  - AccountMigrationPincode
func (p *TalkServiceClient) UpdateAccountMigrationPincode(ctx context.Context, accountMigrationPincode string) (err error) {
  var _args292 TalkServiceUpdateAccountMigrationPincodeArgs
  _args292.AccountMigrationPincode = accountMigrationPincode
  var _result293 TalkServiceUpdateAccountMigrationPincodeResult
  if err = p.Client_().Call(ctx, "updateAccountMigrationPincode", &_args292, &_result293); err != nil {
    return
  }
  switch {
  case _result293.E!= nil:
    return _result293.E
  }

  return nil
}

// Parameters:
//  - SearchId
func (p *TalkServiceClient) IsUseridAvailable(ctx context.Context, searchId string) (r bool, err error) {
  var _args294 TalkServiceIsUseridAvailableArgs
  _args294.SearchId = searchId
  var _result295 TalkServiceIsUseridAvailableResult
  if err = p.Client_().Call(ctx, "isUseridAvailable", &_args294, &_result295); err != nil {
    return
  }
  switch {
  case _result295.E!= nil:
    return r, _result295.E
  }

  return _result295.GetSuccess(), nil
}

// Parameters:
//  - GetFollowersRequest
func (p *TalkServiceClient) GetFollowers(ctx context.Context, getFollowersRequest *GetFollowersRequest) (r *GetFollowersResponse, err error) {
  var _args296 TalkServiceGetFollowersArgs
  _args296.GetFollowersRequest = getFollowersRequest
  var _result297 TalkServiceGetFollowersResult
  if err = p.Client_().Call(ctx, "getFollowers", &_args296, &_result297); err != nil {
    return
  }
  switch {
  case _result297.E!= nil:
    return r, _result297.E
  }

  return _result297.GetSuccess(), nil
}

func (p *TalkServiceClient) CreateAccountMigrationPincodeSession(ctx context.Context) (r string, err error) {
  var _args298 TalkServiceCreateAccountMigrationPincodeSessionArgs
  var _result299 TalkServiceCreateAccountMigrationPincodeSessionResult
  if err = p.Client_().Call(ctx, "createAccountMigrationPincodeSession", &_args298, &_result299); err != nil {
    return
  }
  switch {
  case _result299.E!= nil:
    return r, _result299.E
  }

  return _result299.GetSuccess(), nil
}

// Parameters:
//  - SessionId
func (p *TalkServiceClient) ResendPinCode(ctx context.Context, sessionId string) (err error) {
  var _args300 TalkServiceResendPinCodeArgs
  _args300.SessionId = sessionId
  var _result301 TalkServiceResendPinCodeResult
  if err = p.Client_().Call(ctx, "resendPinCode", &_args300, &_result301); err != nil {
    return
  }
  switch {
  case _result301.E!= nil:
    return _result301.E
  }

  return nil
}

// Parameters:
//  - GetFollowingsRequest
func (p *TalkServiceClient) GetFollowings(ctx context.Context, getFollowingsRequest *GetFollowingsRequest) (r *GetFollowingsResponse, err error) {
  var _args302 TalkServiceGetFollowingsArgs
  _args302.GetFollowingsRequest = getFollowingsRequest
  var _result303 TalkServiceGetFollowingsResult
  if err = p.Client_().Call(ctx, "getFollowings", &_args302, &_result303); err != nil {
    return
  }
  switch {
  case _result303.E!= nil:
    return r, _result303.E
  }

  return _result303.GetSuccess(), nil
}

func (p *TalkServiceClient) GetServerTime(ctx context.Context) (r int64, err error) {
  var _args304 TalkServiceGetServerTimeArgs
  var _result305 TalkServiceGetServerTimeResult
  if err = p.Client_().Call(ctx, "getServerTime", &_args304, &_result305); err != nil {
    return
  }
  switch {
  case _result305.E!= nil:
    return r, _result305.E
  }

  return _result305.GetSuccess(), nil
}

func (p *TalkServiceClient) GetLastOpRevision(ctx context.Context) (r int64, err error) {
  var _args306 TalkServiceGetLastOpRevisionArgs
  var _result307 TalkServiceGetLastOpRevisionResult
  if err = p.Client_().Call(ctx, "getLastOpRevision", &_args306, &_result307); err != nil {
    return
  }
  switch {
  case _result307.E!= nil:
    return r, _result307.E
  }

  return _result307.GetSuccess(), nil
}

// Parameters:
//  - TicketIdWithTag
func (p *TalkServiceClient) FindContactByUserTicket(ctx context.Context, ticketIdWithTag string) (r *Contact, err error) {
  var _args308 TalkServiceFindContactByUserTicketArgs
  _args308.TicketIdWithTag = ticketIdWithTag
  var _result309 TalkServiceFindContactByUserTicketResult
  if err = p.Client_().Call(ctx, "findContactByUserTicket", &_args308, &_result309); err != nil {
    return
  }
  switch {
  case _result309.E!= nil:
    return r, _result309.E
  }

  return _result309.GetSuccess(), nil
}

// Parameters:
//  - SessionId
func (p *TalkServiceClient) FinishUpdateVerification(ctx context.Context, sessionId string) (err error) {
  var _args310 TalkServiceFinishUpdateVerificationArgs
  _args310.SessionId = sessionId
  var _result311 TalkServiceFinishUpdateVerificationResult
  if err = p.Client_().Call(ctx, "finishUpdateVerification", &_args310, &_result311); err != nil {
    return
  }
  switch {
  case _result311.E!= nil:
    return _result311.E
  }

  return nil
}

// Parameters:
//  - SessionId
func (p *TalkServiceClient) GetAcceptedProximityMatches(ctx context.Context, sessionId string) (r []string, err error) {
  var _args312 TalkServiceGetAcceptedProximityMatchesArgs
  _args312.SessionId = sessionId
  var _result313 TalkServiceGetAcceptedProximityMatchesResult
  if err = p.Client_().Call(ctx, "getAcceptedProximityMatches", &_args312, &_result313); err != nil {
    return
  }
  switch {
  case _result313.E!= nil:
    return r, _result313.E
  }

  return _result313.GetSuccess(), nil
}

func (p *TalkServiceClient) ClearRingbackTone(ctx context.Context) (err error) {
  var _args314 TalkServiceClearRingbackToneArgs
  var _result315 TalkServiceClearRingbackToneResult
  if err = p.Client_().Call(ctx, "clearRingbackTone", &_args314, &_result315); err != nil {
    return
  }
  switch {
  case _result315.E!= nil:
    return _result315.E
  }

  return nil
}

func (p *TalkServiceClient) UnregisterUserAndDevice(ctx context.Context) (r string, err error) {
  var _args316 TalkServiceUnregisterUserAndDeviceArgs
  var _result317 TalkServiceUnregisterUserAndDeviceResult
  if err = p.Client_().Call(ctx, "unregisterUserAndDevice", &_args316, &_result317); err != nil {
    return
  }
  switch {
  case _result317.E!= nil:
    return r, _result317.E
  }

  return _result317.GetSuccess(), nil
}

type TalkServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler TalkService
}

func (p *TalkServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *TalkServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *TalkServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewTalkServiceProcessor(handler TalkService) *TalkServiceProcessor {

  self318 := &TalkServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self318.processorMap["updateSettingsAttributes2"] = &talkServiceProcessorUpdateSettingsAttributes2{handler:handler}
  self318.processorMap["updateProfileAttributes"] = &talkServiceProcessorUpdateProfileAttributes{handler:handler}
  self318.processorMap["updateContactSetting"] = &talkServiceProcessorUpdateContactSetting{handler:handler}
  self318.processorMap["getRecentFriendRequests"] = &talkServiceProcessorGetRecentFriendRequests{handler:handler}
  self318.processorMap["getCountryWithRequestIp"] = &talkServiceProcessorGetCountryWithRequestIp{handler:handler}
  self318.processorMap["getContact"] = &talkServiceProcessorGetContact{handler:handler}
  self318.processorMap["getLastE2EEPublicKeys"] = &talkServiceProcessorGetLastE2EEPublicKeys{handler:handler}
  self318.processorMap["getRingtone"] = &talkServiceProcessorGetRingtone{handler:handler}
  self318.processorMap["negotiateE2EEPublicKey"] = &talkServiceProcessorNegotiateE2EEPublicKey{handler:handler}
  self318.processorMap["findContactByUserid"] = &talkServiceProcessorFindContactByUserid{handler:handler}
  self318.processorMap["clearRingtone"] = &talkServiceProcessorClearRingtone{handler:handler}
  self318.processorMap["setNotificationsEnabled"] = &talkServiceProcessorSetNotificationsEnabled{handler:handler}
  self318.processorMap["deleteOtherFromChat"] = &talkServiceProcessorDeleteOtherFromChat{handler:handler}
  self318.processorMap["inviteIntoChat"] = &talkServiceProcessorInviteIntoChat{handler:handler}
  self318.processorMap["acceptChatInvitationByTicket"] = &talkServiceProcessorAcceptChatInvitationByTicket{handler:handler}
  self318.processorMap["deleteSelfFromChat"] = &talkServiceProcessorDeleteSelfFromChat{handler:handler}
  self318.processorMap["findChatByTicket"] = &talkServiceProcessorFindChatByTicket{handler:handler}
  self318.processorMap["cancelChatInvitation"] = &talkServiceProcessorCancelChatInvitation{handler:handler}
  self318.processorMap["acceptChatInvitation"] = &talkServiceProcessorAcceptChatInvitation{handler:handler}
  self318.processorMap["getMessageBoxes"] = &talkServiceProcessorGetMessageBoxes{handler:handler}
  self318.processorMap["updateChat"] = &talkServiceProcessorUpdateChat{handler:handler}
  self318.processorMap["reissueChatTicket"] = &talkServiceProcessorReissueChatTicket{handler:handler}
  self318.processorMap["getAllChatMids"] = &talkServiceProcessorGetAllChatMids{handler:handler}
  self318.processorMap["rejectChatInvitation"] = &talkServiceProcessorRejectChatInvitation{handler:handler}
  self318.processorMap["createChat"] = &talkServiceProcessorCreateChat{handler:handler}
  self318.processorMap["getChatRoomAnnouncementsBulk"] = &talkServiceProcessorGetChatRoomAnnouncementsBulk{handler:handler}
  self318.processorMap["getChats"] = &talkServiceProcessorGetChats{handler:handler}
  self318.processorMap["startUpdateVerification"] = &talkServiceProcessorStartUpdateVerification{handler:handler}
  self318.processorMap["startVerification"] = &talkServiceProcessorStartVerification{handler:handler}
  self318.processorMap["changeVerificationMethod"] = &talkServiceProcessorChangeVerificationMethod{handler:handler}
  self318.processorMap["getEncryptedIdentityV3"] = &talkServiceProcessorGetEncryptedIdentityV3{handler:handler}
  self318.processorMap["getE2EEGroupSharedKey"] = &talkServiceProcessorGetE2EEGroupSharedKey{handler:handler}
  self318.processorMap["registerE2EEGroupKey"] = &talkServiceProcessorRegisterE2EEGroupKey{handler:handler}
  self318.processorMap["generateUserTicket"] = &talkServiceProcessorGenerateUserTicket{handler:handler}
  self318.processorMap["registerE2EEPublicKey"] = &talkServiceProcessorRegisterE2EEPublicKey{handler:handler}
  self318.processorMap["getE2EEPublicKey"] = &talkServiceProcessorGetE2EEPublicKey{handler:handler}
  self318.processorMap["getRSAKeyInfo"] = &talkServiceProcessorGetRSAKeyInfo{handler:handler}
  self318.processorMap["registerWithSnsId"] = &talkServiceProcessorRegisterWithSnsId{handler:handler}
  self318.processorMap["findSnsIdUserStatus"] = &talkServiceProcessorFindSnsIdUserStatus{handler:handler}
  self318.processorMap["getContactRegistration"] = &talkServiceProcessorGetContactRegistration{handler:handler}
  self318.processorMap["verifyPhoneNumber"] = &talkServiceProcessorVerifyPhoneNumber{handler:handler}
  self318.processorMap["acquireEncryptedAccessToken"] = &talkServiceProcessorAcquireEncryptedAccessToken{handler:handler}
  self318.processorMap["registerWithSnsIdAndIdentityCredential"] = &talkServiceProcessorRegisterWithSnsIdAndIdentityCredential{handler:handler}
  self318.processorMap["getShakeEventV1"] = &talkServiceProcessorGetShakeEventV1{handler:handler}
  self318.processorMap["registerDeviceWithIdentityCredential"] = &talkServiceProcessorRegisterDeviceWithIdentityCredential{handler:handler}
  self318.processorMap["updateAndGetNearby"] = &talkServiceProcessorUpdateAndGetNearby{handler:handler}
  self318.processorMap["fetchOperations"] = &talkServiceProcessorFetchOperations{handler:handler}
  self318.processorMap["fetchOps"] = &talkServiceProcessorFetchOps{handler:handler}
  self318.processorMap["unsendMessage"] = &talkServiceProcessorUnsendMessage{handler:handler}
  self318.processorMap["blockRecommendation"] = &talkServiceProcessorBlockRecommendation{handler:handler}
  self318.processorMap["findAndAddContactsByMid"] = &talkServiceProcessorFindAndAddContactsByMid{handler:handler}
  self318.processorMap["requestResendMessage"] = &talkServiceProcessorRequestResendMessage{handler:handler}
  self318.processorMap["sendChatRemoved"] = &talkServiceProcessorSendChatRemoved{handler:handler}
  self318.processorMap["respondResendMessage"] = &talkServiceProcessorRespondResendMessage{handler:handler}
  self318.processorMap["inviteIntoRoom"] = &talkServiceProcessorInviteIntoRoom{handler:handler}
  self318.processorMap["respondE2EEKeyExchange"] = &talkServiceProcessorRespondE2EEKeyExchange{handler:handler}
  self318.processorMap["syncContacts"] = &talkServiceProcessorSyncContacts{handler:handler}
  self318.processorMap["findAndAddContactsByPhone"] = &talkServiceProcessorFindAndAddContactsByPhone{handler:handler}
  self318.processorMap["notifySleep"] = &talkServiceProcessorNotifySleep{handler:handler}
  self318.processorMap["reportProfile"] = &talkServiceProcessorReportProfile{handler:handler}
  self318.processorMap["notifyUpdated"] = &talkServiceProcessorNotifyUpdated{handler:handler}
  self318.processorMap["reportSettings"] = &talkServiceProcessorReportSettings{handler:handler}
  self318.processorMap["getBlockedContactIds"] = &talkServiceProcessorGetBlockedContactIds{handler:handler}
  self318.processorMap["openProximityMatch"] = &talkServiceProcessorOpenProximityMatch{handler:handler}
  self318.processorMap["removeFriendRequest"] = &talkServiceProcessorRemoveFriendRequest{handler:handler}
  self318.processorMap["updateNotificationToken"] = &talkServiceProcessorUpdateNotificationToken{handler:handler}
  self318.processorMap["updateExtendedProfileAttribute"] = &talkServiceProcessorUpdateExtendedProfileAttribute{handler:handler}
  self318.processorMap["verifyIdentityCredentialWithResult"] = &talkServiceProcessorVerifyIdentityCredentialWithResult_{handler:handler}
  self318.processorMap["requestAccountPasswordReset"] = &talkServiceProcessorRequestAccountPasswordReset{handler:handler}
  self318.processorMap["sendPostback"] = &talkServiceProcessorSendPostback{handler:handler}
  self318.processorMap["tryFriendRequest"] = &talkServiceProcessorTryFriendRequest{handler:handler}
  self318.processorMap["acceptProximityMatches"] = &talkServiceProcessorAcceptProximityMatches{handler:handler}
  self318.processorMap["getContacts"] = &talkServiceProcessorGetContacts{handler:handler}
  self318.processorMap["reportDeviceState"] = &talkServiceProcessorReportDeviceState{handler:handler}
  self318.processorMap["blockContact"] = &talkServiceProcessorBlockContact{handler:handler}
  self318.processorMap["getExtendedProfile"] = &talkServiceProcessorGetExtendedProfile{handler:handler}
  self318.processorMap["getSettingsAttributes2"] = &talkServiceProcessorGetSettingsAttributes2{handler:handler}
  self318.processorMap["getProfile"] = &talkServiceProcessorGetProfile{handler:handler}
  self318.processorMap["getProximityMatchCandidateList"] = &talkServiceProcessorGetProximityMatchCandidateList{handler:handler}
  self318.processorMap["findAndAddContactByMetaTag"] = &talkServiceProcessorFindAndAddContactByMetaTag{handler:handler}
  self318.processorMap["getMessageReadRange"] = &talkServiceProcessorGetMessageReadRange{handler:handler}
  self318.processorMap["registerUserid"] = &talkServiceProcessorRegisterUserid{handler:handler}
  self318.processorMap["reportPushRecvReports"] = &talkServiceProcessorReportPushRecvReports{handler:handler}
  self318.processorMap["noop"] = &talkServiceProcessorNoop{handler:handler}
  self318.processorMap["getBlockedRecommendationIds"] = &talkServiceProcessorGetBlockedRecommendationIds{handler:handler}
  self318.processorMap["removeFollower"] = &talkServiceProcessorRemoveFollower{handler:handler}
  self318.processorMap["verifyAccountMigration"] = &talkServiceProcessorVerifyAccountMigration{handler:handler}
  self318.processorMap["getSettings"] = &talkServiceProcessorGetSettings{handler:handler}
  self318.processorMap["getLastE2EEGroupSharedKey"] = &talkServiceProcessorGetLastE2EEGroupSharedKey{handler:handler}
  self318.processorMap["getRingbackTone"] = &talkServiceProcessorGetRingbackTone{handler:handler}
  self318.processorMap["leaveRoom"] = &talkServiceProcessorLeaveRoom{handler:handler}
  self318.processorMap["sendChatChecked"] = &talkServiceProcessorSendChatChecked{handler:handler}
  self318.processorMap["findAndAddContactsByUserid"] = &talkServiceProcessorFindAndAddContactsByUserid{handler:handler}
  self318.processorMap["getAllContactIds"] = &talkServiceProcessorGetAllContactIds{handler:handler}
  self318.processorMap["unfollow"] = &talkServiceProcessorUnfollow{handler:handler}
  self318.processorMap["closeProximityMatch"] = &talkServiceProcessorCloseProximityMatch{handler:handler}
  self318.processorMap["inviteFriendsBySms"] = &talkServiceProcessorInviteFriendsBySms{handler:handler}
  self318.processorMap["getChatEffectMetaList"] = &talkServiceProcessorGetChatEffectMetaList{handler:handler}
  self318.processorMap["removeAllMessages"] = &talkServiceProcessorRemoveAllMessages{handler:handler}
  self318.processorMap["unblockContact"] = &talkServiceProcessorUnblockContact{handler:handler}
  self318.processorMap["getAnalyticsInfo"] = &talkServiceProcessorGetAnalyticsInfo{handler:handler}
  self318.processorMap["getRecommendationIds"] = &talkServiceProcessorGetRecommendationIds{handler:handler}
  self318.processorMap["notifyRegistrationComplete"] = &talkServiceProcessorNotifyRegistrationComplete{handler:handler}
  self318.processorMap["wakeUpLongPolling"] = &talkServiceProcessorWakeUpLongPolling{handler:handler}
  self318.processorMap["unblockRecommendation"] = &talkServiceProcessorUnblockRecommendation{handler:handler}
  self318.processorMap["sendMessage"] = &talkServiceProcessorSendMessage{handler:handler}
  self318.processorMap["sendEchoPush"] = &talkServiceProcessorSendEchoPush{handler:handler}
  self318.processorMap["verifyAccountMigrationPincode"] = &talkServiceProcessorVerifyAccountMigrationPincode{handler:handler}
  self318.processorMap["notifyInstalled"] = &talkServiceProcessorNotifyInstalled{handler:handler}
  self318.processorMap["verifyQrcode"] = &talkServiceProcessorVerifyQrcode{handler:handler}
  self318.processorMap["findContactByMetaTag"] = &talkServiceProcessorFindContactByMetaTag{handler:handler}
  self318.processorMap["findContactsByPhone"] = &talkServiceProcessorFindContactsByPhone{handler:handler}
  self318.processorMap["registerWithPhoneNumber"] = &talkServiceProcessorRegisterWithPhoneNumber{handler:handler}
  self318.processorMap["decryptFollowEMid"] = &talkServiceProcessorDecryptFollowEMid{handler:handler}
  self318.processorMap["updateAccountMigrationPincode"] = &talkServiceProcessorUpdateAccountMigrationPincode{handler:handler}
  self318.processorMap["isUseridAvailable"] = &talkServiceProcessorIsUseridAvailable{handler:handler}
  self318.processorMap["getFollowers"] = &talkServiceProcessorGetFollowers{handler:handler}
  self318.processorMap["createAccountMigrationPincodeSession"] = &talkServiceProcessorCreateAccountMigrationPincodeSession{handler:handler}
  self318.processorMap["resendPinCode"] = &talkServiceProcessorResendPinCode{handler:handler}
  self318.processorMap["getFollowings"] = &talkServiceProcessorGetFollowings{handler:handler}
  self318.processorMap["getServerTime"] = &talkServiceProcessorGetServerTime{handler:handler}
  self318.processorMap["getLastOpRevision"] = &talkServiceProcessorGetLastOpRevision{handler:handler}
  self318.processorMap["findContactByUserTicket"] = &talkServiceProcessorFindContactByUserTicket{handler:handler}
  self318.processorMap["finishUpdateVerification"] = &talkServiceProcessorFinishUpdateVerification{handler:handler}
  self318.processorMap["getAcceptedProximityMatches"] = &talkServiceProcessorGetAcceptedProximityMatches{handler:handler}
  self318.processorMap["clearRingbackTone"] = &talkServiceProcessorClearRingbackTone{handler:handler}
  self318.processorMap["unregisterUserAndDevice"] = &talkServiceProcessorUnregisterUserAndDevice{handler:handler}
return self318
}

func (p *TalkServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x319 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x319.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush(ctx)
  return false, x319

}

type talkServiceProcessorUpdateSettingsAttributes2 struct {
  handler TalkService
}

func (p *talkServiceProcessorUpdateSettingsAttributes2) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceUpdateSettingsAttributes2Args{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("updateSettingsAttributes2", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TalkServiceUpdateSettingsAttributes2Result{}
var retval []SettingAttribute
  var err2 error
  if retval, err2 = p.handler.UpdateSettingsAttributes2(ctx, args.ReqSeq, args.AttributesToUpdate, args.Settings); err2 != nil {
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateSettingsAttributes2: " + err2.Error())
    oprot.WriteMessageBegin("updateSettingsAttributes2", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("updateSettingsAttributes2", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorUpdateProfileAttributes struct {
  handler TalkService
}

func (p *talkServiceProcessorUpdateProfileAttributes) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceUpdateProfileAttributesArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("updateProfileAttributes", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TalkServiceUpdateProfileAttributesResult{}
  var err2 error
  if err2 = p.handler.UpdateProfileAttributes(ctx, args.ReqSeq, args.Request); err2 != nil {
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateProfileAttributes: " + err2.Error())
    oprot.WriteMessageBegin("updateProfileAttributes", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("updateProfileAttributes", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorUpdateContactSetting struct {
  handler TalkService
}

func (p *talkServiceProcessorUpdateContactSetting) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceUpdateContactSettingArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("updateContactSetting", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TalkServiceUpdateContactSettingResult{}
  var err2 error
  if err2 = p.handler.UpdateContactSetting(ctx, args.ReqSeq, args.Mid, args.Flag, args.Value); err2 != nil {
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateContactSetting: " + err2.Error())
    oprot.WriteMessageBegin("updateContactSetting", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("updateContactSetting", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorGetRecentFriendRequests struct {
  handler TalkService
}

func (p *talkServiceProcessorGetRecentFriendRequests) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceGetRecentFriendRequestsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getRecentFriendRequests", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TalkServiceGetRecentFriendRequestsResult{}
var retval *FriendRequestsInfo
  var err2 error
  if retval, err2 = p.handler.GetRecentFriendRequests(ctx, args.SyncReason); err2 != nil {
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getRecentFriendRequests: " + err2.Error())
    oprot.WriteMessageBegin("getRecentFriendRequests", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getRecentFriendRequests", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorGetCountryWithRequestIp struct {
  handler TalkService
}

func (p *talkServiceProcessorGetCountryWithRequestIp) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceGetCountryWithRequestIpArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getCountryWithRequestIp", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TalkServiceGetCountryWithRequestIpResult{}
var retval string
  var err2 error
  if retval, err2 = p.handler.GetCountryWithRequestIp(ctx); err2 != nil {
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getCountryWithRequestIp: " + err2.Error())
    oprot.WriteMessageBegin("getCountryWithRequestIp", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("getCountryWithRequestIp", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorGetContact struct {
  handler TalkService
}

func (p *talkServiceProcessorGetContact) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceGetContactArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getContact", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TalkServiceGetContactResult{}
var retval *Contact
  var err2 error
  if retval, err2 = p.handler.GetContact(ctx, args.ID); err2 != nil {
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getContact: " + err2.Error())
    oprot.WriteMessageBegin("getContact", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getContact", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorGetLastE2EEPublicKeys struct {
  handler TalkService
}

func (p *talkServiceProcessorGetLastE2EEPublicKeys) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceGetLastE2EEPublicKeysArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getLastE2EEPublicKeys", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TalkServiceGetLastE2EEPublicKeysResult{}
var retval map[string]*E2EEPublicKey
  var err2 error
  if retval, err2 = p.handler.GetLastE2EEPublicKeys(ctx, args.ChatMid); err2 != nil {
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getLastE2EEPublicKeys: " + err2.Error())
    oprot.WriteMessageBegin("getLastE2EEPublicKeys", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getLastE2EEPublicKeys", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorGetRingtone struct {
  handler TalkService
}

func (p *talkServiceProcessorGetRingtone) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceGetRingtoneArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getRingtone", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TalkServiceGetRingtoneResult{}
var retval *Ringtone
  var err2 error
  if retval, err2 = p.handler.GetRingtone(ctx); err2 != nil {
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getRingtone: " + err2.Error())
    oprot.WriteMessageBegin("getRingtone", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getRingtone", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorNegotiateE2EEPublicKey struct {
  handler TalkService
}

func (p *talkServiceProcessorNegotiateE2EEPublicKey) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceNegotiateE2EEPublicKeyArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("negotiateE2EEPublicKey", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TalkServiceNegotiateE2EEPublicKeyResult{}
var retval *E2EENegotiationResult_
  var err2 error
  if retval, err2 = p.handler.NegotiateE2EEPublicKey(ctx, args.Mid); err2 != nil {
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing negotiateE2EEPublicKey: " + err2.Error())
    oprot.WriteMessageBegin("negotiateE2EEPublicKey", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("negotiateE2EEPublicKey", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorFindContactByUserid struct {
  handler TalkService
}

func (p *talkServiceProcessorFindContactByUserid) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceFindContactByUseridArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("findContactByUserid", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TalkServiceFindContactByUseridResult{}
var retval *Contact
  var err2 error
  if retval, err2 = p.handler.FindContactByUserid(ctx, args.SearchId); err2 != nil {
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing findContactByUserid: " + err2.Error())
    oprot.WriteMessageBegin("findContactByUserid", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("findContactByUserid", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorClearRingtone struct {
  handler TalkService
}

func (p *talkServiceProcessorClearRingtone) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceClearRingtoneArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("clearRingtone", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TalkServiceClearRingtoneResult{}
  var err2 error
  if err2 = p.handler.ClearRingtone(ctx, args.Oid); err2 != nil {
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing clearRingtone: " + err2.Error())
    oprot.WriteMessageBegin("clearRingtone", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("clearRingtone", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorSetNotificationsEnabled struct {
  handler TalkService
}

func (p *talkServiceProcessorSetNotificationsEnabled) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceSetNotificationsEnabledArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("setNotificationsEnabled", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TalkServiceSetNotificationsEnabledResult{}
  var err2 error
  if err2 = p.handler.SetNotificationsEnabled(ctx, args.ReqSeq, args.Type, args.Target, args.Enablement); err2 != nil {
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing setNotificationsEnabled: " + err2.Error())
    oprot.WriteMessageBegin("setNotificationsEnabled", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("setNotificationsEnabled", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorDeleteOtherFromChat struct {
  handler TalkService
}

func (p *talkServiceProcessorDeleteOtherFromChat) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceDeleteOtherFromChatArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("deleteOtherFromChat", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TalkServiceDeleteOtherFromChatResult{}
var retval *DeleteOtherFromChatResponse
  var err2 error
  if retval, err2 = p.handler.DeleteOtherFromChat(ctx, args.Request); err2 != nil {
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing deleteOtherFromChat: " + err2.Error())
    oprot.WriteMessageBegin("deleteOtherFromChat", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("deleteOtherFromChat", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorInviteIntoChat struct {
  handler TalkService
}

func (p *talkServiceProcessorInviteIntoChat) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceInviteIntoChatArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("inviteIntoChat", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TalkServiceInviteIntoChatResult{}
var retval *InviteIntoChatResponse
  var err2 error
  if retval, err2 = p.handler.InviteIntoChat(ctx, args.Request); err2 != nil {
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing inviteIntoChat: " + err2.Error())
    oprot.WriteMessageBegin("inviteIntoChat", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("inviteIntoChat", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorAcceptChatInvitationByTicket struct {
  handler TalkService
}

func (p *talkServiceProcessorAcceptChatInvitationByTicket) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceAcceptChatInvitationByTicketArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("acceptChatInvitationByTicket", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TalkServiceAcceptChatInvitationByTicketResult{}
var retval *AcceptChatInvitationByTicketResponse
  var err2 error
  if retval, err2 = p.handler.AcceptChatInvitationByTicket(ctx, args.Request); err2 != nil {
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing acceptChatInvitationByTicket: " + err2.Error())
    oprot.WriteMessageBegin("acceptChatInvitationByTicket", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("acceptChatInvitationByTicket", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorDeleteSelfFromChat struct {
  handler TalkService
}

func (p *talkServiceProcessorDeleteSelfFromChat) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceDeleteSelfFromChatArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("deleteSelfFromChat", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TalkServiceDeleteSelfFromChatResult{}
var retval *DeleteSelfFromChatResponse
  var err2 error
  if retval, err2 = p.handler.DeleteSelfFromChat(ctx, args.Request); err2 != nil {
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing deleteSelfFromChat: " + err2.Error())
    oprot.WriteMessageBegin("deleteSelfFromChat", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("deleteSelfFromChat", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorFindChatByTicket struct {
  handler TalkService
}

func (p *talkServiceProcessorFindChatByTicket) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceFindChatByTicketArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("findChatByTicket", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TalkServiceFindChatByTicketResult{}
var retval *FindChatByTicketResponse
  var err2 error
  if retval, err2 = p.handler.FindChatByTicket(ctx, args.Request); err2 != nil {
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing findChatByTicket: " + err2.Error())
    oprot.WriteMessageBegin("findChatByTicket", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("findChatByTicket", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorCancelChatInvitation struct {
  handler TalkService
}

func (p *talkServiceProcessorCancelChatInvitation) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceCancelChatInvitationArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("cancelChatInvitation", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TalkServiceCancelChatInvitationResult{}
var retval *CancelChatInvitationResponse
  var err2 error
  if retval, err2 = p.handler.CancelChatInvitation(ctx, args.Request); err2 != nil {
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing cancelChatInvitation: " + err2.Error())
    oprot.WriteMessageBegin("cancelChatInvitation", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("cancelChatInvitation", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorAcceptChatInvitation struct {
  handler TalkService
}

func (p *talkServiceProcessorAcceptChatInvitation) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceAcceptChatInvitationArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("acceptChatInvitation", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TalkServiceAcceptChatInvitationResult{}
var retval *AcceptChatInvitationResponse
  var err2 error
  if retval, err2 = p.handler.AcceptChatInvitation(ctx, args.Request); err2 != nil {
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing acceptChatInvitation: " + err2.Error())
    oprot.WriteMessageBegin("acceptChatInvitation", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("acceptChatInvitation", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorGetMessageBoxes struct {
  handler TalkService
}

func (p *talkServiceProcessorGetMessageBoxes) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceGetMessageBoxesArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getMessageBoxes", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TalkServiceGetMessageBoxesResult{}
var retval *MessageBoxList
  var err2 error
  if retval, err2 = p.handler.GetMessageBoxes(ctx, args.MessageBoxListRequest, args.SyncReason); err2 != nil {
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getMessageBoxes: " + err2.Error())
    oprot.WriteMessageBegin("getMessageBoxes", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getMessageBoxes", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorUpdateChat struct {
  handler TalkService
}

func (p *talkServiceProcessorUpdateChat) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceUpdateChatArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("updateChat", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TalkServiceUpdateChatResult{}
var retval *UpdateChatResponse
  var err2 error
  if retval, err2 = p.handler.UpdateChat(ctx, args.Request); err2 != nil {
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateChat: " + err2.Error())
    oprot.WriteMessageBegin("updateChat", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("updateChat", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorReissueChatTicket struct {
  handler TalkService
}

func (p *talkServiceProcessorReissueChatTicket) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceReissueChatTicketArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("reissueChatTicket", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TalkServiceReissueChatTicketResult{}
var retval *ReissueChatTicketResponse
  var err2 error
  if retval, err2 = p.handler.ReissueChatTicket(ctx, args.Request); err2 != nil {
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing reissueChatTicket: " + err2.Error())
    oprot.WriteMessageBegin("reissueChatTicket", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("reissueChatTicket", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorGetAllChatMids struct {
  handler TalkService
}

func (p *talkServiceProcessorGetAllChatMids) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceGetAllChatMidsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getAllChatMids", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TalkServiceGetAllChatMidsResult{}
var retval *GetAllChatMidsResponse
  var err2 error
  if retval, err2 = p.handler.GetAllChatMids(ctx, args.Request, args.SyncReason); err2 != nil {
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getAllChatMids: " + err2.Error())
    oprot.WriteMessageBegin("getAllChatMids", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getAllChatMids", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorRejectChatInvitation struct {
  handler TalkService
}

func (p *talkServiceProcessorRejectChatInvitation) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceRejectChatInvitationArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("rejectChatInvitation", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TalkServiceRejectChatInvitationResult{}
var retval *RejectChatInvitationResponse
  var err2 error
  if retval, err2 = p.handler.RejectChatInvitation(ctx, args.Request); err2 != nil {
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing rejectChatInvitation: " + err2.Error())
    oprot.WriteMessageBegin("rejectChatInvitation", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("rejectChatInvitation", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorCreateChat struct {
  handler TalkService
}

func (p *talkServiceProcessorCreateChat) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceCreateChatArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("createChat", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TalkServiceCreateChatResult{}
var retval *CreateChatResponse
  var err2 error
  if retval, err2 = p.handler.CreateChat(ctx, args.Request); err2 != nil {
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing createChat: " + err2.Error())
    oprot.WriteMessageBegin("createChat", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("createChat", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorGetChatRoomAnnouncementsBulk struct {
  handler TalkService
}

func (p *talkServiceProcessorGetChatRoomAnnouncementsBulk) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceGetChatRoomAnnouncementsBulkArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getChatRoomAnnouncementsBulk", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TalkServiceGetChatRoomAnnouncementsBulkResult{}
var retval map[string][]*ChatRoomAnnouncement
  var err2 error
  if retval, err2 = p.handler.GetChatRoomAnnouncementsBulk(ctx, args.ChatRoomMids, args.SyncReason); err2 != nil {
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getChatRoomAnnouncementsBulk: " + err2.Error())
    oprot.WriteMessageBegin("getChatRoomAnnouncementsBulk", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getChatRoomAnnouncementsBulk", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorGetChats struct {
  handler TalkService
}

func (p *talkServiceProcessorGetChats) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceGetChatsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getChats", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TalkServiceGetChatsResult{}
var retval *GetChatsResponse
  var err2 error
  if retval, err2 = p.handler.GetChats(ctx, args.Request); err2 != nil {
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getChats: " + err2.Error())
    oprot.WriteMessageBegin("getChats", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getChats", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorStartUpdateVerification struct {
  handler TalkService
}

func (p *talkServiceProcessorStartUpdateVerification) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceStartUpdateVerificationArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("startUpdateVerification", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TalkServiceStartUpdateVerificationResult{}
var retval *VerificationSessionData
  var err2 error
  if retval, err2 = p.handler.StartUpdateVerification(ctx, args.Region, args.Carrier, args.Phone, args.UdidHash, args.DeviceInfo, args.NetworkCode, args.Locale, args.SimInfo); err2 != nil {
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing startUpdateVerification: " + err2.Error())
    oprot.WriteMessageBegin("startUpdateVerification", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("startUpdateVerification", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorStartVerification struct {
  handler TalkService
}

func (p *talkServiceProcessorStartVerification) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceStartVerificationArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("startVerification", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TalkServiceStartVerificationResult{}
var retval *VerificationSessionData
  var err2 error
  if retval, err2 = p.handler.StartVerification(ctx, args.Region, args.Carrier, args.Phone, args.UdidHash, args.DeviceInfo, args.NetworkCode, args.Mid, args.Locale, args.SimInfo, args.OldUdidHash); err2 != nil {
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing startVerification: " + err2.Error())
    oprot.WriteMessageBegin("startVerification", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("startVerification", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorChangeVerificationMethod struct {
  handler TalkService
}

func (p *talkServiceProcessorChangeVerificationMethod) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceChangeVerificationMethodArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("changeVerificationMethod", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TalkServiceChangeVerificationMethodResult{}
var retval *VerificationSessionData
  var err2 error
  if retval, err2 = p.handler.ChangeVerificationMethod(ctx, args.SessionId, args.Method); err2 != nil {
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing changeVerificationMethod: " + err2.Error())
    oprot.WriteMessageBegin("changeVerificationMethod", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("changeVerificationMethod", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorGetEncryptedIdentityV3 struct {
  handler TalkService
}

func (p *talkServiceProcessorGetEncryptedIdentityV3) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceGetEncryptedIdentityV3Args{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getEncryptedIdentityV3", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TalkServiceGetEncryptedIdentityV3Result{}
var retval *GetEncryptedIdentityV3Response
  var err2 error
  if retval, err2 = p.handler.GetEncryptedIdentityV3(ctx); err2 != nil {
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getEncryptedIdentityV3: " + err2.Error())
    oprot.WriteMessageBegin("getEncryptedIdentityV3", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getEncryptedIdentityV3", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorGetE2EEGroupSharedKey struct {
  handler TalkService
}

func (p *talkServiceProcessorGetE2EEGroupSharedKey) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceGetE2EEGroupSharedKeyArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getE2EEGroupSharedKey", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TalkServiceGetE2EEGroupSharedKeyResult{}
var retval *E2EEGroupSharedKey
  var err2 error
  if retval, err2 = p.handler.GetE2EEGroupSharedKey(ctx, args.KeyVersion, args.ChatMid, args.GroupKeyId); err2 != nil {
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getE2EEGroupSharedKey: " + err2.Error())
    oprot.WriteMessageBegin("getE2EEGroupSharedKey", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getE2EEGroupSharedKey", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorRegisterE2EEGroupKey struct {
  handler TalkService
}

func (p *talkServiceProcessorRegisterE2EEGroupKey) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceRegisterE2EEGroupKeyArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("registerE2EEGroupKey", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TalkServiceRegisterE2EEGroupKeyResult{}
var retval *E2EEGroupSharedKey
  var err2 error
  if retval, err2 = p.handler.RegisterE2EEGroupKey(ctx, args.KeyVersion, args.ChatMid, args.Members, args.KeyIds, args.EncryptedSharedKeys); err2 != nil {
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing registerE2EEGroupKey: " + err2.Error())
    oprot.WriteMessageBegin("registerE2EEGroupKey", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("registerE2EEGroupKey", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorGenerateUserTicket struct {
  handler TalkService
}

func (p *talkServiceProcessorGenerateUserTicket) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceGenerateUserTicketArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("generateUserTicket", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TalkServiceGenerateUserTicketResult{}
var retval *Ticket
  var err2 error
  if retval, err2 = p.handler.GenerateUserTicket(ctx, args.ExpirationTime, args.MaxUseCount); err2 != nil {
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing generateUserTicket: " + err2.Error())
    oprot.WriteMessageBegin("generateUserTicket", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("generateUserTicket", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorRegisterE2EEPublicKey struct {
  handler TalkService
}

func (p *talkServiceProcessorRegisterE2EEPublicKey) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceRegisterE2EEPublicKeyArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("registerE2EEPublicKey", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TalkServiceRegisterE2EEPublicKeyResult{}
var retval *E2EEPublicKey
  var err2 error
  if retval, err2 = p.handler.RegisterE2EEPublicKey(ctx, args.ReqSeq, args.PublicKey); err2 != nil {
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing registerE2EEPublicKey: " + err2.Error())
    oprot.WriteMessageBegin("registerE2EEPublicKey", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("registerE2EEPublicKey", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorGetE2EEPublicKey struct {
  handler TalkService
}

func (p *talkServiceProcessorGetE2EEPublicKey) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceGetE2EEPublicKeyArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getE2EEPublicKey", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TalkServiceGetE2EEPublicKeyResult{}
var retval *E2EEPublicKey
  var err2 error
  if retval, err2 = p.handler.GetE2EEPublicKey(ctx, args.Mid, args.KeyVersion, args.KeyId); err2 != nil {
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getE2EEPublicKey: " + err2.Error())
    oprot.WriteMessageBegin("getE2EEPublicKey", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getE2EEPublicKey", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorGetRSAKeyInfo struct {
  handler TalkService
}

func (p *talkServiceProcessorGetRSAKeyInfo) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceGetRSAKeyInfoArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getRSAKeyInfo", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TalkServiceGetRSAKeyInfoResult{}
var retval *RSAKey
  var err2 error
  if retval, err2 = p.handler.GetRSAKeyInfo(ctx, args.Provider); err2 != nil {
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getRSAKeyInfo: " + err2.Error())
    oprot.WriteMessageBegin("getRSAKeyInfo", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getRSAKeyInfo", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorRegisterWithSnsId struct {
  handler TalkService
}

func (p *talkServiceProcessorRegisterWithSnsId) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceRegisterWithSnsIdArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("registerWithSnsId", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TalkServiceRegisterWithSnsIdResult{}
var retval *RegisterWithSnsIdResult_
  var err2 error
  if retval, err2 = p.handler.RegisterWithSnsId(ctx, args.SnsIdType, args.SnsAccessToken, args.Region, args.UdidHash, args.DeviceInfo, args.Mid, args.MigrationPincodeSessionId); err2 != nil {
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing registerWithSnsId: " + err2.Error())
    oprot.WriteMessageBegin("registerWithSnsId", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("registerWithSnsId", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorFindSnsIdUserStatus struct {
  handler TalkService
}

func (p *talkServiceProcessorFindSnsIdUserStatus) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceFindSnsIdUserStatusArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("findSnsIdUserStatus", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TalkServiceFindSnsIdUserStatusResult{}
var retval *SnsIdUserStatus
  var err2 error
  if retval, err2 = p.handler.FindSnsIdUserStatus(ctx, args.SnsIdType, args.SnsAccessToken, args.UdidHash, args.MigrationPincodeSessionId, args.OldUdidHash); err2 != nil {
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing findSnsIdUserStatus: " + err2.Error())
    oprot.WriteMessageBegin("findSnsIdUserStatus", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("findSnsIdUserStatus", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorGetContactRegistration struct {
  handler TalkService
}

func (p *talkServiceProcessorGetContactRegistration) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceGetContactRegistrationArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getContactRegistration", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TalkServiceGetContactRegistrationResult{}
var retval *ContactRegistration
  var err2 error
  if retval, err2 = p.handler.GetContactRegistration(ctx, args.ID, args.Type); err2 != nil {
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getContactRegistration: " + err2.Error())
    oprot.WriteMessageBegin("getContactRegistration", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getContactRegistration", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorVerifyPhoneNumber struct {
  handler TalkService
}

func (p *talkServiceProcessorVerifyPhoneNumber) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceVerifyPhoneNumberArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("verifyPhoneNumber", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TalkServiceVerifyPhoneNumberResult{}
var retval *PhoneVerificationResult_
  var err2 error
  if retval, err2 = p.handler.VerifyPhoneNumber(ctx, args.SessionId, args.PinCode, args.UdidHash, args.MigrationPincodeSessionId, args.OldUdidHash); err2 != nil {
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing verifyPhoneNumber: " + err2.Error())
    oprot.WriteMessageBegin("verifyPhoneNumber", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("verifyPhoneNumber", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorAcquireEncryptedAccessToken struct {
  handler TalkService
}

func (p *talkServiceProcessorAcquireEncryptedAccessToken) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceAcquireEncryptedAccessTokenArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("acquireEncryptedAccessToken", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TalkServiceAcquireEncryptedAccessTokenResult{}
var retval string
  var err2 error
  if retval, err2 = p.handler.AcquireEncryptedAccessToken(ctx, args.FeatureType); err2 != nil {
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing acquireEncryptedAccessToken: " + err2.Error())
    oprot.WriteMessageBegin("acquireEncryptedAccessToken", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("acquireEncryptedAccessToken", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorRegisterWithSnsIdAndIdentityCredential struct {
  handler TalkService
}

func (p *talkServiceProcessorRegisterWithSnsIdAndIdentityCredential) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceRegisterWithSnsIdAndIdentityCredentialArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("registerWithSnsIdAndIdentityCredential", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TalkServiceRegisterWithSnsIdAndIdentityCredentialResult{}
var retval string
  var err2 error
  if retval, err2 = p.handler.RegisterWithSnsIdAndIdentityCredential(ctx, args.SnsIdType, args.SnsAccessToken, args.IdentityCredential, args.Region, args.UdidHash, args.DeviceInfo, args.MigrationPincodeSessionId); err2 != nil {
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing registerWithSnsIdAndIdentityCredential: " + err2.Error())
    oprot.WriteMessageBegin("registerWithSnsIdAndIdentityCredential", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("registerWithSnsIdAndIdentityCredential", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorGetShakeEventV1 struct {
  handler TalkService
}

func (p *talkServiceProcessorGetShakeEventV1) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceGetShakeEventV1Args{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getShakeEventV1", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TalkServiceGetShakeEventV1Result{}
var retval string
  var err2 error
  if retval, err2 = p.handler.GetShakeEventV1(ctx, args.Location); err2 != nil {
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getShakeEventV1: " + err2.Error())
    oprot.WriteMessageBegin("getShakeEventV1", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("getShakeEventV1", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorRegisterDeviceWithIdentityCredential struct {
  handler TalkService
}

func (p *talkServiceProcessorRegisterDeviceWithIdentityCredential) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceRegisterDeviceWithIdentityCredentialArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("registerDeviceWithIdentityCredential", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TalkServiceRegisterDeviceWithIdentityCredentialResult{}
var retval string
  var err2 error
  if retval, err2 = p.handler.RegisterDeviceWithIdentityCredential(ctx, args.SessionId, args.Identifier, args.Verifier, args.Provider, args.MigrationPincodeSessionId); err2 != nil {
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing registerDeviceWithIdentityCredential: " + err2.Error())
    oprot.WriteMessageBegin("registerDeviceWithIdentityCredential", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("registerDeviceWithIdentityCredential", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorUpdateAndGetNearby struct {
  handler TalkService
}

func (p *talkServiceProcessorUpdateAndGetNearby) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceUpdateAndGetNearbyArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("updateAndGetNearby", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TalkServiceUpdateAndGetNearbyResult{}
var retval []*NearbyEntry
  var err2 error
  if retval, err2 = p.handler.UpdateAndGetNearby(ctx, args.Latitude, args.Longitude, args.Accuracy, args.NetworkStatus, args.AltitudeMeters, args.VelocityMetersPerSecond, args.BearingDegrees); err2 != nil {
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateAndGetNearby: " + err2.Error())
    oprot.WriteMessageBegin("updateAndGetNearby", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("updateAndGetNearby", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorFetchOperations struct {
  handler TalkService
}

func (p *talkServiceProcessorFetchOperations) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceFetchOperationsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("fetchOperations", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TalkServiceFetchOperationsResult{}
var retval []*Operation
  var err2 error
  if retval, err2 = p.handler.FetchOperations(ctx, args.LocalRev, args.Count); err2 != nil {
  switch v := err2.(type) {
    case *ShouldSyncException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing fetchOperations: " + err2.Error())
    oprot.WriteMessageBegin("fetchOperations", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("fetchOperations", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorFetchOps struct {
  handler TalkService
}

func (p *talkServiceProcessorFetchOps) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceFetchOpsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("fetchOps", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TalkServiceFetchOpsResult{}
var retval []*Operation
  var err2 error
  if retval, err2 = p.handler.FetchOps(ctx, args.LocalRev, args.Count, args.GlobalRev, args.IndividualRev); err2 != nil {
  switch v := err2.(type) {
    case *ShouldSyncException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing fetchOps: " + err2.Error())
    oprot.WriteMessageBegin("fetchOps", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("fetchOps", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorUnsendMessage struct {
  handler TalkService
}

func (p *talkServiceProcessorUnsendMessage) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceUnsendMessageArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("unsendMessage", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TalkServiceUnsendMessageResult{}
  var err2 error
  if err2 = p.handler.UnsendMessage(ctx, args.Seq, args.MessageId); err2 != nil {
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing unsendMessage: " + err2.Error())
    oprot.WriteMessageBegin("unsendMessage", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("unsendMessage", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorBlockRecommendation struct {
  handler TalkService
}

func (p *talkServiceProcessorBlockRecommendation) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceBlockRecommendationArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("blockRecommendation", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TalkServiceBlockRecommendationResult{}
  var err2 error
  if err2 = p.handler.BlockRecommendation(ctx, args.ReqSeq, args.ID); err2 != nil {
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing blockRecommendation: " + err2.Error())
    oprot.WriteMessageBegin("blockRecommendation", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("blockRecommendation", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorFindAndAddContactsByMid struct {
  handler TalkService
}

func (p *talkServiceProcessorFindAndAddContactsByMid) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceFindAndAddContactsByMidArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("findAndAddContactsByMid", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TalkServiceFindAndAddContactsByMidResult{}
var retval map[string]*Contact
  var err2 error
  if retval, err2 = p.handler.FindAndAddContactsByMid(ctx, args.ReqSeq, args.Mid, args.Type, args.Reference); err2 != nil {
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing findAndAddContactsByMid: " + err2.Error())
    oprot.WriteMessageBegin("findAndAddContactsByMid", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("findAndAddContactsByMid", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorRequestResendMessage struct {
  handler TalkService
}

func (p *talkServiceProcessorRequestResendMessage) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceRequestResendMessageArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("requestResendMessage", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TalkServiceRequestResendMessageResult{}
  var err2 error
  if err2 = p.handler.RequestResendMessage(ctx, args.ReqSeq, args.SenderMid, args.MessageId); err2 != nil {
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing requestResendMessage: " + err2.Error())
    oprot.WriteMessageBegin("requestResendMessage", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("requestResendMessage", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorSendChatRemoved struct {
  handler TalkService
}

func (p *talkServiceProcessorSendChatRemoved) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceSendChatRemovedArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("sendChatRemoved", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TalkServiceSendChatRemovedResult{}
  var err2 error
  if err2 = p.handler.SendChatRemoved(ctx, args.Seq, args.ChatMid, args.LastMessageId, args.SessionId); err2 != nil {
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing sendChatRemoved: " + err2.Error())
    oprot.WriteMessageBegin("sendChatRemoved", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("sendChatRemoved", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorRespondResendMessage struct {
  handler TalkService
}

func (p *talkServiceProcessorRespondResendMessage) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceRespondResendMessageArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("respondResendMessage", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TalkServiceRespondResendMessageResult{}
  var err2 error
  if err2 = p.handler.RespondResendMessage(ctx, args.ReqSeq, args.ReceiverMid, args.OriginalMessageId, args.ResendMessage, args.ErrorCode); err2 != nil {
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing respondResendMessage: " + err2.Error())
    oprot.WriteMessageBegin("respondResendMessage", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("respondResendMessage", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorInviteIntoRoom struct {
  handler TalkService
}

func (p *talkServiceProcessorInviteIntoRoom) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceInviteIntoRoomArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("inviteIntoRoom", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TalkServiceInviteIntoRoomResult{}
  var err2 error
  if err2 = p.handler.InviteIntoRoom(ctx, args.ReqSeq, args.RoomId, args.ContactIds); err2 != nil {
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing inviteIntoRoom: " + err2.Error())
    oprot.WriteMessageBegin("inviteIntoRoom", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("inviteIntoRoom", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorRespondE2EEKeyExchange struct {
  handler TalkService
}

func (p *talkServiceProcessorRespondE2EEKeyExchange) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceRespondE2EEKeyExchangeArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("respondE2EEKeyExchange", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TalkServiceRespondE2EEKeyExchangeResult{}
  var err2 error
  if err2 = p.handler.RespondE2EEKeyExchange(ctx, args.ReqSeq, args.EncryptedKeyChain, args.HashKeyChain); err2 != nil {
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing respondE2EEKeyExchange: " + err2.Error())
    oprot.WriteMessageBegin("respondE2EEKeyExchange", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("respondE2EEKeyExchange", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorSyncContacts struct {
  handler TalkService
}

func (p *talkServiceProcessorSyncContacts) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceSyncContactsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("syncContacts", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TalkServiceSyncContactsResult{}
var retval map[string]*ContactRegistration
  var err2 error
  if retval, err2 = p.handler.SyncContacts(ctx, args.ReqSeq, args.LocalContacts); err2 != nil {
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing syncContacts: " + err2.Error())
    oprot.WriteMessageBegin("syncContacts", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("syncContacts", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorFindAndAddContactsByPhone struct {
  handler TalkService
}

func (p *talkServiceProcessorFindAndAddContactsByPhone) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceFindAndAddContactsByPhoneArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("findAndAddContactsByPhone", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TalkServiceFindAndAddContactsByPhoneResult{}
var retval map[string]*Contact
  var err2 error
  if retval, err2 = p.handler.FindAndAddContactsByPhone(ctx, args.ReqSeq, args.Phones, args.Reference); err2 != nil {
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing findAndAddContactsByPhone: " + err2.Error())
    oprot.WriteMessageBegin("findAndAddContactsByPhone", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("findAndAddContactsByPhone", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorNotifySleep struct {
  handler TalkService
}

func (p *talkServiceProcessorNotifySleep) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceNotifySleepArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("notifySleep", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TalkServiceNotifySleepResult{}
  var err2 error
  if err2 = p.handler.NotifySleep(ctx, args.LastRev, args.Badge); err2 != nil {
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing notifySleep: " + err2.Error())
    oprot.WriteMessageBegin("notifySleep", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("notifySleep", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorReportProfile struct {
  handler TalkService
}

func (p *talkServiceProcessorReportProfile) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceReportProfileArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("reportProfile", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TalkServiceReportProfileResult{}
  var err2 error
  if err2 = p.handler.ReportProfile(ctx, args.SyncOpRevision, args.Profile); err2 != nil {
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing reportProfile: " + err2.Error())
    oprot.WriteMessageBegin("reportProfile", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("reportProfile", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorNotifyUpdated struct {
  handler TalkService
}

func (p *talkServiceProcessorNotifyUpdated) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceNotifyUpdatedArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("notifyUpdated", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TalkServiceNotifyUpdatedResult{}
  var err2 error
  if err2 = p.handler.NotifyUpdated(ctx, args.LastRev, args.DeviceInfo, args.UdidHash, args.OldUdidHash); err2 != nil {
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing notifyUpdated: " + err2.Error())
    oprot.WriteMessageBegin("notifyUpdated", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("notifyUpdated", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorReportSettings struct {
  handler TalkService
}

func (p *talkServiceProcessorReportSettings) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceReportSettingsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("reportSettings", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TalkServiceReportSettingsResult{}
  var err2 error
  if err2 = p.handler.ReportSettings(ctx, args.SyncOpRevision, args.Settings); err2 != nil {
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing reportSettings: " + err2.Error())
    oprot.WriteMessageBegin("reportSettings", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("reportSettings", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorGetBlockedContactIds struct {
  handler TalkService
}

func (p *talkServiceProcessorGetBlockedContactIds) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceGetBlockedContactIdsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getBlockedContactIds", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TalkServiceGetBlockedContactIdsResult{}
var retval []string
  var err2 error
  if retval, err2 = p.handler.GetBlockedContactIds(ctx, args.SyncReason); err2 != nil {
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getBlockedContactIds: " + err2.Error())
    oprot.WriteMessageBegin("getBlockedContactIds", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getBlockedContactIds", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorOpenProximityMatch struct {
  handler TalkService
}

func (p *talkServiceProcessorOpenProximityMatch) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceOpenProximityMatchArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("openProximityMatch", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TalkServiceOpenProximityMatchResult{}
var retval string
  var err2 error
  if retval, err2 = p.handler.OpenProximityMatch(ctx, args.Location, args.NetworkStatus); err2 != nil {
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing openProximityMatch: " + err2.Error())
    oprot.WriteMessageBegin("openProximityMatch", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("openProximityMatch", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorRemoveFriendRequest struct {
  handler TalkService
}

func (p *talkServiceProcessorRemoveFriendRequest) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceRemoveFriendRequestArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("removeFriendRequest", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TalkServiceRemoveFriendRequestResult{}
  var err2 error
  if err2 = p.handler.RemoveFriendRequest(ctx, args.Direction, args.MidOrEMid); err2 != nil {
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing removeFriendRequest: " + err2.Error())
    oprot.WriteMessageBegin("removeFriendRequest", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("removeFriendRequest", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorUpdateNotificationToken struct {
  handler TalkService
}

func (p *talkServiceProcessorUpdateNotificationToken) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceUpdateNotificationTokenArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("updateNotificationToken", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TalkServiceUpdateNotificationTokenResult{}
  var err2 error
  if err2 = p.handler.UpdateNotificationToken(ctx, args.Token, args.Type); err2 != nil {
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateNotificationToken: " + err2.Error())
    oprot.WriteMessageBegin("updateNotificationToken", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("updateNotificationToken", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorUpdateExtendedProfileAttribute struct {
  handler TalkService
}

func (p *talkServiceProcessorUpdateExtendedProfileAttribute) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceUpdateExtendedProfileAttributeArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("updateExtendedProfileAttribute", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TalkServiceUpdateExtendedProfileAttributeResult{}
  var err2 error
  if err2 = p.handler.UpdateExtendedProfileAttribute(ctx, args.ReqSeq, args.Attr, args.ExtendedProfile); err2 != nil {
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateExtendedProfileAttribute: " + err2.Error())
    oprot.WriteMessageBegin("updateExtendedProfileAttribute", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("updateExtendedProfileAttribute", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorVerifyIdentityCredentialWithResult_ struct {
  handler TalkService
}

func (p *talkServiceProcessorVerifyIdentityCredentialWithResult_) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceVerifyIdentityCredentialWithResultArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("verifyIdentityCredentialWithResult", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TalkServiceVerifyIdentityCredentialWithResultResult{}
var retval *UserAuthStatus
  var err2 error
  if retval, err2 = p.handler.VerifyIdentityCredentialWithResult_(ctx, args.IdentityCredential, args.MigrationPincodeSessionId); err2 != nil {
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing verifyIdentityCredentialWithResult: " + err2.Error())
    oprot.WriteMessageBegin("verifyIdentityCredentialWithResult", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("verifyIdentityCredentialWithResult", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorRequestAccountPasswordReset struct {
  handler TalkService
}

func (p *talkServiceProcessorRequestAccountPasswordReset) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceRequestAccountPasswordResetArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("requestAccountPasswordReset", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TalkServiceRequestAccountPasswordResetResult{}
  var err2 error
  if err2 = p.handler.RequestAccountPasswordReset(ctx, args.Identifier, args.Provider, args.Locale); err2 != nil {
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing requestAccountPasswordReset: " + err2.Error())
    oprot.WriteMessageBegin("requestAccountPasswordReset", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("requestAccountPasswordReset", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorSendPostback struct {
  handler TalkService
}

func (p *talkServiceProcessorSendPostback) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceSendPostbackArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("sendPostback", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TalkServiceSendPostbackResult{}
  var err2 error
  if err2 = p.handler.SendPostback(ctx, args.Request); err2 != nil {
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing sendPostback: " + err2.Error())
    oprot.WriteMessageBegin("sendPostback", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("sendPostback", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorTryFriendRequest struct {
  handler TalkService
}

func (p *talkServiceProcessorTryFriendRequest) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceTryFriendRequestArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("tryFriendRequest", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TalkServiceTryFriendRequestResult{}
  var err2 error
  if err2 = p.handler.TryFriendRequest(ctx, args.MidOrEMid, args.Method, args.FriendRequestParams); err2 != nil {
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing tryFriendRequest: " + err2.Error())
    oprot.WriteMessageBegin("tryFriendRequest", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("tryFriendRequest", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorAcceptProximityMatches struct {
  handler TalkService
}

func (p *talkServiceProcessorAcceptProximityMatches) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceAcceptProximityMatchesArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("acceptProximityMatches", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TalkServiceAcceptProximityMatchesResult{}
  var err2 error
  if err2 = p.handler.AcceptProximityMatches(ctx, args.SessionId, args.Ids); err2 != nil {
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing acceptProximityMatches: " + err2.Error())
    oprot.WriteMessageBegin("acceptProximityMatches", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("acceptProximityMatches", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorGetContacts struct {
  handler TalkService
}

func (p *talkServiceProcessorGetContacts) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceGetContactsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getContacts", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TalkServiceGetContactsResult{}
var retval []*Contact
  var err2 error
  if retval, err2 = p.handler.GetContacts(ctx, args.Ids); err2 != nil {
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getContacts: " + err2.Error())
    oprot.WriteMessageBegin("getContacts", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getContacts", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorReportDeviceState struct {
  handler TalkService
}

func (p *talkServiceProcessorReportDeviceState) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceReportDeviceStateArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("reportDeviceState", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TalkServiceReportDeviceStateResult{}
  var err2 error
  if err2 = p.handler.ReportDeviceState(ctx, args.BooleanState, args.StringState); err2 != nil {
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing reportDeviceState: " + err2.Error())
    oprot.WriteMessageBegin("reportDeviceState", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("reportDeviceState", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorBlockContact struct {
  handler TalkService
}

func (p *talkServiceProcessorBlockContact) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceBlockContactArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("blockContact", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TalkServiceBlockContactResult{}
  var err2 error
  if err2 = p.handler.BlockContact(ctx, args.ReqSeq, args.ID); err2 != nil {
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing blockContact: " + err2.Error())
    oprot.WriteMessageBegin("blockContact", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("blockContact", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorGetExtendedProfile struct {
  handler TalkService
}

func (p *talkServiceProcessorGetExtendedProfile) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceGetExtendedProfileArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getExtendedProfile", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TalkServiceGetExtendedProfileResult{}
var retval *ExtendedProfile
  var err2 error
  if retval, err2 = p.handler.GetExtendedProfile(ctx, args.SyncReason); err2 != nil {
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getExtendedProfile: " + err2.Error())
    oprot.WriteMessageBegin("getExtendedProfile", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getExtendedProfile", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorGetSettingsAttributes2 struct {
  handler TalkService
}

func (p *talkServiceProcessorGetSettingsAttributes2) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceGetSettingsAttributes2Args{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getSettingsAttributes2", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TalkServiceGetSettingsAttributes2Result{}
var retval *Settings
  var err2 error
  if retval, err2 = p.handler.GetSettingsAttributes2(ctx, args.AttributesToRetrieve); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getSettingsAttributes2: " + err2.Error())
    oprot.WriteMessageBegin("getSettingsAttributes2", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getSettingsAttributes2", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorGetProfile struct {
  handler TalkService
}

func (p *talkServiceProcessorGetProfile) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceGetProfileArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getProfile", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TalkServiceGetProfileResult{}
var retval *Profile
  var err2 error
  if retval, err2 = p.handler.GetProfile(ctx, args.SyncReason); err2 != nil {
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getProfile: " + err2.Error())
    oprot.WriteMessageBegin("getProfile", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getProfile", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorGetProximityMatchCandidateList struct {
  handler TalkService
}

func (p *talkServiceProcessorGetProximityMatchCandidateList) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceGetProximityMatchCandidateListArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getProximityMatchCandidateList", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TalkServiceGetProximityMatchCandidateListResult{}
var retval *ProximityMatchCandidateResult_
  var err2 error
  if retval, err2 = p.handler.GetProximityMatchCandidateList(ctx, args.SessionId); err2 != nil {
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getProximityMatchCandidateList: " + err2.Error())
    oprot.WriteMessageBegin("getProximityMatchCandidateList", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getProximityMatchCandidateList", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorFindAndAddContactByMetaTag struct {
  handler TalkService
}

func (p *talkServiceProcessorFindAndAddContactByMetaTag) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceFindAndAddContactByMetaTagArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("findAndAddContactByMetaTag", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TalkServiceFindAndAddContactByMetaTagResult{}
var retval *PendingAgreementsResponse
  var err2 error
  if retval, err2 = p.handler.FindAndAddContactByMetaTag(ctx, args.ReqSeq, args.SearchId, args.Reference); err2 != nil {
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing findAndAddContactByMetaTag: " + err2.Error())
    oprot.WriteMessageBegin("findAndAddContactByMetaTag", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("findAndAddContactByMetaTag", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorGetMessageReadRange struct {
  handler TalkService
}

func (p *talkServiceProcessorGetMessageReadRange) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceGetMessageReadRangeArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getMessageReadRange", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TalkServiceGetMessageReadRangeResult{}
var retval []*TMessageReadRange
  var err2 error
  if retval, err2 = p.handler.GetMessageReadRange(ctx, args.ChatIds, args.SyncReason); err2 != nil {
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getMessageReadRange: " + err2.Error())
    oprot.WriteMessageBegin("getMessageReadRange", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getMessageReadRange", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorRegisterUserid struct {
  handler TalkService
}

func (p *talkServiceProcessorRegisterUserid) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceRegisterUseridArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("registerUserid", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TalkServiceRegisterUseridResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.RegisterUserid(ctx, args.ReqSeq, args.SearchId); err2 != nil {
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing registerUserid: " + err2.Error())
    oprot.WriteMessageBegin("registerUserid", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("registerUserid", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorReportPushRecvReports struct {
  handler TalkService
}

func (p *talkServiceProcessorReportPushRecvReports) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceReportPushRecvReportsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("reportPushRecvReports", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TalkServiceReportPushRecvReportsResult{}
  var err2 error
  if err2 = p.handler.ReportPushRecvReports(ctx, args.ReqSeq, args.PushRecvReports); err2 != nil {
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing reportPushRecvReports: " + err2.Error())
    oprot.WriteMessageBegin("reportPushRecvReports", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("reportPushRecvReports", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorNoop struct {
  handler TalkService
}

func (p *talkServiceProcessorNoop) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceNoopArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("noop", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TalkServiceNoopResult{}
  var err2 error
  if err2 = p.handler.Noop(ctx); err2 != nil {
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing noop: " + err2.Error())
    oprot.WriteMessageBegin("noop", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("noop", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorGetBlockedRecommendationIds struct {
  handler TalkService
}

func (p *talkServiceProcessorGetBlockedRecommendationIds) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceGetBlockedRecommendationIdsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getBlockedRecommendationIds", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TalkServiceGetBlockedRecommendationIdsResult{}
var retval []string
  var err2 error
  if retval, err2 = p.handler.GetBlockedRecommendationIds(ctx, args.SyncReason); err2 != nil {
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getBlockedRecommendationIds: " + err2.Error())
    oprot.WriteMessageBegin("getBlockedRecommendationIds", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getBlockedRecommendationIds", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorRemoveFollower struct {
  handler TalkService
}

func (p *talkServiceProcessorRemoveFollower) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceRemoveFollowerArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("removeFollower", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TalkServiceRemoveFollowerResult{}
  var err2 error
  if err2 = p.handler.RemoveFollower(ctx, args.RemoveFollowerRequest); err2 != nil {
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing removeFollower: " + err2.Error())
    oprot.WriteMessageBegin("removeFollower", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("removeFollower", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorVerifyAccountMigration struct {
  handler TalkService
}

func (p *talkServiceProcessorVerifyAccountMigration) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceVerifyAccountMigrationArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("verifyAccountMigration", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TalkServiceVerifyAccountMigrationResult{}
  var err2 error
  if err2 = p.handler.VerifyAccountMigration(ctx, args.MigrationSessionId); err2 != nil {
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing verifyAccountMigration: " + err2.Error())
    oprot.WriteMessageBegin("verifyAccountMigration", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("verifyAccountMigration", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorGetSettings struct {
  handler TalkService
}

func (p *talkServiceProcessorGetSettings) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceGetSettingsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getSettings", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TalkServiceGetSettingsResult{}
var retval *Settings
  var err2 error
  if retval, err2 = p.handler.GetSettings(ctx, args.SyncReason); err2 != nil {
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getSettings: " + err2.Error())
    oprot.WriteMessageBegin("getSettings", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getSettings", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorGetLastE2EEGroupSharedKey struct {
  handler TalkService
}

func (p *talkServiceProcessorGetLastE2EEGroupSharedKey) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceGetLastE2EEGroupSharedKeyArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getLastE2EEGroupSharedKey", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TalkServiceGetLastE2EEGroupSharedKeyResult{}
var retval *E2EEGroupSharedKey
  var err2 error
  if retval, err2 = p.handler.GetLastE2EEGroupSharedKey(ctx, args.KeyVersion, args.ChatMid); err2 != nil {
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getLastE2EEGroupSharedKey: " + err2.Error())
    oprot.WriteMessageBegin("getLastE2EEGroupSharedKey", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getLastE2EEGroupSharedKey", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorGetRingbackTone struct {
  handler TalkService
}

func (p *talkServiceProcessorGetRingbackTone) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceGetRingbackToneArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getRingbackTone", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TalkServiceGetRingbackToneResult{}
var retval *RingbackTone
  var err2 error
  if retval, err2 = p.handler.GetRingbackTone(ctx); err2 != nil {
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getRingbackTone: " + err2.Error())
    oprot.WriteMessageBegin("getRingbackTone", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getRingbackTone", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorLeaveRoom struct {
  handler TalkService
}

func (p *talkServiceProcessorLeaveRoom) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceLeaveRoomArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("leaveRoom", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TalkServiceLeaveRoomResult{}
  var err2 error
  if err2 = p.handler.LeaveRoom(ctx, args.ReqSeq, args.RoomId); err2 != nil {
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing leaveRoom: " + err2.Error())
    oprot.WriteMessageBegin("leaveRoom", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("leaveRoom", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorSendChatChecked struct {
  handler TalkService
}

func (p *talkServiceProcessorSendChatChecked) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceSendChatCheckedArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("sendChatChecked", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TalkServiceSendChatCheckedResult{}
  var err2 error
  if err2 = p.handler.SendChatChecked(ctx, args.Seq, args.ChatMid, args.LastMessageId, args.SessionId); err2 != nil {
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing sendChatChecked: " + err2.Error())
    oprot.WriteMessageBegin("sendChatChecked", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("sendChatChecked", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorFindAndAddContactsByUserid struct {
  handler TalkService
}

func (p *talkServiceProcessorFindAndAddContactsByUserid) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceFindAndAddContactsByUseridArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("findAndAddContactsByUserid", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TalkServiceFindAndAddContactsByUseridResult{}
var retval map[string]*Contact
  var err2 error
  if retval, err2 = p.handler.FindAndAddContactsByUserid(ctx, args.ReqSeq, args.SearchId, args.Reference); err2 != nil {
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing findAndAddContactsByUserid: " + err2.Error())
    oprot.WriteMessageBegin("findAndAddContactsByUserid", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("findAndAddContactsByUserid", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorGetAllContactIds struct {
  handler TalkService
}

func (p *talkServiceProcessorGetAllContactIds) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceGetAllContactIdsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getAllContactIds", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TalkServiceGetAllContactIdsResult{}
var retval []string
  var err2 error
  if retval, err2 = p.handler.GetAllContactIds(ctx, args.SyncReason); err2 != nil {
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getAllContactIds: " + err2.Error())
    oprot.WriteMessageBegin("getAllContactIds", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getAllContactIds", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorUnfollow struct {
  handler TalkService
}

func (p *talkServiceProcessorUnfollow) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceUnfollowArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("unfollow", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TalkServiceUnfollowResult{}
  var err2 error
  if err2 = p.handler.Unfollow(ctx, args.UnfollowRequest); err2 != nil {
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing unfollow: " + err2.Error())
    oprot.WriteMessageBegin("unfollow", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("unfollow", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorCloseProximityMatch struct {
  handler TalkService
}

func (p *talkServiceProcessorCloseProximityMatch) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceCloseProximityMatchArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("closeProximityMatch", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TalkServiceCloseProximityMatchResult{}
  var err2 error
  if err2 = p.handler.CloseProximityMatch(ctx, args.SessionId); err2 != nil {
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing closeProximityMatch: " + err2.Error())
    oprot.WriteMessageBegin("closeProximityMatch", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("closeProximityMatch", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorInviteFriendsBySms struct {
  handler TalkService
}

func (p *talkServiceProcessorInviteFriendsBySms) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceInviteFriendsBySmsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("inviteFriendsBySms", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TalkServiceInviteFriendsBySmsResult{}
  var err2 error
  if err2 = p.handler.InviteFriendsBySms(ctx, args.PhoneNumberList); err2 != nil {
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing inviteFriendsBySms: " + err2.Error())
    oprot.WriteMessageBegin("inviteFriendsBySms", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("inviteFriendsBySms", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorGetChatEffectMetaList struct {
  handler TalkService
}

func (p *talkServiceProcessorGetChatEffectMetaList) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceGetChatEffectMetaListArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getChatEffectMetaList", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TalkServiceGetChatEffectMetaListResult{}
var retval []*ChatEffectMeta
  var err2 error
  if retval, err2 = p.handler.GetChatEffectMetaList(ctx, args.Categories); err2 != nil {
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getChatEffectMetaList: " + err2.Error())
    oprot.WriteMessageBegin("getChatEffectMetaList", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getChatEffectMetaList", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorRemoveAllMessages struct {
  handler TalkService
}

func (p *talkServiceProcessorRemoveAllMessages) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceRemoveAllMessagesArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("removeAllMessages", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TalkServiceRemoveAllMessagesResult{}
  var err2 error
  if err2 = p.handler.RemoveAllMessages(ctx, args.Seq, args.LastMessageId); err2 != nil {
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing removeAllMessages: " + err2.Error())
    oprot.WriteMessageBegin("removeAllMessages", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("removeAllMessages", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorUnblockContact struct {
  handler TalkService
}

func (p *talkServiceProcessorUnblockContact) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceUnblockContactArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("unblockContact", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TalkServiceUnblockContactResult{}
  var err2 error
  if err2 = p.handler.UnblockContact(ctx, args.ReqSeq, args.ID, args.Reference); err2 != nil {
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing unblockContact: " + err2.Error())
    oprot.WriteMessageBegin("unblockContact", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("unblockContact", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorGetAnalyticsInfo struct {
  handler TalkService
}

func (p *talkServiceProcessorGetAnalyticsInfo) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceGetAnalyticsInfoArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getAnalyticsInfo", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TalkServiceGetAnalyticsInfoResult{}
var retval *AnalyticsInfo
  var err2 error
  if retval, err2 = p.handler.GetAnalyticsInfo(ctx); err2 != nil {
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getAnalyticsInfo: " + err2.Error())
    oprot.WriteMessageBegin("getAnalyticsInfo", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getAnalyticsInfo", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorGetRecommendationIds struct {
  handler TalkService
}

func (p *talkServiceProcessorGetRecommendationIds) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceGetRecommendationIdsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getRecommendationIds", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TalkServiceGetRecommendationIdsResult{}
var retval []string
  var err2 error
  if retval, err2 = p.handler.GetRecommendationIds(ctx, args.SyncReason); err2 != nil {
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getRecommendationIds: " + err2.Error())
    oprot.WriteMessageBegin("getRecommendationIds", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getRecommendationIds", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorNotifyRegistrationComplete struct {
  handler TalkService
}

func (p *talkServiceProcessorNotifyRegistrationComplete) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceNotifyRegistrationCompleteArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("notifyRegistrationComplete", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TalkServiceNotifyRegistrationCompleteResult{}
  var err2 error
  if err2 = p.handler.NotifyRegistrationComplete(ctx, args.UdidHash, args.ApplicationTypeWithExtensions); err2 != nil {
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing notifyRegistrationComplete: " + err2.Error())
    oprot.WriteMessageBegin("notifyRegistrationComplete", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("notifyRegistrationComplete", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorWakeUpLongPolling struct {
  handler TalkService
}

func (p *talkServiceProcessorWakeUpLongPolling) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceWakeUpLongPollingArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("wakeUpLongPolling", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TalkServiceWakeUpLongPollingResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.WakeUpLongPolling(ctx, args.ClientRevision); err2 != nil {
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing wakeUpLongPolling: " + err2.Error())
    oprot.WriteMessageBegin("wakeUpLongPolling", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("wakeUpLongPolling", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorUnblockRecommendation struct {
  handler TalkService
}

func (p *talkServiceProcessorUnblockRecommendation) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceUnblockRecommendationArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("unblockRecommendation", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TalkServiceUnblockRecommendationResult{}
  var err2 error
  if err2 = p.handler.UnblockRecommendation(ctx, args.ReqSeq, args.ID); err2 != nil {
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing unblockRecommendation: " + err2.Error())
    oprot.WriteMessageBegin("unblockRecommendation", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("unblockRecommendation", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorSendMessage struct {
  handler TalkService
}

func (p *talkServiceProcessorSendMessage) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceSendMessageArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("sendMessage", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TalkServiceSendMessageResult{}
var retval *Message
  var err2 error
  if retval, err2 = p.handler.SendMessage(ctx, args.Seq, args.Message); err2 != nil {
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing sendMessage: " + err2.Error())
    oprot.WriteMessageBegin("sendMessage", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("sendMessage", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorSendEchoPush struct {
  handler TalkService
}

func (p *talkServiceProcessorSendEchoPush) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceSendEchoPushArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("sendEchoPush", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TalkServiceSendEchoPushResult{}
  var err2 error
  if err2 = p.handler.SendEchoPush(ctx, args.Text); err2 != nil {
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing sendEchoPush: " + err2.Error())
    oprot.WriteMessageBegin("sendEchoPush", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("sendEchoPush", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorVerifyAccountMigrationPincode struct {
  handler TalkService
}

func (p *talkServiceProcessorVerifyAccountMigrationPincode) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceVerifyAccountMigrationPincodeArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("verifyAccountMigrationPincode", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TalkServiceVerifyAccountMigrationPincodeResult{}
  var err2 error
  if err2 = p.handler.VerifyAccountMigrationPincode(ctx, args.MigrationPincodeSessionId, args.AccountMigrationPincode); err2 != nil {
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing verifyAccountMigrationPincode: " + err2.Error())
    oprot.WriteMessageBegin("verifyAccountMigrationPincode", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("verifyAccountMigrationPincode", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorNotifyInstalled struct {
  handler TalkService
}

func (p *talkServiceProcessorNotifyInstalled) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceNotifyInstalledArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("notifyInstalled", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TalkServiceNotifyInstalledResult{}
  var err2 error
  if err2 = p.handler.NotifyInstalled(ctx, args.UdidHash, args.ApplicationTypeWithExtensions); err2 != nil {
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing notifyInstalled: " + err2.Error())
    oprot.WriteMessageBegin("notifyInstalled", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("notifyInstalled", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorVerifyQrcode struct {
  handler TalkService
}

func (p *talkServiceProcessorVerifyQrcode) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceVerifyQrcodeArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("verifyQrcode", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TalkServiceVerifyQrcodeResult{}
var retval string
  var err2 error
  if retval, err2 = p.handler.VerifyQrcode(ctx, args.Verifier, args.PinCode); err2 != nil {
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing verifyQrcode: " + err2.Error())
    oprot.WriteMessageBegin("verifyQrcode", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("verifyQrcode", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorFindContactByMetaTag struct {
  handler TalkService
}

func (p *talkServiceProcessorFindContactByMetaTag) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceFindContactByMetaTagArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("findContactByMetaTag", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TalkServiceFindContactByMetaTagResult{}
var retval *Contact
  var err2 error
  if retval, err2 = p.handler.FindContactByMetaTag(ctx, args.SearchId, args.Reference); err2 != nil {
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing findContactByMetaTag: " + err2.Error())
    oprot.WriteMessageBegin("findContactByMetaTag", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("findContactByMetaTag", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorFindContactsByPhone struct {
  handler TalkService
}

func (p *talkServiceProcessorFindContactsByPhone) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceFindContactsByPhoneArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("findContactsByPhone", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TalkServiceFindContactsByPhoneResult{}
var retval map[string]*Contact
  var err2 error
  if retval, err2 = p.handler.FindContactsByPhone(ctx, args.Phones); err2 != nil {
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing findContactsByPhone: " + err2.Error())
    oprot.WriteMessageBegin("findContactsByPhone", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("findContactsByPhone", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorRegisterWithPhoneNumber struct {
  handler TalkService
}

func (p *talkServiceProcessorRegisterWithPhoneNumber) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceRegisterWithPhoneNumberArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("registerWithPhoneNumber", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TalkServiceRegisterWithPhoneNumberResult{}
var retval *RegisterWithPhoneNumberResult_
  var err2 error
  if retval, err2 = p.handler.RegisterWithPhoneNumber(ctx, args.SessionId, args.MigrationPincodeSessionId); err2 != nil {
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing registerWithPhoneNumber: " + err2.Error())
    oprot.WriteMessageBegin("registerWithPhoneNumber", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("registerWithPhoneNumber", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorDecryptFollowEMid struct {
  handler TalkService
}

func (p *talkServiceProcessorDecryptFollowEMid) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceDecryptFollowEMidArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("decryptFollowEMid", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TalkServiceDecryptFollowEMidResult{}
var retval string
  var err2 error
  if retval, err2 = p.handler.DecryptFollowEMid(ctx, args.EMid); err2 != nil {
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing decryptFollowEMid: " + err2.Error())
    oprot.WriteMessageBegin("decryptFollowEMid", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("decryptFollowEMid", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorUpdateAccountMigrationPincode struct {
  handler TalkService
}

func (p *talkServiceProcessorUpdateAccountMigrationPincode) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceUpdateAccountMigrationPincodeArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("updateAccountMigrationPincode", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TalkServiceUpdateAccountMigrationPincodeResult{}
  var err2 error
  if err2 = p.handler.UpdateAccountMigrationPincode(ctx, args.AccountMigrationPincode); err2 != nil {
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateAccountMigrationPincode: " + err2.Error())
    oprot.WriteMessageBegin("updateAccountMigrationPincode", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("updateAccountMigrationPincode", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorIsUseridAvailable struct {
  handler TalkService
}

func (p *talkServiceProcessorIsUseridAvailable) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceIsUseridAvailableArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("isUseridAvailable", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TalkServiceIsUseridAvailableResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.IsUseridAvailable(ctx, args.SearchId); err2 != nil {
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing isUseridAvailable: " + err2.Error())
    oprot.WriteMessageBegin("isUseridAvailable", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("isUseridAvailable", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorGetFollowers struct {
  handler TalkService
}

func (p *talkServiceProcessorGetFollowers) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceGetFollowersArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getFollowers", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TalkServiceGetFollowersResult{}
var retval *GetFollowersResponse
  var err2 error
  if retval, err2 = p.handler.GetFollowers(ctx, args.GetFollowersRequest); err2 != nil {
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getFollowers: " + err2.Error())
    oprot.WriteMessageBegin("getFollowers", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getFollowers", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorCreateAccountMigrationPincodeSession struct {
  handler TalkService
}

func (p *talkServiceProcessorCreateAccountMigrationPincodeSession) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceCreateAccountMigrationPincodeSessionArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("createAccountMigrationPincodeSession", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TalkServiceCreateAccountMigrationPincodeSessionResult{}
var retval string
  var err2 error
  if retval, err2 = p.handler.CreateAccountMigrationPincodeSession(ctx); err2 != nil {
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing createAccountMigrationPincodeSession: " + err2.Error())
    oprot.WriteMessageBegin("createAccountMigrationPincodeSession", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("createAccountMigrationPincodeSession", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorResendPinCode struct {
  handler TalkService
}

func (p *talkServiceProcessorResendPinCode) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceResendPinCodeArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("resendPinCode", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TalkServiceResendPinCodeResult{}
  var err2 error
  if err2 = p.handler.ResendPinCode(ctx, args.SessionId); err2 != nil {
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing resendPinCode: " + err2.Error())
    oprot.WriteMessageBegin("resendPinCode", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("resendPinCode", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorGetFollowings struct {
  handler TalkService
}

func (p *talkServiceProcessorGetFollowings) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceGetFollowingsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getFollowings", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TalkServiceGetFollowingsResult{}
var retval *GetFollowingsResponse
  var err2 error
  if retval, err2 = p.handler.GetFollowings(ctx, args.GetFollowingsRequest); err2 != nil {
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getFollowings: " + err2.Error())
    oprot.WriteMessageBegin("getFollowings", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getFollowings", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorGetServerTime struct {
  handler TalkService
}

func (p *talkServiceProcessorGetServerTime) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceGetServerTimeArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getServerTime", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TalkServiceGetServerTimeResult{}
var retval int64
  var err2 error
  if retval, err2 = p.handler.GetServerTime(ctx); err2 != nil {
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getServerTime: " + err2.Error())
    oprot.WriteMessageBegin("getServerTime", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("getServerTime", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorGetLastOpRevision struct {
  handler TalkService
}

func (p *talkServiceProcessorGetLastOpRevision) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceGetLastOpRevisionArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getLastOpRevision", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TalkServiceGetLastOpRevisionResult{}
var retval int64
  var err2 error
  if retval, err2 = p.handler.GetLastOpRevision(ctx); err2 != nil {
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getLastOpRevision: " + err2.Error())
    oprot.WriteMessageBegin("getLastOpRevision", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("getLastOpRevision", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorFindContactByUserTicket struct {
  handler TalkService
}

func (p *talkServiceProcessorFindContactByUserTicket) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceFindContactByUserTicketArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("findContactByUserTicket", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TalkServiceFindContactByUserTicketResult{}
var retval *Contact
  var err2 error
  if retval, err2 = p.handler.FindContactByUserTicket(ctx, args.TicketIdWithTag); err2 != nil {
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing findContactByUserTicket: " + err2.Error())
    oprot.WriteMessageBegin("findContactByUserTicket", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("findContactByUserTicket", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorFinishUpdateVerification struct {
  handler TalkService
}

func (p *talkServiceProcessorFinishUpdateVerification) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceFinishUpdateVerificationArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("finishUpdateVerification", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TalkServiceFinishUpdateVerificationResult{}
  var err2 error
  if err2 = p.handler.FinishUpdateVerification(ctx, args.SessionId); err2 != nil {
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing finishUpdateVerification: " + err2.Error())
    oprot.WriteMessageBegin("finishUpdateVerification", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("finishUpdateVerification", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorGetAcceptedProximityMatches struct {
  handler TalkService
}

func (p *talkServiceProcessorGetAcceptedProximityMatches) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceGetAcceptedProximityMatchesArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getAcceptedProximityMatches", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TalkServiceGetAcceptedProximityMatchesResult{}
var retval []string
  var err2 error
  if retval, err2 = p.handler.GetAcceptedProximityMatches(ctx, args.SessionId); err2 != nil {
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getAcceptedProximityMatches: " + err2.Error())
    oprot.WriteMessageBegin("getAcceptedProximityMatches", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getAcceptedProximityMatches", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorClearRingbackTone struct {
  handler TalkService
}

func (p *talkServiceProcessorClearRingbackTone) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceClearRingbackToneArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("clearRingbackTone", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TalkServiceClearRingbackToneResult{}
  var err2 error
  if err2 = p.handler.ClearRingbackTone(ctx); err2 != nil {
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing clearRingbackTone: " + err2.Error())
    oprot.WriteMessageBegin("clearRingbackTone", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("clearRingbackTone", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type talkServiceProcessorUnregisterUserAndDevice struct {
  handler TalkService
}

func (p *talkServiceProcessorUnregisterUserAndDevice) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TalkServiceUnregisterUserAndDeviceArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("unregisterUserAndDevice", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TalkServiceUnregisterUserAndDeviceResult{}
var retval string
  var err2 error
  if retval, err2 = p.handler.UnregisterUserAndDevice(ctx); err2 != nil {
  switch v := err2.(type) {
    case *TalkException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing unregisterUserAndDevice: " + err2.Error())
    oprot.WriteMessageBegin("unregisterUserAndDevice", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("unregisterUserAndDevice", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - ReqSeq
//  - AttributesToUpdate
//  - Settings
type TalkServiceUpdateSettingsAttributes2Args struct {
  ReqSeq int32 `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
  // unused field # 2
  Settings *Settings `thrift:"settings,3" db:"settings" json:"settings"`
  AttributesToUpdate []SettingAttribute `thrift:"attributesToUpdate,4" db:"attributesToUpdate" json:"attributesToUpdate"`
}

func NewTalkServiceUpdateSettingsAttributes2Args() *TalkServiceUpdateSettingsAttributes2Args {
  return &TalkServiceUpdateSettingsAttributes2Args{}
}


func (p *TalkServiceUpdateSettingsAttributes2Args) GetReqSeq() int32 {
  return p.ReqSeq
}

func (p *TalkServiceUpdateSettingsAttributes2Args) GetAttributesToUpdate() []SettingAttribute {
  return p.AttributesToUpdate
}
var TalkServiceUpdateSettingsAttributes2Args_Settings_DEFAULT *Settings
func (p *TalkServiceUpdateSettingsAttributes2Args) GetSettings() *Settings {
  if !p.IsSetSettings() {
    return TalkServiceUpdateSettingsAttributes2Args_Settings_DEFAULT
  }
return p.Settings
}
func (p *TalkServiceUpdateSettingsAttributes2Args) IsSetSettings() bool {
  return p.Settings != nil
}

func (p *TalkServiceUpdateSettingsAttributes2Args) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.SET {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceUpdateSettingsAttributes2Args)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqSeq = v
}
  return nil
}

func (p *TalkServiceUpdateSettingsAttributes2Args)  ReadField4(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadSetBegin()
  if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
  }
  tSet := make([]SettingAttribute, 0, size)
  p.AttributesToUpdate =  tSet
  for i := 0; i < size; i ++ {
var _elem320 SettingAttribute
    if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := SettingAttribute(v)
    _elem320 = temp
}
    p.AttributesToUpdate = append(p.AttributesToUpdate, _elem320)
  }
  if err := iprot.ReadSetEnd(); err != nil {
    return thrift.PrependError("error reading set end: ", err)
  }
  return nil
}

func (p *TalkServiceUpdateSettingsAttributes2Args)  ReadField3(iprot thrift.TProtocol) error {
  p.Settings = &Settings{}
  if err := p.Settings.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Settings), err)
  }
  return nil
}

func (p *TalkServiceUpdateSettingsAttributes2Args) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateSettingsAttributes2_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceUpdateSettingsAttributes2Args) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("reqSeq", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err) }
  if err := oprot.WriteI32(int32(p.ReqSeq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err) }
  return err
}

func (p *TalkServiceUpdateSettingsAttributes2Args) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("settings", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:settings: ", p), err) }
  if err := p.Settings.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Settings), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:settings: ", p), err) }
  return err
}

func (p *TalkServiceUpdateSettingsAttributes2Args) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("attributesToUpdate", thrift.SET, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:attributesToUpdate: ", p), err) }
  if err := oprot.WriteSetBegin(thrift.I32, len(p.AttributesToUpdate)); err != nil {
    return thrift.PrependError("error writing set begin: ", err)
  }
  for i := 0; i<len(p.AttributesToUpdate); i++ {
    for j := i+1; j<len(p.AttributesToUpdate); j++ {
      if reflect.DeepEqual(p.AttributesToUpdate[i],p.AttributesToUpdate[j]) { 
        return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", p.AttributesToUpdate[i]))
      }
    }
  }
  for _, v := range p.AttributesToUpdate {
    if err := oprot.WriteI32(int32(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteSetEnd(); err != nil {
    return thrift.PrependError("error writing set end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:attributesToUpdate: ", p), err) }
  return err
}

func (p *TalkServiceUpdateSettingsAttributes2Args) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceUpdateSettingsAttributes2Args(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceUpdateSettingsAttributes2Result struct {
  Success []SettingAttribute `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceUpdateSettingsAttributes2Result() *TalkServiceUpdateSettingsAttributes2Result {
  return &TalkServiceUpdateSettingsAttributes2Result{}
}

var TalkServiceUpdateSettingsAttributes2Result_Success_DEFAULT []SettingAttribute

func (p *TalkServiceUpdateSettingsAttributes2Result) GetSuccess() []SettingAttribute {
  return p.Success
}
var TalkServiceUpdateSettingsAttributes2Result_E_DEFAULT *TalkException
func (p *TalkServiceUpdateSettingsAttributes2Result) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceUpdateSettingsAttributes2Result_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceUpdateSettingsAttributes2Result) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceUpdateSettingsAttributes2Result) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceUpdateSettingsAttributes2Result) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.SET {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceUpdateSettingsAttributes2Result)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadSetBegin()
  if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
  }
  tSet := make([]SettingAttribute, 0, size)
  p.Success =  tSet
  for i := 0; i < size; i ++ {
var _elem321 SettingAttribute
    if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := SettingAttribute(v)
    _elem321 = temp
}
    p.Success = append(p.Success, _elem321)
  }
  if err := iprot.ReadSetEnd(); err != nil {
    return thrift.PrependError("error reading set end: ", err)
  }
  return nil
}

func (p *TalkServiceUpdateSettingsAttributes2Result)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceUpdateSettingsAttributes2Result) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateSettingsAttributes2_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceUpdateSettingsAttributes2Result) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.SET, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteSetBegin(thrift.I32, len(p.Success)); err != nil {
      return thrift.PrependError("error writing set begin: ", err)
    }
    for i := 0; i<len(p.Success); i++ {
      for j := i+1; j<len(p.Success); j++ {
        if reflect.DeepEqual(p.Success[i],p.Success[j]) { 
          return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", p.Success[i]))
        }
      }
    }
    for _, v := range p.Success {
      if err := oprot.WriteI32(int32(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteSetEnd(); err != nil {
      return thrift.PrependError("error writing set end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceUpdateSettingsAttributes2Result) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceUpdateSettingsAttributes2Result) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceUpdateSettingsAttributes2Result(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - Request
type TalkServiceUpdateProfileAttributesArgs struct {
  ReqSeq int32 `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
  Request *UpdateProfileAttributesRequest `thrift:"request,2" db:"request" json:"request"`
}

func NewTalkServiceUpdateProfileAttributesArgs() *TalkServiceUpdateProfileAttributesArgs {
  return &TalkServiceUpdateProfileAttributesArgs{}
}


func (p *TalkServiceUpdateProfileAttributesArgs) GetReqSeq() int32 {
  return p.ReqSeq
}
var TalkServiceUpdateProfileAttributesArgs_Request_DEFAULT *UpdateProfileAttributesRequest
func (p *TalkServiceUpdateProfileAttributesArgs) GetRequest() *UpdateProfileAttributesRequest {
  if !p.IsSetRequest() {
    return TalkServiceUpdateProfileAttributesArgs_Request_DEFAULT
  }
return p.Request
}
func (p *TalkServiceUpdateProfileAttributesArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *TalkServiceUpdateProfileAttributesArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceUpdateProfileAttributesArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqSeq = v
}
  return nil
}

func (p *TalkServiceUpdateProfileAttributesArgs)  ReadField2(iprot thrift.TProtocol) error {
  p.Request = &UpdateProfileAttributesRequest{}
  if err := p.Request.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *TalkServiceUpdateProfileAttributesArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateProfileAttributes_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceUpdateProfileAttributesArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("reqSeq", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err) }
  if err := oprot.WriteI32(int32(p.ReqSeq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err) }
  return err
}

func (p *TalkServiceUpdateProfileAttributesArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:request: ", p), err) }
  if err := p.Request.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:request: ", p), err) }
  return err
}

func (p *TalkServiceUpdateProfileAttributesArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceUpdateProfileAttributesArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceUpdateProfileAttributesResult struct {
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceUpdateProfileAttributesResult() *TalkServiceUpdateProfileAttributesResult {
  return &TalkServiceUpdateProfileAttributesResult{}
}

var TalkServiceUpdateProfileAttributesResult_E_DEFAULT *TalkException
func (p *TalkServiceUpdateProfileAttributesResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceUpdateProfileAttributesResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceUpdateProfileAttributesResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceUpdateProfileAttributesResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceUpdateProfileAttributesResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceUpdateProfileAttributesResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateProfileAttributes_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceUpdateProfileAttributesResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceUpdateProfileAttributesResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceUpdateProfileAttributesResult(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - Mid
//  - Flag
//  - Value
type TalkServiceUpdateContactSettingArgs struct {
  ReqSeq int32 `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
  Mid string `thrift:"mid,2" db:"mid" json:"mid"`
  Flag ContactSettingAttribute `thrift:"flag,3" db:"flag" json:"flag"`
  Value string `thrift:"value,4" db:"value" json:"value"`
}

func NewTalkServiceUpdateContactSettingArgs() *TalkServiceUpdateContactSettingArgs {
  return &TalkServiceUpdateContactSettingArgs{}
}


func (p *TalkServiceUpdateContactSettingArgs) GetReqSeq() int32 {
  return p.ReqSeq
}

func (p *TalkServiceUpdateContactSettingArgs) GetMid() string {
  return p.Mid
}

func (p *TalkServiceUpdateContactSettingArgs) GetFlag() ContactSettingAttribute {
  return p.Flag
}

func (p *TalkServiceUpdateContactSettingArgs) GetValue() string {
  return p.Value
}
func (p *TalkServiceUpdateContactSettingArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceUpdateContactSettingArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqSeq = v
}
  return nil
}

func (p *TalkServiceUpdateContactSettingArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Mid = v
}
  return nil
}

func (p *TalkServiceUpdateContactSettingArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := ContactSettingAttribute(v)
  p.Flag = temp
}
  return nil
}

func (p *TalkServiceUpdateContactSettingArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Value = v
}
  return nil
}

func (p *TalkServiceUpdateContactSettingArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateContactSetting_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceUpdateContactSettingArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("reqSeq", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err) }
  if err := oprot.WriteI32(int32(p.ReqSeq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err) }
  return err
}

func (p *TalkServiceUpdateContactSettingArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("mid", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:mid: ", p), err) }
  if err := oprot.WriteString(string(p.Mid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.mid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:mid: ", p), err) }
  return err
}

func (p *TalkServiceUpdateContactSettingArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("flag", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:flag: ", p), err) }
  if err := oprot.WriteI32(int32(p.Flag)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.flag (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:flag: ", p), err) }
  return err
}

func (p *TalkServiceUpdateContactSettingArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("value", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:value: ", p), err) }
  if err := oprot.WriteString(string(p.Value)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.value (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:value: ", p), err) }
  return err
}

func (p *TalkServiceUpdateContactSettingArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceUpdateContactSettingArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceUpdateContactSettingResult struct {
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceUpdateContactSettingResult() *TalkServiceUpdateContactSettingResult {
  return &TalkServiceUpdateContactSettingResult{}
}

var TalkServiceUpdateContactSettingResult_E_DEFAULT *TalkException
func (p *TalkServiceUpdateContactSettingResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceUpdateContactSettingResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceUpdateContactSettingResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceUpdateContactSettingResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceUpdateContactSettingResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceUpdateContactSettingResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateContactSetting_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceUpdateContactSettingResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceUpdateContactSettingResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceUpdateContactSettingResult(%+v)", *p)
}

// Attributes:
//  - SyncReason
type TalkServiceGetRecentFriendRequestsArgs struct {
  SyncReason SyncReason `thrift:"syncReason,1" db:"syncReason" json:"syncReason"`
}

func NewTalkServiceGetRecentFriendRequestsArgs() *TalkServiceGetRecentFriendRequestsArgs {
  return &TalkServiceGetRecentFriendRequestsArgs{}
}


func (p *TalkServiceGetRecentFriendRequestsArgs) GetSyncReason() SyncReason {
  return p.SyncReason
}
func (p *TalkServiceGetRecentFriendRequestsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetRecentFriendRequestsArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := SyncReason(v)
  p.SyncReason = temp
}
  return nil
}

func (p *TalkServiceGetRecentFriendRequestsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getRecentFriendRequests_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetRecentFriendRequestsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("syncReason", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:syncReason: ", p), err) }
  if err := oprot.WriteI32(int32(p.SyncReason)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.syncReason (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:syncReason: ", p), err) }
  return err
}

func (p *TalkServiceGetRecentFriendRequestsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetRecentFriendRequestsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetRecentFriendRequestsResult struct {
  Success *FriendRequestsInfo `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetRecentFriendRequestsResult() *TalkServiceGetRecentFriendRequestsResult {
  return &TalkServiceGetRecentFriendRequestsResult{}
}

var TalkServiceGetRecentFriendRequestsResult_Success_DEFAULT *FriendRequestsInfo
func (p *TalkServiceGetRecentFriendRequestsResult) GetSuccess() *FriendRequestsInfo {
  if !p.IsSetSuccess() {
    return TalkServiceGetRecentFriendRequestsResult_Success_DEFAULT
  }
return p.Success
}
var TalkServiceGetRecentFriendRequestsResult_E_DEFAULT *TalkException
func (p *TalkServiceGetRecentFriendRequestsResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceGetRecentFriendRequestsResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceGetRecentFriendRequestsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceGetRecentFriendRequestsResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceGetRecentFriendRequestsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetRecentFriendRequestsResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &FriendRequestsInfo{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TalkServiceGetRecentFriendRequestsResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceGetRecentFriendRequestsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getRecentFriendRequests_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetRecentFriendRequestsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetRecentFriendRequestsResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetRecentFriendRequestsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetRecentFriendRequestsResult(%+v)", *p)
}

type TalkServiceGetCountryWithRequestIpArgs struct {
}

func NewTalkServiceGetCountryWithRequestIpArgs() *TalkServiceGetCountryWithRequestIpArgs {
  return &TalkServiceGetCountryWithRequestIpArgs{}
}

func (p *TalkServiceGetCountryWithRequestIpArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetCountryWithRequestIpArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getCountryWithRequestIp_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetCountryWithRequestIpArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetCountryWithRequestIpArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetCountryWithRequestIpResult struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetCountryWithRequestIpResult() *TalkServiceGetCountryWithRequestIpResult {
  return &TalkServiceGetCountryWithRequestIpResult{}
}

var TalkServiceGetCountryWithRequestIpResult_Success_DEFAULT string
func (p *TalkServiceGetCountryWithRequestIpResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return TalkServiceGetCountryWithRequestIpResult_Success_DEFAULT
  }
return *p.Success
}
var TalkServiceGetCountryWithRequestIpResult_E_DEFAULT *TalkException
func (p *TalkServiceGetCountryWithRequestIpResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceGetCountryWithRequestIpResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceGetCountryWithRequestIpResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceGetCountryWithRequestIpResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceGetCountryWithRequestIpResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetCountryWithRequestIpResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *TalkServiceGetCountryWithRequestIpResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceGetCountryWithRequestIpResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getCountryWithRequestIp_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetCountryWithRequestIpResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetCountryWithRequestIpResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetCountryWithRequestIpResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetCountryWithRequestIpResult(%+v)", *p)
}

// Attributes:
//  - ID
type TalkServiceGetContactArgs struct {
  // unused field # 1
  ID string `thrift:"id,2" db:"id" json:"id"`
}

func NewTalkServiceGetContactArgs() *TalkServiceGetContactArgs {
  return &TalkServiceGetContactArgs{}
}


func (p *TalkServiceGetContactArgs) GetID() string {
  return p.ID
}
func (p *TalkServiceGetContactArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetContactArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *TalkServiceGetContactArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getContact_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetContactArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:id: ", p), err) }
  if err := oprot.WriteString(string(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:id: ", p), err) }
  return err
}

func (p *TalkServiceGetContactArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetContactArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetContactResult struct {
  Success *Contact `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetContactResult() *TalkServiceGetContactResult {
  return &TalkServiceGetContactResult{}
}

var TalkServiceGetContactResult_Success_DEFAULT *Contact
func (p *TalkServiceGetContactResult) GetSuccess() *Contact {
  if !p.IsSetSuccess() {
    return TalkServiceGetContactResult_Success_DEFAULT
  }
return p.Success
}
var TalkServiceGetContactResult_E_DEFAULT *TalkException
func (p *TalkServiceGetContactResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceGetContactResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceGetContactResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceGetContactResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceGetContactResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetContactResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &Contact{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TalkServiceGetContactResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceGetContactResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getContact_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetContactResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetContactResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetContactResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetContactResult(%+v)", *p)
}

// Attributes:
//  - ChatMid
type TalkServiceGetLastE2EEPublicKeysArgs struct {
  // unused field # 1
  ChatMid string `thrift:"chatMid,2" db:"chatMid" json:"chatMid"`
}

func NewTalkServiceGetLastE2EEPublicKeysArgs() *TalkServiceGetLastE2EEPublicKeysArgs {
  return &TalkServiceGetLastE2EEPublicKeysArgs{}
}


func (p *TalkServiceGetLastE2EEPublicKeysArgs) GetChatMid() string {
  return p.ChatMid
}
func (p *TalkServiceGetLastE2EEPublicKeysArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetLastE2EEPublicKeysArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ChatMid = v
}
  return nil
}

func (p *TalkServiceGetLastE2EEPublicKeysArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getLastE2EEPublicKeys_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetLastE2EEPublicKeysArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("chatMid", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:chatMid: ", p), err) }
  if err := oprot.WriteString(string(p.ChatMid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.chatMid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:chatMid: ", p), err) }
  return err
}

func (p *TalkServiceGetLastE2EEPublicKeysArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetLastE2EEPublicKeysArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetLastE2EEPublicKeysResult struct {
  Success map[string]*E2EEPublicKey `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetLastE2EEPublicKeysResult() *TalkServiceGetLastE2EEPublicKeysResult {
  return &TalkServiceGetLastE2EEPublicKeysResult{}
}

var TalkServiceGetLastE2EEPublicKeysResult_Success_DEFAULT map[string]*E2EEPublicKey

func (p *TalkServiceGetLastE2EEPublicKeysResult) GetSuccess() map[string]*E2EEPublicKey {
  return p.Success
}
var TalkServiceGetLastE2EEPublicKeysResult_E_DEFAULT *TalkException
func (p *TalkServiceGetLastE2EEPublicKeysResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceGetLastE2EEPublicKeysResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceGetLastE2EEPublicKeysResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceGetLastE2EEPublicKeysResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceGetLastE2EEPublicKeysResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetLastE2EEPublicKeysResult)  ReadField0(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]*E2EEPublicKey, size)
  p.Success =  tMap
  for i := 0; i < size; i ++ {
var _key322 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key322 = v
}
    _val323 := &E2EEPublicKey{}
    if err := _val323.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val323), err)
    }
    p.Success[_key322] = _val323
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *TalkServiceGetLastE2EEPublicKeysResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceGetLastE2EEPublicKeysResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getLastE2EEPublicKeys_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetLastE2EEPublicKeysResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.MAP, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range p.Success {
      if err := oprot.WriteString(string(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteMapEnd(); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetLastE2EEPublicKeysResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetLastE2EEPublicKeysResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetLastE2EEPublicKeysResult(%+v)", *p)
}

type TalkServiceGetRingtoneArgs struct {
}

func NewTalkServiceGetRingtoneArgs() *TalkServiceGetRingtoneArgs {
  return &TalkServiceGetRingtoneArgs{}
}

func (p *TalkServiceGetRingtoneArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetRingtoneArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getRingtone_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetRingtoneArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetRingtoneArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetRingtoneResult struct {
  Success *Ringtone `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetRingtoneResult() *TalkServiceGetRingtoneResult {
  return &TalkServiceGetRingtoneResult{}
}

var TalkServiceGetRingtoneResult_Success_DEFAULT *Ringtone
func (p *TalkServiceGetRingtoneResult) GetSuccess() *Ringtone {
  if !p.IsSetSuccess() {
    return TalkServiceGetRingtoneResult_Success_DEFAULT
  }
return p.Success
}
var TalkServiceGetRingtoneResult_E_DEFAULT *TalkException
func (p *TalkServiceGetRingtoneResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceGetRingtoneResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceGetRingtoneResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceGetRingtoneResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceGetRingtoneResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetRingtoneResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &Ringtone{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TalkServiceGetRingtoneResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceGetRingtoneResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getRingtone_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetRingtoneResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetRingtoneResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetRingtoneResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetRingtoneResult(%+v)", *p)
}

// Attributes:
//  - Mid
type TalkServiceNegotiateE2EEPublicKeyArgs struct {
  // unused field # 1
  Mid string `thrift:"mid,2" db:"mid" json:"mid"`
}

func NewTalkServiceNegotiateE2EEPublicKeyArgs() *TalkServiceNegotiateE2EEPublicKeyArgs {
  return &TalkServiceNegotiateE2EEPublicKeyArgs{}
}


func (p *TalkServiceNegotiateE2EEPublicKeyArgs) GetMid() string {
  return p.Mid
}
func (p *TalkServiceNegotiateE2EEPublicKeyArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceNegotiateE2EEPublicKeyArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Mid = v
}
  return nil
}

func (p *TalkServiceNegotiateE2EEPublicKeyArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("negotiateE2EEPublicKey_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceNegotiateE2EEPublicKeyArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("mid", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:mid: ", p), err) }
  if err := oprot.WriteString(string(p.Mid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.mid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:mid: ", p), err) }
  return err
}

func (p *TalkServiceNegotiateE2EEPublicKeyArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceNegotiateE2EEPublicKeyArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceNegotiateE2EEPublicKeyResult struct {
  Success *E2EENegotiationResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceNegotiateE2EEPublicKeyResult() *TalkServiceNegotiateE2EEPublicKeyResult {
  return &TalkServiceNegotiateE2EEPublicKeyResult{}
}

var TalkServiceNegotiateE2EEPublicKeyResult_Success_DEFAULT *E2EENegotiationResult_
func (p *TalkServiceNegotiateE2EEPublicKeyResult) GetSuccess() *E2EENegotiationResult_ {
  if !p.IsSetSuccess() {
    return TalkServiceNegotiateE2EEPublicKeyResult_Success_DEFAULT
  }
return p.Success
}
var TalkServiceNegotiateE2EEPublicKeyResult_E_DEFAULT *TalkException
func (p *TalkServiceNegotiateE2EEPublicKeyResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceNegotiateE2EEPublicKeyResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceNegotiateE2EEPublicKeyResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceNegotiateE2EEPublicKeyResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceNegotiateE2EEPublicKeyResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceNegotiateE2EEPublicKeyResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &E2EENegotiationResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TalkServiceNegotiateE2EEPublicKeyResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceNegotiateE2EEPublicKeyResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("negotiateE2EEPublicKey_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceNegotiateE2EEPublicKeyResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceNegotiateE2EEPublicKeyResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceNegotiateE2EEPublicKeyResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceNegotiateE2EEPublicKeyResult(%+v)", *p)
}

// Attributes:
//  - SearchId
type TalkServiceFindContactByUseridArgs struct {
  // unused field # 1
  SearchId string `thrift:"searchId,2" db:"searchId" json:"searchId"`
}

func NewTalkServiceFindContactByUseridArgs() *TalkServiceFindContactByUseridArgs {
  return &TalkServiceFindContactByUseridArgs{}
}


func (p *TalkServiceFindContactByUseridArgs) GetSearchId() string {
  return p.SearchId
}
func (p *TalkServiceFindContactByUseridArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceFindContactByUseridArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.SearchId = v
}
  return nil
}

func (p *TalkServiceFindContactByUseridArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("findContactByUserid_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceFindContactByUseridArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("searchId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:searchId: ", p), err) }
  if err := oprot.WriteString(string(p.SearchId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.searchId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:searchId: ", p), err) }
  return err
}

func (p *TalkServiceFindContactByUseridArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceFindContactByUseridArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceFindContactByUseridResult struct {
  Success *Contact `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceFindContactByUseridResult() *TalkServiceFindContactByUseridResult {
  return &TalkServiceFindContactByUseridResult{}
}

var TalkServiceFindContactByUseridResult_Success_DEFAULT *Contact
func (p *TalkServiceFindContactByUseridResult) GetSuccess() *Contact {
  if !p.IsSetSuccess() {
    return TalkServiceFindContactByUseridResult_Success_DEFAULT
  }
return p.Success
}
var TalkServiceFindContactByUseridResult_E_DEFAULT *TalkException
func (p *TalkServiceFindContactByUseridResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceFindContactByUseridResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceFindContactByUseridResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceFindContactByUseridResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceFindContactByUseridResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceFindContactByUseridResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &Contact{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TalkServiceFindContactByUseridResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceFindContactByUseridResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("findContactByUserid_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceFindContactByUseridResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceFindContactByUseridResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceFindContactByUseridResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceFindContactByUseridResult(%+v)", *p)
}

// Attributes:
//  - Oid
type TalkServiceClearRingtoneArgs struct {
  Oid string `thrift:"oid,1" db:"oid" json:"oid"`
}

func NewTalkServiceClearRingtoneArgs() *TalkServiceClearRingtoneArgs {
  return &TalkServiceClearRingtoneArgs{}
}


func (p *TalkServiceClearRingtoneArgs) GetOid() string {
  return p.Oid
}
func (p *TalkServiceClearRingtoneArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceClearRingtoneArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Oid = v
}
  return nil
}

func (p *TalkServiceClearRingtoneArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("clearRingtone_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceClearRingtoneArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("oid", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:oid: ", p), err) }
  if err := oprot.WriteString(string(p.Oid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.oid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:oid: ", p), err) }
  return err
}

func (p *TalkServiceClearRingtoneArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceClearRingtoneArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceClearRingtoneResult struct {
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceClearRingtoneResult() *TalkServiceClearRingtoneResult {
  return &TalkServiceClearRingtoneResult{}
}

var TalkServiceClearRingtoneResult_E_DEFAULT *TalkException
func (p *TalkServiceClearRingtoneResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceClearRingtoneResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceClearRingtoneResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceClearRingtoneResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceClearRingtoneResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceClearRingtoneResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("clearRingtone_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceClearRingtoneResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceClearRingtoneResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceClearRingtoneResult(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - Type
//  - Target
//  - Enablement
type TalkServiceSetNotificationsEnabledArgs struct {
  ReqSeq int32 `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
  Type MidType `thrift:"type,2" db:"type" json:"type"`
  Target string `thrift:"target,3" db:"target" json:"target"`
  Enablement bool `thrift:"enablement,4" db:"enablement" json:"enablement"`
}

func NewTalkServiceSetNotificationsEnabledArgs() *TalkServiceSetNotificationsEnabledArgs {
  return &TalkServiceSetNotificationsEnabledArgs{}
}


func (p *TalkServiceSetNotificationsEnabledArgs) GetReqSeq() int32 {
  return p.ReqSeq
}

func (p *TalkServiceSetNotificationsEnabledArgs) GetType() MidType {
  return p.Type
}

func (p *TalkServiceSetNotificationsEnabledArgs) GetTarget() string {
  return p.Target
}

func (p *TalkServiceSetNotificationsEnabledArgs) GetEnablement() bool {
  return p.Enablement
}
func (p *TalkServiceSetNotificationsEnabledArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceSetNotificationsEnabledArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqSeq = v
}
  return nil
}

func (p *TalkServiceSetNotificationsEnabledArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := MidType(v)
  p.Type = temp
}
  return nil
}

func (p *TalkServiceSetNotificationsEnabledArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Target = v
}
  return nil
}

func (p *TalkServiceSetNotificationsEnabledArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Enablement = v
}
  return nil
}

func (p *TalkServiceSetNotificationsEnabledArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("setNotificationsEnabled_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceSetNotificationsEnabledArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("reqSeq", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err) }
  if err := oprot.WriteI32(int32(p.ReqSeq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err) }
  return err
}

func (p *TalkServiceSetNotificationsEnabledArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("type", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:type: ", p), err) }
  if err := oprot.WriteI32(int32(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:type: ", p), err) }
  return err
}

func (p *TalkServiceSetNotificationsEnabledArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("target", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:target: ", p), err) }
  if err := oprot.WriteString(string(p.Target)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.target (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:target: ", p), err) }
  return err
}

func (p *TalkServiceSetNotificationsEnabledArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("enablement", thrift.BOOL, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:enablement: ", p), err) }
  if err := oprot.WriteBool(bool(p.Enablement)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.enablement (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:enablement: ", p), err) }
  return err
}

func (p *TalkServiceSetNotificationsEnabledArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceSetNotificationsEnabledArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceSetNotificationsEnabledResult struct {
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceSetNotificationsEnabledResult() *TalkServiceSetNotificationsEnabledResult {
  return &TalkServiceSetNotificationsEnabledResult{}
}

var TalkServiceSetNotificationsEnabledResult_E_DEFAULT *TalkException
func (p *TalkServiceSetNotificationsEnabledResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceSetNotificationsEnabledResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceSetNotificationsEnabledResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceSetNotificationsEnabledResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceSetNotificationsEnabledResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceSetNotificationsEnabledResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("setNotificationsEnabled_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceSetNotificationsEnabledResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceSetNotificationsEnabledResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceSetNotificationsEnabledResult(%+v)", *p)
}

// Attributes:
//  - Request
type TalkServiceDeleteOtherFromChatArgs struct {
  Request *DeleteOtherFromChatRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewTalkServiceDeleteOtherFromChatArgs() *TalkServiceDeleteOtherFromChatArgs {
  return &TalkServiceDeleteOtherFromChatArgs{}
}

var TalkServiceDeleteOtherFromChatArgs_Request_DEFAULT *DeleteOtherFromChatRequest
func (p *TalkServiceDeleteOtherFromChatArgs) GetRequest() *DeleteOtherFromChatRequest {
  if !p.IsSetRequest() {
    return TalkServiceDeleteOtherFromChatArgs_Request_DEFAULT
  }
return p.Request
}
func (p *TalkServiceDeleteOtherFromChatArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *TalkServiceDeleteOtherFromChatArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceDeleteOtherFromChatArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Request = &DeleteOtherFromChatRequest{}
  if err := p.Request.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *TalkServiceDeleteOtherFromChatArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("deleteOtherFromChat_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceDeleteOtherFromChatArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *TalkServiceDeleteOtherFromChatArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceDeleteOtherFromChatArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceDeleteOtherFromChatResult struct {
  Success *DeleteOtherFromChatResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceDeleteOtherFromChatResult() *TalkServiceDeleteOtherFromChatResult {
  return &TalkServiceDeleteOtherFromChatResult{}
}

var TalkServiceDeleteOtherFromChatResult_Success_DEFAULT *DeleteOtherFromChatResponse
func (p *TalkServiceDeleteOtherFromChatResult) GetSuccess() *DeleteOtherFromChatResponse {
  if !p.IsSetSuccess() {
    return TalkServiceDeleteOtherFromChatResult_Success_DEFAULT
  }
return p.Success
}
var TalkServiceDeleteOtherFromChatResult_E_DEFAULT *TalkException
func (p *TalkServiceDeleteOtherFromChatResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceDeleteOtherFromChatResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceDeleteOtherFromChatResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceDeleteOtherFromChatResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceDeleteOtherFromChatResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceDeleteOtherFromChatResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &DeleteOtherFromChatResponse{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TalkServiceDeleteOtherFromChatResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceDeleteOtherFromChatResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("deleteOtherFromChat_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceDeleteOtherFromChatResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceDeleteOtherFromChatResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceDeleteOtherFromChatResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceDeleteOtherFromChatResult(%+v)", *p)
}

// Attributes:
//  - Request
type TalkServiceInviteIntoChatArgs struct {
  Request *InviteIntoChatRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewTalkServiceInviteIntoChatArgs() *TalkServiceInviteIntoChatArgs {
  return &TalkServiceInviteIntoChatArgs{}
}

var TalkServiceInviteIntoChatArgs_Request_DEFAULT *InviteIntoChatRequest
func (p *TalkServiceInviteIntoChatArgs) GetRequest() *InviteIntoChatRequest {
  if !p.IsSetRequest() {
    return TalkServiceInviteIntoChatArgs_Request_DEFAULT
  }
return p.Request
}
func (p *TalkServiceInviteIntoChatArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *TalkServiceInviteIntoChatArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceInviteIntoChatArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Request = &InviteIntoChatRequest{}
  if err := p.Request.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *TalkServiceInviteIntoChatArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("inviteIntoChat_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceInviteIntoChatArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *TalkServiceInviteIntoChatArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceInviteIntoChatArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceInviteIntoChatResult struct {
  Success *InviteIntoChatResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceInviteIntoChatResult() *TalkServiceInviteIntoChatResult {
  return &TalkServiceInviteIntoChatResult{}
}

var TalkServiceInviteIntoChatResult_Success_DEFAULT *InviteIntoChatResponse
func (p *TalkServiceInviteIntoChatResult) GetSuccess() *InviteIntoChatResponse {
  if !p.IsSetSuccess() {
    return TalkServiceInviteIntoChatResult_Success_DEFAULT
  }
return p.Success
}
var TalkServiceInviteIntoChatResult_E_DEFAULT *TalkException
func (p *TalkServiceInviteIntoChatResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceInviteIntoChatResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceInviteIntoChatResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceInviteIntoChatResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceInviteIntoChatResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceInviteIntoChatResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &InviteIntoChatResponse{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TalkServiceInviteIntoChatResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceInviteIntoChatResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("inviteIntoChat_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceInviteIntoChatResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceInviteIntoChatResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceInviteIntoChatResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceInviteIntoChatResult(%+v)", *p)
}

// Attributes:
//  - Request
type TalkServiceAcceptChatInvitationByTicketArgs struct {
  Request *AcceptChatInvitationByTicketRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewTalkServiceAcceptChatInvitationByTicketArgs() *TalkServiceAcceptChatInvitationByTicketArgs {
  return &TalkServiceAcceptChatInvitationByTicketArgs{}
}

var TalkServiceAcceptChatInvitationByTicketArgs_Request_DEFAULT *AcceptChatInvitationByTicketRequest
func (p *TalkServiceAcceptChatInvitationByTicketArgs) GetRequest() *AcceptChatInvitationByTicketRequest {
  if !p.IsSetRequest() {
    return TalkServiceAcceptChatInvitationByTicketArgs_Request_DEFAULT
  }
return p.Request
}
func (p *TalkServiceAcceptChatInvitationByTicketArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *TalkServiceAcceptChatInvitationByTicketArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceAcceptChatInvitationByTicketArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Request = &AcceptChatInvitationByTicketRequest{}
  if err := p.Request.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *TalkServiceAcceptChatInvitationByTicketArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("acceptChatInvitationByTicket_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceAcceptChatInvitationByTicketArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *TalkServiceAcceptChatInvitationByTicketArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceAcceptChatInvitationByTicketArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceAcceptChatInvitationByTicketResult struct {
  Success *AcceptChatInvitationByTicketResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceAcceptChatInvitationByTicketResult() *TalkServiceAcceptChatInvitationByTicketResult {
  return &TalkServiceAcceptChatInvitationByTicketResult{}
}

var TalkServiceAcceptChatInvitationByTicketResult_Success_DEFAULT *AcceptChatInvitationByTicketResponse
func (p *TalkServiceAcceptChatInvitationByTicketResult) GetSuccess() *AcceptChatInvitationByTicketResponse {
  if !p.IsSetSuccess() {
    return TalkServiceAcceptChatInvitationByTicketResult_Success_DEFAULT
  }
return p.Success
}
var TalkServiceAcceptChatInvitationByTicketResult_E_DEFAULT *TalkException
func (p *TalkServiceAcceptChatInvitationByTicketResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceAcceptChatInvitationByTicketResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceAcceptChatInvitationByTicketResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceAcceptChatInvitationByTicketResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceAcceptChatInvitationByTicketResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceAcceptChatInvitationByTicketResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &AcceptChatInvitationByTicketResponse{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TalkServiceAcceptChatInvitationByTicketResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceAcceptChatInvitationByTicketResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("acceptChatInvitationByTicket_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceAcceptChatInvitationByTicketResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceAcceptChatInvitationByTicketResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceAcceptChatInvitationByTicketResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceAcceptChatInvitationByTicketResult(%+v)", *p)
}

// Attributes:
//  - Request
type TalkServiceDeleteSelfFromChatArgs struct {
  Request *DeleteSelfFromChatRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewTalkServiceDeleteSelfFromChatArgs() *TalkServiceDeleteSelfFromChatArgs {
  return &TalkServiceDeleteSelfFromChatArgs{}
}

var TalkServiceDeleteSelfFromChatArgs_Request_DEFAULT *DeleteSelfFromChatRequest
func (p *TalkServiceDeleteSelfFromChatArgs) GetRequest() *DeleteSelfFromChatRequest {
  if !p.IsSetRequest() {
    return TalkServiceDeleteSelfFromChatArgs_Request_DEFAULT
  }
return p.Request
}
func (p *TalkServiceDeleteSelfFromChatArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *TalkServiceDeleteSelfFromChatArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceDeleteSelfFromChatArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Request = &DeleteSelfFromChatRequest{}
  if err := p.Request.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *TalkServiceDeleteSelfFromChatArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("deleteSelfFromChat_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceDeleteSelfFromChatArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *TalkServiceDeleteSelfFromChatArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceDeleteSelfFromChatArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceDeleteSelfFromChatResult struct {
  Success *DeleteSelfFromChatResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceDeleteSelfFromChatResult() *TalkServiceDeleteSelfFromChatResult {
  return &TalkServiceDeleteSelfFromChatResult{}
}

var TalkServiceDeleteSelfFromChatResult_Success_DEFAULT *DeleteSelfFromChatResponse
func (p *TalkServiceDeleteSelfFromChatResult) GetSuccess() *DeleteSelfFromChatResponse {
  if !p.IsSetSuccess() {
    return TalkServiceDeleteSelfFromChatResult_Success_DEFAULT
  }
return p.Success
}
var TalkServiceDeleteSelfFromChatResult_E_DEFAULT *TalkException
func (p *TalkServiceDeleteSelfFromChatResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceDeleteSelfFromChatResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceDeleteSelfFromChatResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceDeleteSelfFromChatResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceDeleteSelfFromChatResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceDeleteSelfFromChatResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &DeleteSelfFromChatResponse{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TalkServiceDeleteSelfFromChatResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceDeleteSelfFromChatResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("deleteSelfFromChat_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceDeleteSelfFromChatResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceDeleteSelfFromChatResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceDeleteSelfFromChatResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceDeleteSelfFromChatResult(%+v)", *p)
}

// Attributes:
//  - Request
type TalkServiceFindChatByTicketArgs struct {
  Request *FindChatByTicketRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewTalkServiceFindChatByTicketArgs() *TalkServiceFindChatByTicketArgs {
  return &TalkServiceFindChatByTicketArgs{}
}

var TalkServiceFindChatByTicketArgs_Request_DEFAULT *FindChatByTicketRequest
func (p *TalkServiceFindChatByTicketArgs) GetRequest() *FindChatByTicketRequest {
  if !p.IsSetRequest() {
    return TalkServiceFindChatByTicketArgs_Request_DEFAULT
  }
return p.Request
}
func (p *TalkServiceFindChatByTicketArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *TalkServiceFindChatByTicketArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceFindChatByTicketArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Request = &FindChatByTicketRequest{}
  if err := p.Request.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *TalkServiceFindChatByTicketArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("findChatByTicket_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceFindChatByTicketArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *TalkServiceFindChatByTicketArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceFindChatByTicketArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceFindChatByTicketResult struct {
  Success *FindChatByTicketResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceFindChatByTicketResult() *TalkServiceFindChatByTicketResult {
  return &TalkServiceFindChatByTicketResult{}
}

var TalkServiceFindChatByTicketResult_Success_DEFAULT *FindChatByTicketResponse
func (p *TalkServiceFindChatByTicketResult) GetSuccess() *FindChatByTicketResponse {
  if !p.IsSetSuccess() {
    return TalkServiceFindChatByTicketResult_Success_DEFAULT
  }
return p.Success
}
var TalkServiceFindChatByTicketResult_E_DEFAULT *TalkException
func (p *TalkServiceFindChatByTicketResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceFindChatByTicketResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceFindChatByTicketResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceFindChatByTicketResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceFindChatByTicketResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceFindChatByTicketResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &FindChatByTicketResponse{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TalkServiceFindChatByTicketResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceFindChatByTicketResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("findChatByTicket_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceFindChatByTicketResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceFindChatByTicketResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceFindChatByTicketResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceFindChatByTicketResult(%+v)", *p)
}

// Attributes:
//  - Request
type TalkServiceCancelChatInvitationArgs struct {
  Request *CancelChatInvitationRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewTalkServiceCancelChatInvitationArgs() *TalkServiceCancelChatInvitationArgs {
  return &TalkServiceCancelChatInvitationArgs{}
}

var TalkServiceCancelChatInvitationArgs_Request_DEFAULT *CancelChatInvitationRequest
func (p *TalkServiceCancelChatInvitationArgs) GetRequest() *CancelChatInvitationRequest {
  if !p.IsSetRequest() {
    return TalkServiceCancelChatInvitationArgs_Request_DEFAULT
  }
return p.Request
}
func (p *TalkServiceCancelChatInvitationArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *TalkServiceCancelChatInvitationArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceCancelChatInvitationArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Request = &CancelChatInvitationRequest{}
  if err := p.Request.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *TalkServiceCancelChatInvitationArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("cancelChatInvitation_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceCancelChatInvitationArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *TalkServiceCancelChatInvitationArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceCancelChatInvitationArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceCancelChatInvitationResult struct {
  Success *CancelChatInvitationResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceCancelChatInvitationResult() *TalkServiceCancelChatInvitationResult {
  return &TalkServiceCancelChatInvitationResult{}
}

var TalkServiceCancelChatInvitationResult_Success_DEFAULT *CancelChatInvitationResponse
func (p *TalkServiceCancelChatInvitationResult) GetSuccess() *CancelChatInvitationResponse {
  if !p.IsSetSuccess() {
    return TalkServiceCancelChatInvitationResult_Success_DEFAULT
  }
return p.Success
}
var TalkServiceCancelChatInvitationResult_E_DEFAULT *TalkException
func (p *TalkServiceCancelChatInvitationResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceCancelChatInvitationResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceCancelChatInvitationResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceCancelChatInvitationResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceCancelChatInvitationResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceCancelChatInvitationResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &CancelChatInvitationResponse{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TalkServiceCancelChatInvitationResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceCancelChatInvitationResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("cancelChatInvitation_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceCancelChatInvitationResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceCancelChatInvitationResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceCancelChatInvitationResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceCancelChatInvitationResult(%+v)", *p)
}

// Attributes:
//  - Request
type TalkServiceAcceptChatInvitationArgs struct {
  Request *AcceptChatInvitationRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewTalkServiceAcceptChatInvitationArgs() *TalkServiceAcceptChatInvitationArgs {
  return &TalkServiceAcceptChatInvitationArgs{}
}

var TalkServiceAcceptChatInvitationArgs_Request_DEFAULT *AcceptChatInvitationRequest
func (p *TalkServiceAcceptChatInvitationArgs) GetRequest() *AcceptChatInvitationRequest {
  if !p.IsSetRequest() {
    return TalkServiceAcceptChatInvitationArgs_Request_DEFAULT
  }
return p.Request
}
func (p *TalkServiceAcceptChatInvitationArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *TalkServiceAcceptChatInvitationArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceAcceptChatInvitationArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Request = &AcceptChatInvitationRequest{}
  if err := p.Request.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *TalkServiceAcceptChatInvitationArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("acceptChatInvitation_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceAcceptChatInvitationArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *TalkServiceAcceptChatInvitationArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceAcceptChatInvitationArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceAcceptChatInvitationResult struct {
  Success *AcceptChatInvitationResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceAcceptChatInvitationResult() *TalkServiceAcceptChatInvitationResult {
  return &TalkServiceAcceptChatInvitationResult{}
}

var TalkServiceAcceptChatInvitationResult_Success_DEFAULT *AcceptChatInvitationResponse
func (p *TalkServiceAcceptChatInvitationResult) GetSuccess() *AcceptChatInvitationResponse {
  if !p.IsSetSuccess() {
    return TalkServiceAcceptChatInvitationResult_Success_DEFAULT
  }
return p.Success
}
var TalkServiceAcceptChatInvitationResult_E_DEFAULT *TalkException
func (p *TalkServiceAcceptChatInvitationResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceAcceptChatInvitationResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceAcceptChatInvitationResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceAcceptChatInvitationResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceAcceptChatInvitationResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceAcceptChatInvitationResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &AcceptChatInvitationResponse{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TalkServiceAcceptChatInvitationResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceAcceptChatInvitationResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("acceptChatInvitation_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceAcceptChatInvitationResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceAcceptChatInvitationResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceAcceptChatInvitationResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceAcceptChatInvitationResult(%+v)", *p)
}

// Attributes:
//  - MessageBoxListRequest
//  - SyncReason
type TalkServiceGetMessageBoxesArgs struct {
  // unused field # 1
  MessageBoxListRequest *MessageBoxListRequest `thrift:"messageBoxListRequest,2" db:"messageBoxListRequest" json:"messageBoxListRequest"`
  SyncReason SyncReason `thrift:"syncReason,3" db:"syncReason" json:"syncReason"`
}

func NewTalkServiceGetMessageBoxesArgs() *TalkServiceGetMessageBoxesArgs {
  return &TalkServiceGetMessageBoxesArgs{}
}

var TalkServiceGetMessageBoxesArgs_MessageBoxListRequest_DEFAULT *MessageBoxListRequest
func (p *TalkServiceGetMessageBoxesArgs) GetMessageBoxListRequest() *MessageBoxListRequest {
  if !p.IsSetMessageBoxListRequest() {
    return TalkServiceGetMessageBoxesArgs_MessageBoxListRequest_DEFAULT
  }
return p.MessageBoxListRequest
}

func (p *TalkServiceGetMessageBoxesArgs) GetSyncReason() SyncReason {
  return p.SyncReason
}
func (p *TalkServiceGetMessageBoxesArgs) IsSetMessageBoxListRequest() bool {
  return p.MessageBoxListRequest != nil
}

func (p *TalkServiceGetMessageBoxesArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetMessageBoxesArgs)  ReadField2(iprot thrift.TProtocol) error {
  p.MessageBoxListRequest = &MessageBoxListRequest{}
  if err := p.MessageBoxListRequest.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.MessageBoxListRequest), err)
  }
  return nil
}

func (p *TalkServiceGetMessageBoxesArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := SyncReason(v)
  p.SyncReason = temp
}
  return nil
}

func (p *TalkServiceGetMessageBoxesArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getMessageBoxes_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetMessageBoxesArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("messageBoxListRequest", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:messageBoxListRequest: ", p), err) }
  if err := p.MessageBoxListRequest.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.MessageBoxListRequest), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:messageBoxListRequest: ", p), err) }
  return err
}

func (p *TalkServiceGetMessageBoxesArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("syncReason", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:syncReason: ", p), err) }
  if err := oprot.WriteI32(int32(p.SyncReason)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.syncReason (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:syncReason: ", p), err) }
  return err
}

func (p *TalkServiceGetMessageBoxesArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetMessageBoxesArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetMessageBoxesResult struct {
  Success *MessageBoxList `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetMessageBoxesResult() *TalkServiceGetMessageBoxesResult {
  return &TalkServiceGetMessageBoxesResult{}
}

var TalkServiceGetMessageBoxesResult_Success_DEFAULT *MessageBoxList
func (p *TalkServiceGetMessageBoxesResult) GetSuccess() *MessageBoxList {
  if !p.IsSetSuccess() {
    return TalkServiceGetMessageBoxesResult_Success_DEFAULT
  }
return p.Success
}
var TalkServiceGetMessageBoxesResult_E_DEFAULT *TalkException
func (p *TalkServiceGetMessageBoxesResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceGetMessageBoxesResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceGetMessageBoxesResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceGetMessageBoxesResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceGetMessageBoxesResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetMessageBoxesResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &MessageBoxList{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TalkServiceGetMessageBoxesResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceGetMessageBoxesResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getMessageBoxes_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetMessageBoxesResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetMessageBoxesResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetMessageBoxesResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetMessageBoxesResult(%+v)", *p)
}

// Attributes:
//  - Request
type TalkServiceUpdateChatArgs struct {
  Request *UpdateChatRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewTalkServiceUpdateChatArgs() *TalkServiceUpdateChatArgs {
  return &TalkServiceUpdateChatArgs{}
}

var TalkServiceUpdateChatArgs_Request_DEFAULT *UpdateChatRequest
func (p *TalkServiceUpdateChatArgs) GetRequest() *UpdateChatRequest {
  if !p.IsSetRequest() {
    return TalkServiceUpdateChatArgs_Request_DEFAULT
  }
return p.Request
}
func (p *TalkServiceUpdateChatArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *TalkServiceUpdateChatArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceUpdateChatArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Request = &UpdateChatRequest{}
  if err := p.Request.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *TalkServiceUpdateChatArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateChat_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceUpdateChatArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *TalkServiceUpdateChatArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceUpdateChatArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceUpdateChatResult struct {
  Success *UpdateChatResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceUpdateChatResult() *TalkServiceUpdateChatResult {
  return &TalkServiceUpdateChatResult{}
}

var TalkServiceUpdateChatResult_Success_DEFAULT *UpdateChatResponse
func (p *TalkServiceUpdateChatResult) GetSuccess() *UpdateChatResponse {
  if !p.IsSetSuccess() {
    return TalkServiceUpdateChatResult_Success_DEFAULT
  }
return p.Success
}
var TalkServiceUpdateChatResult_E_DEFAULT *TalkException
func (p *TalkServiceUpdateChatResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceUpdateChatResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceUpdateChatResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceUpdateChatResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceUpdateChatResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceUpdateChatResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &UpdateChatResponse{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TalkServiceUpdateChatResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceUpdateChatResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateChat_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceUpdateChatResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceUpdateChatResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceUpdateChatResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceUpdateChatResult(%+v)", *p)
}

// Attributes:
//  - Request
type TalkServiceReissueChatTicketArgs struct {
  Request *ReissueChatTicketRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewTalkServiceReissueChatTicketArgs() *TalkServiceReissueChatTicketArgs {
  return &TalkServiceReissueChatTicketArgs{}
}

var TalkServiceReissueChatTicketArgs_Request_DEFAULT *ReissueChatTicketRequest
func (p *TalkServiceReissueChatTicketArgs) GetRequest() *ReissueChatTicketRequest {
  if !p.IsSetRequest() {
    return TalkServiceReissueChatTicketArgs_Request_DEFAULT
  }
return p.Request
}
func (p *TalkServiceReissueChatTicketArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *TalkServiceReissueChatTicketArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceReissueChatTicketArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Request = &ReissueChatTicketRequest{}
  if err := p.Request.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *TalkServiceReissueChatTicketArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("reissueChatTicket_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceReissueChatTicketArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *TalkServiceReissueChatTicketArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceReissueChatTicketArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceReissueChatTicketResult struct {
  Success *ReissueChatTicketResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceReissueChatTicketResult() *TalkServiceReissueChatTicketResult {
  return &TalkServiceReissueChatTicketResult{}
}

var TalkServiceReissueChatTicketResult_Success_DEFAULT *ReissueChatTicketResponse
func (p *TalkServiceReissueChatTicketResult) GetSuccess() *ReissueChatTicketResponse {
  if !p.IsSetSuccess() {
    return TalkServiceReissueChatTicketResult_Success_DEFAULT
  }
return p.Success
}
var TalkServiceReissueChatTicketResult_E_DEFAULT *TalkException
func (p *TalkServiceReissueChatTicketResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceReissueChatTicketResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceReissueChatTicketResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceReissueChatTicketResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceReissueChatTicketResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceReissueChatTicketResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &ReissueChatTicketResponse{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TalkServiceReissueChatTicketResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceReissueChatTicketResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("reissueChatTicket_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceReissueChatTicketResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceReissueChatTicketResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceReissueChatTicketResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceReissueChatTicketResult(%+v)", *p)
}

// Attributes:
//  - Request
//  - SyncReason
type TalkServiceGetAllChatMidsArgs struct {
  Request *GetAllChatMidsRequest `thrift:"request,1" db:"request" json:"request"`
  SyncReason SyncReason `thrift:"syncReason,2" db:"syncReason" json:"syncReason"`
}

func NewTalkServiceGetAllChatMidsArgs() *TalkServiceGetAllChatMidsArgs {
  return &TalkServiceGetAllChatMidsArgs{}
}

var TalkServiceGetAllChatMidsArgs_Request_DEFAULT *GetAllChatMidsRequest
func (p *TalkServiceGetAllChatMidsArgs) GetRequest() *GetAllChatMidsRequest {
  if !p.IsSetRequest() {
    return TalkServiceGetAllChatMidsArgs_Request_DEFAULT
  }
return p.Request
}

func (p *TalkServiceGetAllChatMidsArgs) GetSyncReason() SyncReason {
  return p.SyncReason
}
func (p *TalkServiceGetAllChatMidsArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *TalkServiceGetAllChatMidsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetAllChatMidsArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Request = &GetAllChatMidsRequest{}
  if err := p.Request.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *TalkServiceGetAllChatMidsArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := SyncReason(v)
  p.SyncReason = temp
}
  return nil
}

func (p *TalkServiceGetAllChatMidsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getAllChatMids_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetAllChatMidsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *TalkServiceGetAllChatMidsArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("syncReason", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:syncReason: ", p), err) }
  if err := oprot.WriteI32(int32(p.SyncReason)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.syncReason (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:syncReason: ", p), err) }
  return err
}

func (p *TalkServiceGetAllChatMidsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetAllChatMidsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetAllChatMidsResult struct {
  Success *GetAllChatMidsResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetAllChatMidsResult() *TalkServiceGetAllChatMidsResult {
  return &TalkServiceGetAllChatMidsResult{}
}

var TalkServiceGetAllChatMidsResult_Success_DEFAULT *GetAllChatMidsResponse
func (p *TalkServiceGetAllChatMidsResult) GetSuccess() *GetAllChatMidsResponse {
  if !p.IsSetSuccess() {
    return TalkServiceGetAllChatMidsResult_Success_DEFAULT
  }
return p.Success
}
var TalkServiceGetAllChatMidsResult_E_DEFAULT *TalkException
func (p *TalkServiceGetAllChatMidsResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceGetAllChatMidsResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceGetAllChatMidsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceGetAllChatMidsResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceGetAllChatMidsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetAllChatMidsResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &GetAllChatMidsResponse{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TalkServiceGetAllChatMidsResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceGetAllChatMidsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getAllChatMids_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetAllChatMidsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetAllChatMidsResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetAllChatMidsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetAllChatMidsResult(%+v)", *p)
}

// Attributes:
//  - Request
type TalkServiceRejectChatInvitationArgs struct {
  Request *RejectChatInvitationRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewTalkServiceRejectChatInvitationArgs() *TalkServiceRejectChatInvitationArgs {
  return &TalkServiceRejectChatInvitationArgs{}
}

var TalkServiceRejectChatInvitationArgs_Request_DEFAULT *RejectChatInvitationRequest
func (p *TalkServiceRejectChatInvitationArgs) GetRequest() *RejectChatInvitationRequest {
  if !p.IsSetRequest() {
    return TalkServiceRejectChatInvitationArgs_Request_DEFAULT
  }
return p.Request
}
func (p *TalkServiceRejectChatInvitationArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *TalkServiceRejectChatInvitationArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceRejectChatInvitationArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Request = &RejectChatInvitationRequest{}
  if err := p.Request.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *TalkServiceRejectChatInvitationArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("rejectChatInvitation_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceRejectChatInvitationArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *TalkServiceRejectChatInvitationArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceRejectChatInvitationArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceRejectChatInvitationResult struct {
  Success *RejectChatInvitationResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceRejectChatInvitationResult() *TalkServiceRejectChatInvitationResult {
  return &TalkServiceRejectChatInvitationResult{}
}

var TalkServiceRejectChatInvitationResult_Success_DEFAULT *RejectChatInvitationResponse
func (p *TalkServiceRejectChatInvitationResult) GetSuccess() *RejectChatInvitationResponse {
  if !p.IsSetSuccess() {
    return TalkServiceRejectChatInvitationResult_Success_DEFAULT
  }
return p.Success
}
var TalkServiceRejectChatInvitationResult_E_DEFAULT *TalkException
func (p *TalkServiceRejectChatInvitationResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceRejectChatInvitationResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceRejectChatInvitationResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceRejectChatInvitationResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceRejectChatInvitationResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceRejectChatInvitationResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &RejectChatInvitationResponse{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TalkServiceRejectChatInvitationResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceRejectChatInvitationResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("rejectChatInvitation_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceRejectChatInvitationResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceRejectChatInvitationResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceRejectChatInvitationResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceRejectChatInvitationResult(%+v)", *p)
}

// Attributes:
//  - Request
type TalkServiceCreateChatArgs struct {
  Request *CreateChatRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewTalkServiceCreateChatArgs() *TalkServiceCreateChatArgs {
  return &TalkServiceCreateChatArgs{}
}

var TalkServiceCreateChatArgs_Request_DEFAULT *CreateChatRequest
func (p *TalkServiceCreateChatArgs) GetRequest() *CreateChatRequest {
  if !p.IsSetRequest() {
    return TalkServiceCreateChatArgs_Request_DEFAULT
  }
return p.Request
}
func (p *TalkServiceCreateChatArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *TalkServiceCreateChatArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceCreateChatArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Request = &CreateChatRequest{}
  if err := p.Request.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *TalkServiceCreateChatArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("createChat_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceCreateChatArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *TalkServiceCreateChatArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceCreateChatArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceCreateChatResult struct {
  Success *CreateChatResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceCreateChatResult() *TalkServiceCreateChatResult {
  return &TalkServiceCreateChatResult{}
}

var TalkServiceCreateChatResult_Success_DEFAULT *CreateChatResponse
func (p *TalkServiceCreateChatResult) GetSuccess() *CreateChatResponse {
  if !p.IsSetSuccess() {
    return TalkServiceCreateChatResult_Success_DEFAULT
  }
return p.Success
}
var TalkServiceCreateChatResult_E_DEFAULT *TalkException
func (p *TalkServiceCreateChatResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceCreateChatResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceCreateChatResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceCreateChatResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceCreateChatResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceCreateChatResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &CreateChatResponse{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TalkServiceCreateChatResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceCreateChatResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("createChat_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceCreateChatResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceCreateChatResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceCreateChatResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceCreateChatResult(%+v)", *p)
}

// Attributes:
//  - ChatRoomMids
//  - SyncReason
type TalkServiceGetChatRoomAnnouncementsBulkArgs struct {
  // unused field # 1
  ChatRoomMids []string `thrift:"chatRoomMids,2" db:"chatRoomMids" json:"chatRoomMids"`
  SyncReason SyncReason `thrift:"syncReason,3" db:"syncReason" json:"syncReason"`
}

func NewTalkServiceGetChatRoomAnnouncementsBulkArgs() *TalkServiceGetChatRoomAnnouncementsBulkArgs {
  return &TalkServiceGetChatRoomAnnouncementsBulkArgs{}
}


func (p *TalkServiceGetChatRoomAnnouncementsBulkArgs) GetChatRoomMids() []string {
  return p.ChatRoomMids
}

func (p *TalkServiceGetChatRoomAnnouncementsBulkArgs) GetSyncReason() SyncReason {
  return p.SyncReason
}
func (p *TalkServiceGetChatRoomAnnouncementsBulkArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetChatRoomAnnouncementsBulkArgs)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.ChatRoomMids =  tSlice
  for i := 0; i < size; i ++ {
var _elem324 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem324 = v
}
    p.ChatRoomMids = append(p.ChatRoomMids, _elem324)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TalkServiceGetChatRoomAnnouncementsBulkArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := SyncReason(v)
  p.SyncReason = temp
}
  return nil
}

func (p *TalkServiceGetChatRoomAnnouncementsBulkArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getChatRoomAnnouncementsBulk_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetChatRoomAnnouncementsBulkArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("chatRoomMids", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:chatRoomMids: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.ChatRoomMids)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.ChatRoomMids {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:chatRoomMids: ", p), err) }
  return err
}

func (p *TalkServiceGetChatRoomAnnouncementsBulkArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("syncReason", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:syncReason: ", p), err) }
  if err := oprot.WriteI32(int32(p.SyncReason)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.syncReason (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:syncReason: ", p), err) }
  return err
}

func (p *TalkServiceGetChatRoomAnnouncementsBulkArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetChatRoomAnnouncementsBulkArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetChatRoomAnnouncementsBulkResult struct {
  Success map[string][]*ChatRoomAnnouncement `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetChatRoomAnnouncementsBulkResult() *TalkServiceGetChatRoomAnnouncementsBulkResult {
  return &TalkServiceGetChatRoomAnnouncementsBulkResult{}
}

var TalkServiceGetChatRoomAnnouncementsBulkResult_Success_DEFAULT map[string][]*ChatRoomAnnouncement

func (p *TalkServiceGetChatRoomAnnouncementsBulkResult) GetSuccess() map[string][]*ChatRoomAnnouncement {
  return p.Success
}
var TalkServiceGetChatRoomAnnouncementsBulkResult_E_DEFAULT *TalkException
func (p *TalkServiceGetChatRoomAnnouncementsBulkResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceGetChatRoomAnnouncementsBulkResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceGetChatRoomAnnouncementsBulkResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceGetChatRoomAnnouncementsBulkResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceGetChatRoomAnnouncementsBulkResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetChatRoomAnnouncementsBulkResult)  ReadField0(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string][]*ChatRoomAnnouncement, size)
  p.Success =  tMap
  for i := 0; i < size; i ++ {
var _key325 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key325 = v
}
    _, size, err := iprot.ReadListBegin()
    if err != nil {
      return thrift.PrependError("error reading list begin: ", err)
    }
    tSlice := make([]*ChatRoomAnnouncement, 0, size)
    _val326 :=  tSlice
    for i := 0; i < size; i ++ {
      _elem327 := &ChatRoomAnnouncement{}
      if err := _elem327.Read(iprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem327), err)
      }
      _val326 = append(_val326, _elem327)
    }
    if err := iprot.ReadListEnd(); err != nil {
      return thrift.PrependError("error reading list end: ", err)
    }
    p.Success[_key325] = _val326
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *TalkServiceGetChatRoomAnnouncementsBulkResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceGetChatRoomAnnouncementsBulkResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getChatRoomAnnouncementsBulk_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetChatRoomAnnouncementsBulkResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.MAP, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteMapBegin(thrift.STRING, thrift.LIST, len(p.Success)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range p.Success {
      if err := oprot.WriteString(string(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := oprot.WriteListBegin(thrift.STRUCT, len(v)); err != nil {
        return thrift.PrependError("error writing list begin: ", err)
      }
      for _, v := range v {
        if err := v.Write(oprot); err != nil {
          return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
        }
      }
      if err := oprot.WriteListEnd(); err != nil {
        return thrift.PrependError("error writing list end: ", err)
      }
    }
    if err := oprot.WriteMapEnd(); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetChatRoomAnnouncementsBulkResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetChatRoomAnnouncementsBulkResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetChatRoomAnnouncementsBulkResult(%+v)", *p)
}

// Attributes:
//  - Request
type TalkServiceGetChatsArgs struct {
  Request *GetChatsRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewTalkServiceGetChatsArgs() *TalkServiceGetChatsArgs {
  return &TalkServiceGetChatsArgs{}
}

var TalkServiceGetChatsArgs_Request_DEFAULT *GetChatsRequest
func (p *TalkServiceGetChatsArgs) GetRequest() *GetChatsRequest {
  if !p.IsSetRequest() {
    return TalkServiceGetChatsArgs_Request_DEFAULT
  }
return p.Request
}
func (p *TalkServiceGetChatsArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *TalkServiceGetChatsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetChatsArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Request = &GetChatsRequest{}
  if err := p.Request.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *TalkServiceGetChatsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getChats_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetChatsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *TalkServiceGetChatsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetChatsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetChatsResult struct {
  Success *GetChatsResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetChatsResult() *TalkServiceGetChatsResult {
  return &TalkServiceGetChatsResult{}
}

var TalkServiceGetChatsResult_Success_DEFAULT *GetChatsResponse
func (p *TalkServiceGetChatsResult) GetSuccess() *GetChatsResponse {
  if !p.IsSetSuccess() {
    return TalkServiceGetChatsResult_Success_DEFAULT
  }
return p.Success
}
var TalkServiceGetChatsResult_E_DEFAULT *TalkException
func (p *TalkServiceGetChatsResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceGetChatsResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceGetChatsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceGetChatsResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceGetChatsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetChatsResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &GetChatsResponse{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TalkServiceGetChatsResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceGetChatsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getChats_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetChatsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetChatsResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetChatsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetChatsResult(%+v)", *p)
}

// Attributes:
//  - Region
//  - Carrier
//  - Phone
//  - UdidHash
//  - DeviceInfo
//  - NetworkCode
//  - Locale
//  - SimInfo
type TalkServiceStartUpdateVerificationArgs struct {
  // unused field # 1
  Region string `thrift:"region,2" db:"region" json:"region"`
  Carrier Carrier `thrift:"carrier,3" db:"carrier" json:"carrier"`
  Phone string `thrift:"phone,4" db:"phone" json:"phone"`
  UdidHash string `thrift:"udidHash,5" db:"udidHash" json:"udidHash"`
  DeviceInfo *DeviceInfo `thrift:"deviceInfo,6" db:"deviceInfo" json:"deviceInfo"`
  NetworkCode string `thrift:"networkCode,7" db:"networkCode" json:"networkCode"`
  Locale string `thrift:"locale,8" db:"locale" json:"locale"`
  SimInfo *SIMInfo `thrift:"simInfo,9" db:"simInfo" json:"simInfo"`
}

func NewTalkServiceStartUpdateVerificationArgs() *TalkServiceStartUpdateVerificationArgs {
  return &TalkServiceStartUpdateVerificationArgs{}
}


func (p *TalkServiceStartUpdateVerificationArgs) GetRegion() string {
  return p.Region
}

func (p *TalkServiceStartUpdateVerificationArgs) GetCarrier() Carrier {
  return p.Carrier
}

func (p *TalkServiceStartUpdateVerificationArgs) GetPhone() string {
  return p.Phone
}

func (p *TalkServiceStartUpdateVerificationArgs) GetUdidHash() string {
  return p.UdidHash
}
var TalkServiceStartUpdateVerificationArgs_DeviceInfo_DEFAULT *DeviceInfo
func (p *TalkServiceStartUpdateVerificationArgs) GetDeviceInfo() *DeviceInfo {
  if !p.IsSetDeviceInfo() {
    return TalkServiceStartUpdateVerificationArgs_DeviceInfo_DEFAULT
  }
return p.DeviceInfo
}

func (p *TalkServiceStartUpdateVerificationArgs) GetNetworkCode() string {
  return p.NetworkCode
}

func (p *TalkServiceStartUpdateVerificationArgs) GetLocale() string {
  return p.Locale
}
var TalkServiceStartUpdateVerificationArgs_SimInfo_DEFAULT *SIMInfo
func (p *TalkServiceStartUpdateVerificationArgs) GetSimInfo() *SIMInfo {
  if !p.IsSetSimInfo() {
    return TalkServiceStartUpdateVerificationArgs_SimInfo_DEFAULT
  }
return p.SimInfo
}
func (p *TalkServiceStartUpdateVerificationArgs) IsSetDeviceInfo() bool {
  return p.DeviceInfo != nil
}

func (p *TalkServiceStartUpdateVerificationArgs) IsSetSimInfo() bool {
  return p.SimInfo != nil
}

func (p *TalkServiceStartUpdateVerificationArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField9(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceStartUpdateVerificationArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Region = v
}
  return nil
}

func (p *TalkServiceStartUpdateVerificationArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := Carrier(v)
  p.Carrier = temp
}
  return nil
}

func (p *TalkServiceStartUpdateVerificationArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Phone = v
}
  return nil
}

func (p *TalkServiceStartUpdateVerificationArgs)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.UdidHash = v
}
  return nil
}

func (p *TalkServiceStartUpdateVerificationArgs)  ReadField6(iprot thrift.TProtocol) error {
  p.DeviceInfo = &DeviceInfo{}
  if err := p.DeviceInfo.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.DeviceInfo), err)
  }
  return nil
}

func (p *TalkServiceStartUpdateVerificationArgs)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.NetworkCode = v
}
  return nil
}

func (p *TalkServiceStartUpdateVerificationArgs)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.Locale = v
}
  return nil
}

func (p *TalkServiceStartUpdateVerificationArgs)  ReadField9(iprot thrift.TProtocol) error {
  p.SimInfo = &SIMInfo{}
  if err := p.SimInfo.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SimInfo), err)
  }
  return nil
}

func (p *TalkServiceStartUpdateVerificationArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("startUpdateVerification_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceStartUpdateVerificationArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("region", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:region: ", p), err) }
  if err := oprot.WriteString(string(p.Region)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.region (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:region: ", p), err) }
  return err
}

func (p *TalkServiceStartUpdateVerificationArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("carrier", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:carrier: ", p), err) }
  if err := oprot.WriteI32(int32(p.Carrier)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.carrier (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:carrier: ", p), err) }
  return err
}

func (p *TalkServiceStartUpdateVerificationArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("phone", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:phone: ", p), err) }
  if err := oprot.WriteString(string(p.Phone)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.phone (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:phone: ", p), err) }
  return err
}

func (p *TalkServiceStartUpdateVerificationArgs) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("udidHash", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:udidHash: ", p), err) }
  if err := oprot.WriteString(string(p.UdidHash)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.udidHash (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:udidHash: ", p), err) }
  return err
}

func (p *TalkServiceStartUpdateVerificationArgs) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("deviceInfo", thrift.STRUCT, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:deviceInfo: ", p), err) }
  if err := p.DeviceInfo.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.DeviceInfo), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:deviceInfo: ", p), err) }
  return err
}

func (p *TalkServiceStartUpdateVerificationArgs) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("networkCode", thrift.STRING, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:networkCode: ", p), err) }
  if err := oprot.WriteString(string(p.NetworkCode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.networkCode (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:networkCode: ", p), err) }
  return err
}

func (p *TalkServiceStartUpdateVerificationArgs) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("locale", thrift.STRING, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:locale: ", p), err) }
  if err := oprot.WriteString(string(p.Locale)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.locale (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:locale: ", p), err) }
  return err
}

func (p *TalkServiceStartUpdateVerificationArgs) writeField9(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("simInfo", thrift.STRUCT, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:simInfo: ", p), err) }
  if err := p.SimInfo.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SimInfo), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:simInfo: ", p), err) }
  return err
}

func (p *TalkServiceStartUpdateVerificationArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceStartUpdateVerificationArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceStartUpdateVerificationResult struct {
  Success *VerificationSessionData `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceStartUpdateVerificationResult() *TalkServiceStartUpdateVerificationResult {
  return &TalkServiceStartUpdateVerificationResult{}
}

var TalkServiceStartUpdateVerificationResult_Success_DEFAULT *VerificationSessionData
func (p *TalkServiceStartUpdateVerificationResult) GetSuccess() *VerificationSessionData {
  if !p.IsSetSuccess() {
    return TalkServiceStartUpdateVerificationResult_Success_DEFAULT
  }
return p.Success
}
var TalkServiceStartUpdateVerificationResult_E_DEFAULT *TalkException
func (p *TalkServiceStartUpdateVerificationResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceStartUpdateVerificationResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceStartUpdateVerificationResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceStartUpdateVerificationResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceStartUpdateVerificationResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceStartUpdateVerificationResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &VerificationSessionData{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TalkServiceStartUpdateVerificationResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceStartUpdateVerificationResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("startUpdateVerification_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceStartUpdateVerificationResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceStartUpdateVerificationResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceStartUpdateVerificationResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceStartUpdateVerificationResult(%+v)", *p)
}

// Attributes:
//  - Region
//  - Carrier
//  - Phone
//  - UdidHash
//  - DeviceInfo
//  - NetworkCode
//  - Mid
//  - Locale
//  - SimInfo
//  - OldUdidHash
type TalkServiceStartVerificationArgs struct {
  // unused field # 1
  Region string `thrift:"region,2" db:"region" json:"region"`
  Carrier Carrier `thrift:"carrier,3" db:"carrier" json:"carrier"`
  Phone string `thrift:"phone,4" db:"phone" json:"phone"`
  UdidHash string `thrift:"udidHash,5" db:"udidHash" json:"udidHash"`
  DeviceInfo *DeviceInfo `thrift:"deviceInfo,6" db:"deviceInfo" json:"deviceInfo"`
  NetworkCode string `thrift:"networkCode,7" db:"networkCode" json:"networkCode"`
  Mid string `thrift:"mid,8" db:"mid" json:"mid"`
  Locale string `thrift:"locale,9" db:"locale" json:"locale"`
  SimInfo *SIMInfo `thrift:"simInfo,10" db:"simInfo" json:"simInfo"`
  OldUdidHash string `thrift:"oldUdidHash,11" db:"oldUdidHash" json:"oldUdidHash"`
}

func NewTalkServiceStartVerificationArgs() *TalkServiceStartVerificationArgs {
  return &TalkServiceStartVerificationArgs{}
}


func (p *TalkServiceStartVerificationArgs) GetRegion() string {
  return p.Region
}

func (p *TalkServiceStartVerificationArgs) GetCarrier() Carrier {
  return p.Carrier
}

func (p *TalkServiceStartVerificationArgs) GetPhone() string {
  return p.Phone
}

func (p *TalkServiceStartVerificationArgs) GetUdidHash() string {
  return p.UdidHash
}
var TalkServiceStartVerificationArgs_DeviceInfo_DEFAULT *DeviceInfo
func (p *TalkServiceStartVerificationArgs) GetDeviceInfo() *DeviceInfo {
  if !p.IsSetDeviceInfo() {
    return TalkServiceStartVerificationArgs_DeviceInfo_DEFAULT
  }
return p.DeviceInfo
}

func (p *TalkServiceStartVerificationArgs) GetNetworkCode() string {
  return p.NetworkCode
}

func (p *TalkServiceStartVerificationArgs) GetMid() string {
  return p.Mid
}

func (p *TalkServiceStartVerificationArgs) GetLocale() string {
  return p.Locale
}
var TalkServiceStartVerificationArgs_SimInfo_DEFAULT *SIMInfo
func (p *TalkServiceStartVerificationArgs) GetSimInfo() *SIMInfo {
  if !p.IsSetSimInfo() {
    return TalkServiceStartVerificationArgs_SimInfo_DEFAULT
  }
return p.SimInfo
}

func (p *TalkServiceStartVerificationArgs) GetOldUdidHash() string {
  return p.OldUdidHash
}
func (p *TalkServiceStartVerificationArgs) IsSetDeviceInfo() bool {
  return p.DeviceInfo != nil
}

func (p *TalkServiceStartVerificationArgs) IsSetSimInfo() bool {
  return p.SimInfo != nil
}

func (p *TalkServiceStartVerificationArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField9(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField10(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField11(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceStartVerificationArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Region = v
}
  return nil
}

func (p *TalkServiceStartVerificationArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := Carrier(v)
  p.Carrier = temp
}
  return nil
}

func (p *TalkServiceStartVerificationArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Phone = v
}
  return nil
}

func (p *TalkServiceStartVerificationArgs)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.UdidHash = v
}
  return nil
}

func (p *TalkServiceStartVerificationArgs)  ReadField6(iprot thrift.TProtocol) error {
  p.DeviceInfo = &DeviceInfo{}
  if err := p.DeviceInfo.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.DeviceInfo), err)
  }
  return nil
}

func (p *TalkServiceStartVerificationArgs)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.NetworkCode = v
}
  return nil
}

func (p *TalkServiceStartVerificationArgs)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.Mid = v
}
  return nil
}

func (p *TalkServiceStartVerificationArgs)  ReadField9(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.Locale = v
}
  return nil
}

func (p *TalkServiceStartVerificationArgs)  ReadField10(iprot thrift.TProtocol) error {
  p.SimInfo = &SIMInfo{}
  if err := p.SimInfo.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SimInfo), err)
  }
  return nil
}

func (p *TalkServiceStartVerificationArgs)  ReadField11(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.OldUdidHash = v
}
  return nil
}

func (p *TalkServiceStartVerificationArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("startVerification_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField11(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceStartVerificationArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("region", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:region: ", p), err) }
  if err := oprot.WriteString(string(p.Region)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.region (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:region: ", p), err) }
  return err
}

func (p *TalkServiceStartVerificationArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("carrier", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:carrier: ", p), err) }
  if err := oprot.WriteI32(int32(p.Carrier)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.carrier (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:carrier: ", p), err) }
  return err
}

func (p *TalkServiceStartVerificationArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("phone", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:phone: ", p), err) }
  if err := oprot.WriteString(string(p.Phone)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.phone (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:phone: ", p), err) }
  return err
}

func (p *TalkServiceStartVerificationArgs) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("udidHash", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:udidHash: ", p), err) }
  if err := oprot.WriteString(string(p.UdidHash)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.udidHash (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:udidHash: ", p), err) }
  return err
}

func (p *TalkServiceStartVerificationArgs) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("deviceInfo", thrift.STRUCT, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:deviceInfo: ", p), err) }
  if err := p.DeviceInfo.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.DeviceInfo), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:deviceInfo: ", p), err) }
  return err
}

func (p *TalkServiceStartVerificationArgs) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("networkCode", thrift.STRING, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:networkCode: ", p), err) }
  if err := oprot.WriteString(string(p.NetworkCode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.networkCode (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:networkCode: ", p), err) }
  return err
}

func (p *TalkServiceStartVerificationArgs) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("mid", thrift.STRING, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:mid: ", p), err) }
  if err := oprot.WriteString(string(p.Mid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.mid (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:mid: ", p), err) }
  return err
}

func (p *TalkServiceStartVerificationArgs) writeField9(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("locale", thrift.STRING, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:locale: ", p), err) }
  if err := oprot.WriteString(string(p.Locale)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.locale (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:locale: ", p), err) }
  return err
}

func (p *TalkServiceStartVerificationArgs) writeField10(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("simInfo", thrift.STRUCT, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:simInfo: ", p), err) }
  if err := p.SimInfo.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SimInfo), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:simInfo: ", p), err) }
  return err
}

func (p *TalkServiceStartVerificationArgs) writeField11(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("oldUdidHash", thrift.STRING, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:oldUdidHash: ", p), err) }
  if err := oprot.WriteString(string(p.OldUdidHash)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.oldUdidHash (11) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:oldUdidHash: ", p), err) }
  return err
}

func (p *TalkServiceStartVerificationArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceStartVerificationArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceStartVerificationResult struct {
  Success *VerificationSessionData `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceStartVerificationResult() *TalkServiceStartVerificationResult {
  return &TalkServiceStartVerificationResult{}
}

var TalkServiceStartVerificationResult_Success_DEFAULT *VerificationSessionData
func (p *TalkServiceStartVerificationResult) GetSuccess() *VerificationSessionData {
  if !p.IsSetSuccess() {
    return TalkServiceStartVerificationResult_Success_DEFAULT
  }
return p.Success
}
var TalkServiceStartVerificationResult_E_DEFAULT *TalkException
func (p *TalkServiceStartVerificationResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceStartVerificationResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceStartVerificationResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceStartVerificationResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceStartVerificationResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceStartVerificationResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &VerificationSessionData{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TalkServiceStartVerificationResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceStartVerificationResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("startVerification_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceStartVerificationResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceStartVerificationResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceStartVerificationResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceStartVerificationResult(%+v)", *p)
}

// Attributes:
//  - SessionId
//  - Method
type TalkServiceChangeVerificationMethodArgs struct {
  // unused field # 1
  SessionId string `thrift:"sessionId,2" db:"sessionId" json:"sessionId"`
  Method Y30 `thrift:"method,3" db:"method" json:"method"`
}

func NewTalkServiceChangeVerificationMethodArgs() *TalkServiceChangeVerificationMethodArgs {
  return &TalkServiceChangeVerificationMethodArgs{}
}


func (p *TalkServiceChangeVerificationMethodArgs) GetSessionId() string {
  return p.SessionId
}

func (p *TalkServiceChangeVerificationMethodArgs) GetMethod() Y30 {
  return p.Method
}
func (p *TalkServiceChangeVerificationMethodArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceChangeVerificationMethodArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.SessionId = v
}
  return nil
}

func (p *TalkServiceChangeVerificationMethodArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := Y30(v)
  p.Method = temp
}
  return nil
}

func (p *TalkServiceChangeVerificationMethodArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("changeVerificationMethod_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceChangeVerificationMethodArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("sessionId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:sessionId: ", p), err) }
  if err := oprot.WriteString(string(p.SessionId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sessionId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:sessionId: ", p), err) }
  return err
}

func (p *TalkServiceChangeVerificationMethodArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("method", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:method: ", p), err) }
  if err := oprot.WriteI32(int32(p.Method)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.method (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:method: ", p), err) }
  return err
}

func (p *TalkServiceChangeVerificationMethodArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceChangeVerificationMethodArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceChangeVerificationMethodResult struct {
  Success *VerificationSessionData `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceChangeVerificationMethodResult() *TalkServiceChangeVerificationMethodResult {
  return &TalkServiceChangeVerificationMethodResult{}
}

var TalkServiceChangeVerificationMethodResult_Success_DEFAULT *VerificationSessionData
func (p *TalkServiceChangeVerificationMethodResult) GetSuccess() *VerificationSessionData {
  if !p.IsSetSuccess() {
    return TalkServiceChangeVerificationMethodResult_Success_DEFAULT
  }
return p.Success
}
var TalkServiceChangeVerificationMethodResult_E_DEFAULT *TalkException
func (p *TalkServiceChangeVerificationMethodResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceChangeVerificationMethodResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceChangeVerificationMethodResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceChangeVerificationMethodResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceChangeVerificationMethodResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceChangeVerificationMethodResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &VerificationSessionData{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TalkServiceChangeVerificationMethodResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceChangeVerificationMethodResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("changeVerificationMethod_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceChangeVerificationMethodResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceChangeVerificationMethodResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceChangeVerificationMethodResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceChangeVerificationMethodResult(%+v)", *p)
}

type TalkServiceGetEncryptedIdentityV3Args struct {
}

func NewTalkServiceGetEncryptedIdentityV3Args() *TalkServiceGetEncryptedIdentityV3Args {
  return &TalkServiceGetEncryptedIdentityV3Args{}
}

func (p *TalkServiceGetEncryptedIdentityV3Args) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetEncryptedIdentityV3Args) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getEncryptedIdentityV3_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetEncryptedIdentityV3Args) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetEncryptedIdentityV3Args(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetEncryptedIdentityV3Result struct {
  Success *GetEncryptedIdentityV3Response `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetEncryptedIdentityV3Result() *TalkServiceGetEncryptedIdentityV3Result {
  return &TalkServiceGetEncryptedIdentityV3Result{}
}

var TalkServiceGetEncryptedIdentityV3Result_Success_DEFAULT *GetEncryptedIdentityV3Response
func (p *TalkServiceGetEncryptedIdentityV3Result) GetSuccess() *GetEncryptedIdentityV3Response {
  if !p.IsSetSuccess() {
    return TalkServiceGetEncryptedIdentityV3Result_Success_DEFAULT
  }
return p.Success
}
var TalkServiceGetEncryptedIdentityV3Result_E_DEFAULT *TalkException
func (p *TalkServiceGetEncryptedIdentityV3Result) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceGetEncryptedIdentityV3Result_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceGetEncryptedIdentityV3Result) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceGetEncryptedIdentityV3Result) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceGetEncryptedIdentityV3Result) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetEncryptedIdentityV3Result)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &GetEncryptedIdentityV3Response{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TalkServiceGetEncryptedIdentityV3Result)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceGetEncryptedIdentityV3Result) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getEncryptedIdentityV3_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetEncryptedIdentityV3Result) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetEncryptedIdentityV3Result) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetEncryptedIdentityV3Result) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetEncryptedIdentityV3Result(%+v)", *p)
}

// Attributes:
//  - KeyVersion
//  - ChatMid
//  - GroupKeyId
type TalkServiceGetE2EEGroupSharedKeyArgs struct {
  // unused field # 1
  KeyVersion int32 `thrift:"keyVersion,2" db:"keyVersion" json:"keyVersion"`
  ChatMid string `thrift:"chatMid,3" db:"chatMid" json:"chatMid"`
  GroupKeyId int32 `thrift:"groupKeyId,4" db:"groupKeyId" json:"groupKeyId"`
}

func NewTalkServiceGetE2EEGroupSharedKeyArgs() *TalkServiceGetE2EEGroupSharedKeyArgs {
  return &TalkServiceGetE2EEGroupSharedKeyArgs{}
}


func (p *TalkServiceGetE2EEGroupSharedKeyArgs) GetKeyVersion() int32 {
  return p.KeyVersion
}

func (p *TalkServiceGetE2EEGroupSharedKeyArgs) GetChatMid() string {
  return p.ChatMid
}

func (p *TalkServiceGetE2EEGroupSharedKeyArgs) GetGroupKeyId() int32 {
  return p.GroupKeyId
}
func (p *TalkServiceGetE2EEGroupSharedKeyArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetE2EEGroupSharedKeyArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.KeyVersion = v
}
  return nil
}

func (p *TalkServiceGetE2EEGroupSharedKeyArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.ChatMid = v
}
  return nil
}

func (p *TalkServiceGetE2EEGroupSharedKeyArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.GroupKeyId = v
}
  return nil
}

func (p *TalkServiceGetE2EEGroupSharedKeyArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getE2EEGroupSharedKey_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetE2EEGroupSharedKeyArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("keyVersion", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:keyVersion: ", p), err) }
  if err := oprot.WriteI32(int32(p.KeyVersion)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.keyVersion (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:keyVersion: ", p), err) }
  return err
}

func (p *TalkServiceGetE2EEGroupSharedKeyArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("chatMid", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:chatMid: ", p), err) }
  if err := oprot.WriteString(string(p.ChatMid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.chatMid (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:chatMid: ", p), err) }
  return err
}

func (p *TalkServiceGetE2EEGroupSharedKeyArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("groupKeyId", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:groupKeyId: ", p), err) }
  if err := oprot.WriteI32(int32(p.GroupKeyId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.groupKeyId (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:groupKeyId: ", p), err) }
  return err
}

func (p *TalkServiceGetE2EEGroupSharedKeyArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetE2EEGroupSharedKeyArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetE2EEGroupSharedKeyResult struct {
  Success *E2EEGroupSharedKey `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetE2EEGroupSharedKeyResult() *TalkServiceGetE2EEGroupSharedKeyResult {
  return &TalkServiceGetE2EEGroupSharedKeyResult{}
}

var TalkServiceGetE2EEGroupSharedKeyResult_Success_DEFAULT *E2EEGroupSharedKey
func (p *TalkServiceGetE2EEGroupSharedKeyResult) GetSuccess() *E2EEGroupSharedKey {
  if !p.IsSetSuccess() {
    return TalkServiceGetE2EEGroupSharedKeyResult_Success_DEFAULT
  }
return p.Success
}
var TalkServiceGetE2EEGroupSharedKeyResult_E_DEFAULT *TalkException
func (p *TalkServiceGetE2EEGroupSharedKeyResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceGetE2EEGroupSharedKeyResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceGetE2EEGroupSharedKeyResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceGetE2EEGroupSharedKeyResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceGetE2EEGroupSharedKeyResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetE2EEGroupSharedKeyResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &E2EEGroupSharedKey{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TalkServiceGetE2EEGroupSharedKeyResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceGetE2EEGroupSharedKeyResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getE2EEGroupSharedKey_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetE2EEGroupSharedKeyResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetE2EEGroupSharedKeyResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetE2EEGroupSharedKeyResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetE2EEGroupSharedKeyResult(%+v)", *p)
}

// Attributes:
//  - KeyVersion
//  - ChatMid
//  - Members
//  - KeyIds
//  - EncryptedSharedKeys
type TalkServiceRegisterE2EEGroupKeyArgs struct {
  // unused field # 1
  KeyVersion int32 `thrift:"keyVersion,2" db:"keyVersion" json:"keyVersion"`
  ChatMid string `thrift:"chatMid,3" db:"chatMid" json:"chatMid"`
  Members []string `thrift:"members,4" db:"members" json:"members"`
  KeyIds []int32 `thrift:"keyIds,5" db:"keyIds" json:"keyIds"`
  EncryptedSharedKeys [][]byte `thrift:"encryptedSharedKeys,6" db:"encryptedSharedKeys" json:"encryptedSharedKeys"`
}

func NewTalkServiceRegisterE2EEGroupKeyArgs() *TalkServiceRegisterE2EEGroupKeyArgs {
  return &TalkServiceRegisterE2EEGroupKeyArgs{}
}


func (p *TalkServiceRegisterE2EEGroupKeyArgs) GetKeyVersion() int32 {
  return p.KeyVersion
}

func (p *TalkServiceRegisterE2EEGroupKeyArgs) GetChatMid() string {
  return p.ChatMid
}

func (p *TalkServiceRegisterE2EEGroupKeyArgs) GetMembers() []string {
  return p.Members
}

func (p *TalkServiceRegisterE2EEGroupKeyArgs) GetKeyIds() []int32 {
  return p.KeyIds
}

func (p *TalkServiceRegisterE2EEGroupKeyArgs) GetEncryptedSharedKeys() [][]byte {
  return p.EncryptedSharedKeys
}
func (p *TalkServiceRegisterE2EEGroupKeyArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceRegisterE2EEGroupKeyArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.KeyVersion = v
}
  return nil
}

func (p *TalkServiceRegisterE2EEGroupKeyArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.ChatMid = v
}
  return nil
}

func (p *TalkServiceRegisterE2EEGroupKeyArgs)  ReadField4(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Members =  tSlice
  for i := 0; i < size; i ++ {
var _elem328 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem328 = v
}
    p.Members = append(p.Members, _elem328)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TalkServiceRegisterE2EEGroupKeyArgs)  ReadField5(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int32, 0, size)
  p.KeyIds =  tSlice
  for i := 0; i < size; i ++ {
var _elem329 int32
    if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem329 = v
}
    p.KeyIds = append(p.KeyIds, _elem329)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TalkServiceRegisterE2EEGroupKeyArgs)  ReadField6(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([][]byte, 0, size)
  p.EncryptedSharedKeys =  tSlice
  for i := 0; i < size; i ++ {
var _elem330 []byte
    if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem330 = v
}
    p.EncryptedSharedKeys = append(p.EncryptedSharedKeys, _elem330)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TalkServiceRegisterE2EEGroupKeyArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("registerE2EEGroupKey_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceRegisterE2EEGroupKeyArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("keyVersion", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:keyVersion: ", p), err) }
  if err := oprot.WriteI32(int32(p.KeyVersion)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.keyVersion (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:keyVersion: ", p), err) }
  return err
}

func (p *TalkServiceRegisterE2EEGroupKeyArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("chatMid", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:chatMid: ", p), err) }
  if err := oprot.WriteString(string(p.ChatMid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.chatMid (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:chatMid: ", p), err) }
  return err
}

func (p *TalkServiceRegisterE2EEGroupKeyArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("members", thrift.LIST, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:members: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.Members)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Members {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:members: ", p), err) }
  return err
}

func (p *TalkServiceRegisterE2EEGroupKeyArgs) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("keyIds", thrift.LIST, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:keyIds: ", p), err) }
  if err := oprot.WriteListBegin(thrift.I32, len(p.KeyIds)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.KeyIds {
    if err := oprot.WriteI32(int32(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:keyIds: ", p), err) }
  return err
}

func (p *TalkServiceRegisterE2EEGroupKeyArgs) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("encryptedSharedKeys", thrift.LIST, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:encryptedSharedKeys: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.EncryptedSharedKeys)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.EncryptedSharedKeys {
    if err := oprot.WriteBinary(v); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:encryptedSharedKeys: ", p), err) }
  return err
}

func (p *TalkServiceRegisterE2EEGroupKeyArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceRegisterE2EEGroupKeyArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceRegisterE2EEGroupKeyResult struct {
  Success *E2EEGroupSharedKey `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceRegisterE2EEGroupKeyResult() *TalkServiceRegisterE2EEGroupKeyResult {
  return &TalkServiceRegisterE2EEGroupKeyResult{}
}

var TalkServiceRegisterE2EEGroupKeyResult_Success_DEFAULT *E2EEGroupSharedKey
func (p *TalkServiceRegisterE2EEGroupKeyResult) GetSuccess() *E2EEGroupSharedKey {
  if !p.IsSetSuccess() {
    return TalkServiceRegisterE2EEGroupKeyResult_Success_DEFAULT
  }
return p.Success
}
var TalkServiceRegisterE2EEGroupKeyResult_E_DEFAULT *TalkException
func (p *TalkServiceRegisterE2EEGroupKeyResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceRegisterE2EEGroupKeyResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceRegisterE2EEGroupKeyResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceRegisterE2EEGroupKeyResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceRegisterE2EEGroupKeyResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceRegisterE2EEGroupKeyResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &E2EEGroupSharedKey{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TalkServiceRegisterE2EEGroupKeyResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceRegisterE2EEGroupKeyResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("registerE2EEGroupKey_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceRegisterE2EEGroupKeyResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceRegisterE2EEGroupKeyResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceRegisterE2EEGroupKeyResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceRegisterE2EEGroupKeyResult(%+v)", *p)
}

// Attributes:
//  - ExpirationTime
//  - MaxUseCount
type TalkServiceGenerateUserTicketArgs struct {
  // unused fields # 1 to 2
  ExpirationTime int64 `thrift:"expirationTime,3" db:"expirationTime" json:"expirationTime"`
  MaxUseCount int32 `thrift:"maxUseCount,4" db:"maxUseCount" json:"maxUseCount"`
}

func NewTalkServiceGenerateUserTicketArgs() *TalkServiceGenerateUserTicketArgs {
  return &TalkServiceGenerateUserTicketArgs{}
}


func (p *TalkServiceGenerateUserTicketArgs) GetExpirationTime() int64 {
  return p.ExpirationTime
}

func (p *TalkServiceGenerateUserTicketArgs) GetMaxUseCount() int32 {
  return p.MaxUseCount
}
func (p *TalkServiceGenerateUserTicketArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGenerateUserTicketArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.ExpirationTime = v
}
  return nil
}

func (p *TalkServiceGenerateUserTicketArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.MaxUseCount = v
}
  return nil
}

func (p *TalkServiceGenerateUserTicketArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("generateUserTicket_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGenerateUserTicketArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("expirationTime", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:expirationTime: ", p), err) }
  if err := oprot.WriteI64(int64(p.ExpirationTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.expirationTime (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:expirationTime: ", p), err) }
  return err
}

func (p *TalkServiceGenerateUserTicketArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("maxUseCount", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:maxUseCount: ", p), err) }
  if err := oprot.WriteI32(int32(p.MaxUseCount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.maxUseCount (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:maxUseCount: ", p), err) }
  return err
}

func (p *TalkServiceGenerateUserTicketArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGenerateUserTicketArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGenerateUserTicketResult struct {
  Success *Ticket `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGenerateUserTicketResult() *TalkServiceGenerateUserTicketResult {
  return &TalkServiceGenerateUserTicketResult{}
}

var TalkServiceGenerateUserTicketResult_Success_DEFAULT *Ticket
func (p *TalkServiceGenerateUserTicketResult) GetSuccess() *Ticket {
  if !p.IsSetSuccess() {
    return TalkServiceGenerateUserTicketResult_Success_DEFAULT
  }
return p.Success
}
var TalkServiceGenerateUserTicketResult_E_DEFAULT *TalkException
func (p *TalkServiceGenerateUserTicketResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceGenerateUserTicketResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceGenerateUserTicketResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceGenerateUserTicketResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceGenerateUserTicketResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGenerateUserTicketResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &Ticket{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TalkServiceGenerateUserTicketResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceGenerateUserTicketResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("generateUserTicket_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGenerateUserTicketResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceGenerateUserTicketResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceGenerateUserTicketResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGenerateUserTicketResult(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - PublicKey
type TalkServiceRegisterE2EEPublicKeyArgs struct {
  ReqSeq int32 `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
  PublicKey *E2EEPublicKey `thrift:"publicKey,2" db:"publicKey" json:"publicKey"`
}

func NewTalkServiceRegisterE2EEPublicKeyArgs() *TalkServiceRegisterE2EEPublicKeyArgs {
  return &TalkServiceRegisterE2EEPublicKeyArgs{}
}


func (p *TalkServiceRegisterE2EEPublicKeyArgs) GetReqSeq() int32 {
  return p.ReqSeq
}
var TalkServiceRegisterE2EEPublicKeyArgs_PublicKey_DEFAULT *E2EEPublicKey
func (p *TalkServiceRegisterE2EEPublicKeyArgs) GetPublicKey() *E2EEPublicKey {
  if !p.IsSetPublicKey() {
    return TalkServiceRegisterE2EEPublicKeyArgs_PublicKey_DEFAULT
  }
return p.PublicKey
}
func (p *TalkServiceRegisterE2EEPublicKeyArgs) IsSetPublicKey() bool {
  return p.PublicKey != nil
}

func (p *TalkServiceRegisterE2EEPublicKeyArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceRegisterE2EEPublicKeyArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqSeq = v
}
  return nil
}

func (p *TalkServiceRegisterE2EEPublicKeyArgs)  ReadField2(iprot thrift.TProtocol) error {
  p.PublicKey = &E2EEPublicKey{}
  if err := p.PublicKey.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.PublicKey), err)
  }
  return nil
}

func (p *TalkServiceRegisterE2EEPublicKeyArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("registerE2EEPublicKey_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceRegisterE2EEPublicKeyArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("reqSeq", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err) }
  if err := oprot.WriteI32(int32(p.ReqSeq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err) }
  return err
}

func (p *TalkServiceRegisterE2EEPublicKeyArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("publicKey", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:publicKey: ", p), err) }
  if err := p.PublicKey.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.PublicKey), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:publicKey: ", p), err) }
  return err
}

func (p *TalkServiceRegisterE2EEPublicKeyArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceRegisterE2EEPublicKeyArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceRegisterE2EEPublicKeyResult struct {
  Success *E2EEPublicKey `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceRegisterE2EEPublicKeyResult() *TalkServiceRegisterE2EEPublicKeyResult {
  return &TalkServiceRegisterE2EEPublicKeyResult{}
}

var TalkServiceRegisterE2EEPublicKeyResult_Success_DEFAULT *E2EEPublicKey
func (p *TalkServiceRegisterE2EEPublicKeyResult) GetSuccess() *E2EEPublicKey {
  if !p.IsSetSuccess() {
    return TalkServiceRegisterE2EEPublicKeyResult_Success_DEFAULT
  }
return p.Success
}
var TalkServiceRegisterE2EEPublicKeyResult_E_DEFAULT *TalkException
func (p *TalkServiceRegisterE2EEPublicKeyResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceRegisterE2EEPublicKeyResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceRegisterE2EEPublicKeyResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceRegisterE2EEPublicKeyResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceRegisterE2EEPublicKeyResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceRegisterE2EEPublicKeyResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &E2EEPublicKey{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TalkServiceRegisterE2EEPublicKeyResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceRegisterE2EEPublicKeyResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("registerE2EEPublicKey_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceRegisterE2EEPublicKeyResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceRegisterE2EEPublicKeyResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceRegisterE2EEPublicKeyResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceRegisterE2EEPublicKeyResult(%+v)", *p)
}

// Attributes:
//  - Mid
//  - KeyVersion
//  - KeyId
type TalkServiceGetE2EEPublicKeyArgs struct {
  // unused field # 1
  Mid string `thrift:"mid,2" db:"mid" json:"mid"`
  KeyVersion int32 `thrift:"keyVersion,3" db:"keyVersion" json:"keyVersion"`
  KeyId int32 `thrift:"keyId,4" db:"keyId" json:"keyId"`
}

func NewTalkServiceGetE2EEPublicKeyArgs() *TalkServiceGetE2EEPublicKeyArgs {
  return &TalkServiceGetE2EEPublicKeyArgs{}
}


func (p *TalkServiceGetE2EEPublicKeyArgs) GetMid() string {
  return p.Mid
}

func (p *TalkServiceGetE2EEPublicKeyArgs) GetKeyVersion() int32 {
  return p.KeyVersion
}

func (p *TalkServiceGetE2EEPublicKeyArgs) GetKeyId() int32 {
  return p.KeyId
}
func (p *TalkServiceGetE2EEPublicKeyArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetE2EEPublicKeyArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Mid = v
}
  return nil
}

func (p *TalkServiceGetE2EEPublicKeyArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.KeyVersion = v
}
  return nil
}

func (p *TalkServiceGetE2EEPublicKeyArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.KeyId = v
}
  return nil
}

func (p *TalkServiceGetE2EEPublicKeyArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getE2EEPublicKey_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetE2EEPublicKeyArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("mid", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:mid: ", p), err) }
  if err := oprot.WriteString(string(p.Mid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.mid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:mid: ", p), err) }
  return err
}

func (p *TalkServiceGetE2EEPublicKeyArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("keyVersion", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:keyVersion: ", p), err) }
  if err := oprot.WriteI32(int32(p.KeyVersion)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.keyVersion (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:keyVersion: ", p), err) }
  return err
}

func (p *TalkServiceGetE2EEPublicKeyArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("keyId", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:keyId: ", p), err) }
  if err := oprot.WriteI32(int32(p.KeyId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.keyId (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:keyId: ", p), err) }
  return err
}

func (p *TalkServiceGetE2EEPublicKeyArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetE2EEPublicKeyArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetE2EEPublicKeyResult struct {
  Success *E2EEPublicKey `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetE2EEPublicKeyResult() *TalkServiceGetE2EEPublicKeyResult {
  return &TalkServiceGetE2EEPublicKeyResult{}
}

var TalkServiceGetE2EEPublicKeyResult_Success_DEFAULT *E2EEPublicKey
func (p *TalkServiceGetE2EEPublicKeyResult) GetSuccess() *E2EEPublicKey {
  if !p.IsSetSuccess() {
    return TalkServiceGetE2EEPublicKeyResult_Success_DEFAULT
  }
return p.Success
}
var TalkServiceGetE2EEPublicKeyResult_E_DEFAULT *TalkException
func (p *TalkServiceGetE2EEPublicKeyResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceGetE2EEPublicKeyResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceGetE2EEPublicKeyResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceGetE2EEPublicKeyResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceGetE2EEPublicKeyResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetE2EEPublicKeyResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &E2EEPublicKey{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TalkServiceGetE2EEPublicKeyResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceGetE2EEPublicKeyResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getE2EEPublicKey_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetE2EEPublicKeyResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetE2EEPublicKeyResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetE2EEPublicKeyResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetE2EEPublicKeyResult(%+v)", *p)
}

// Attributes:
//  - Provider
type TalkServiceGetRSAKeyInfoArgs struct {
  // unused field # 1
  Provider IdentityProvider `thrift:"provider,2" db:"provider" json:"provider"`
}

func NewTalkServiceGetRSAKeyInfoArgs() *TalkServiceGetRSAKeyInfoArgs {
  return &TalkServiceGetRSAKeyInfoArgs{}
}


func (p *TalkServiceGetRSAKeyInfoArgs) GetProvider() IdentityProvider {
  return p.Provider
}
func (p *TalkServiceGetRSAKeyInfoArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetRSAKeyInfoArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := IdentityProvider(v)
  p.Provider = temp
}
  return nil
}

func (p *TalkServiceGetRSAKeyInfoArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getRSAKeyInfo_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetRSAKeyInfoArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("provider", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:provider: ", p), err) }
  if err := oprot.WriteI32(int32(p.Provider)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.provider (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:provider: ", p), err) }
  return err
}

func (p *TalkServiceGetRSAKeyInfoArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetRSAKeyInfoArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetRSAKeyInfoResult struct {
  Success *RSAKey `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetRSAKeyInfoResult() *TalkServiceGetRSAKeyInfoResult {
  return &TalkServiceGetRSAKeyInfoResult{}
}

var TalkServiceGetRSAKeyInfoResult_Success_DEFAULT *RSAKey
func (p *TalkServiceGetRSAKeyInfoResult) GetSuccess() *RSAKey {
  if !p.IsSetSuccess() {
    return TalkServiceGetRSAKeyInfoResult_Success_DEFAULT
  }
return p.Success
}
var TalkServiceGetRSAKeyInfoResult_E_DEFAULT *TalkException
func (p *TalkServiceGetRSAKeyInfoResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceGetRSAKeyInfoResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceGetRSAKeyInfoResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceGetRSAKeyInfoResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceGetRSAKeyInfoResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetRSAKeyInfoResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &RSAKey{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TalkServiceGetRSAKeyInfoResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceGetRSAKeyInfoResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getRSAKeyInfo_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetRSAKeyInfoResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetRSAKeyInfoResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetRSAKeyInfoResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetRSAKeyInfoResult(%+v)", *p)
}

// Attributes:
//  - SnsIdType
//  - SnsAccessToken
//  - Region
//  - UdidHash
//  - DeviceInfo
//  - Mid
//  - MigrationPincodeSessionId
type TalkServiceRegisterWithSnsIdArgs struct {
  // unused field # 1
  SnsIdType C60759oi `thrift:"snsIdType,2" db:"snsIdType" json:"snsIdType"`
  SnsAccessToken string `thrift:"snsAccessToken,3" db:"snsAccessToken" json:"snsAccessToken"`
  Region string `thrift:"region,4" db:"region" json:"region"`
  UdidHash string `thrift:"udidHash,5" db:"udidHash" json:"udidHash"`
  DeviceInfo *DeviceInfo `thrift:"deviceInfo,6" db:"deviceInfo" json:"deviceInfo"`
  Mid string `thrift:"mid,7" db:"mid" json:"mid"`
  MigrationPincodeSessionId string `thrift:"migrationPincodeSessionId,8" db:"migrationPincodeSessionId" json:"migrationPincodeSessionId"`
}

func NewTalkServiceRegisterWithSnsIdArgs() *TalkServiceRegisterWithSnsIdArgs {
  return &TalkServiceRegisterWithSnsIdArgs{}
}


func (p *TalkServiceRegisterWithSnsIdArgs) GetSnsIdType() C60759oi {
  return p.SnsIdType
}

func (p *TalkServiceRegisterWithSnsIdArgs) GetSnsAccessToken() string {
  return p.SnsAccessToken
}

func (p *TalkServiceRegisterWithSnsIdArgs) GetRegion() string {
  return p.Region
}

func (p *TalkServiceRegisterWithSnsIdArgs) GetUdidHash() string {
  return p.UdidHash
}
var TalkServiceRegisterWithSnsIdArgs_DeviceInfo_DEFAULT *DeviceInfo
func (p *TalkServiceRegisterWithSnsIdArgs) GetDeviceInfo() *DeviceInfo {
  if !p.IsSetDeviceInfo() {
    return TalkServiceRegisterWithSnsIdArgs_DeviceInfo_DEFAULT
  }
return p.DeviceInfo
}

func (p *TalkServiceRegisterWithSnsIdArgs) GetMid() string {
  return p.Mid
}

func (p *TalkServiceRegisterWithSnsIdArgs) GetMigrationPincodeSessionId() string {
  return p.MigrationPincodeSessionId
}
func (p *TalkServiceRegisterWithSnsIdArgs) IsSetDeviceInfo() bool {
  return p.DeviceInfo != nil
}

func (p *TalkServiceRegisterWithSnsIdArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceRegisterWithSnsIdArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := C60759oi(v)
  p.SnsIdType = temp
}
  return nil
}

func (p *TalkServiceRegisterWithSnsIdArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.SnsAccessToken = v
}
  return nil
}

func (p *TalkServiceRegisterWithSnsIdArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Region = v
}
  return nil
}

func (p *TalkServiceRegisterWithSnsIdArgs)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.UdidHash = v
}
  return nil
}

func (p *TalkServiceRegisterWithSnsIdArgs)  ReadField6(iprot thrift.TProtocol) error {
  p.DeviceInfo = &DeviceInfo{}
  if err := p.DeviceInfo.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.DeviceInfo), err)
  }
  return nil
}

func (p *TalkServiceRegisterWithSnsIdArgs)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.Mid = v
}
  return nil
}

func (p *TalkServiceRegisterWithSnsIdArgs)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.MigrationPincodeSessionId = v
}
  return nil
}

func (p *TalkServiceRegisterWithSnsIdArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("registerWithSnsId_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceRegisterWithSnsIdArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("snsIdType", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:snsIdType: ", p), err) }
  if err := oprot.WriteI32(int32(p.SnsIdType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.snsIdType (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:snsIdType: ", p), err) }
  return err
}

func (p *TalkServiceRegisterWithSnsIdArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("snsAccessToken", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:snsAccessToken: ", p), err) }
  if err := oprot.WriteString(string(p.SnsAccessToken)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.snsAccessToken (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:snsAccessToken: ", p), err) }
  return err
}

func (p *TalkServiceRegisterWithSnsIdArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("region", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:region: ", p), err) }
  if err := oprot.WriteString(string(p.Region)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.region (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:region: ", p), err) }
  return err
}

func (p *TalkServiceRegisterWithSnsIdArgs) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("udidHash", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:udidHash: ", p), err) }
  if err := oprot.WriteString(string(p.UdidHash)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.udidHash (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:udidHash: ", p), err) }
  return err
}

func (p *TalkServiceRegisterWithSnsIdArgs) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("deviceInfo", thrift.STRUCT, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:deviceInfo: ", p), err) }
  if err := p.DeviceInfo.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.DeviceInfo), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:deviceInfo: ", p), err) }
  return err
}

func (p *TalkServiceRegisterWithSnsIdArgs) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("mid", thrift.STRING, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:mid: ", p), err) }
  if err := oprot.WriteString(string(p.Mid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.mid (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:mid: ", p), err) }
  return err
}

func (p *TalkServiceRegisterWithSnsIdArgs) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("migrationPincodeSessionId", thrift.STRING, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:migrationPincodeSessionId: ", p), err) }
  if err := oprot.WriteString(string(p.MigrationPincodeSessionId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.migrationPincodeSessionId (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:migrationPincodeSessionId: ", p), err) }
  return err
}

func (p *TalkServiceRegisterWithSnsIdArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceRegisterWithSnsIdArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceRegisterWithSnsIdResult struct {
  Success *RegisterWithSnsIdResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceRegisterWithSnsIdResult() *TalkServiceRegisterWithSnsIdResult {
  return &TalkServiceRegisterWithSnsIdResult{}
}

var TalkServiceRegisterWithSnsIdResult_Success_DEFAULT *RegisterWithSnsIdResult_
func (p *TalkServiceRegisterWithSnsIdResult) GetSuccess() *RegisterWithSnsIdResult_ {
  if !p.IsSetSuccess() {
    return TalkServiceRegisterWithSnsIdResult_Success_DEFAULT
  }
return p.Success
}
var TalkServiceRegisterWithSnsIdResult_E_DEFAULT *TalkException
func (p *TalkServiceRegisterWithSnsIdResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceRegisterWithSnsIdResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceRegisterWithSnsIdResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceRegisterWithSnsIdResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceRegisterWithSnsIdResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceRegisterWithSnsIdResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &RegisterWithSnsIdResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TalkServiceRegisterWithSnsIdResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceRegisterWithSnsIdResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("registerWithSnsId_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceRegisterWithSnsIdResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceRegisterWithSnsIdResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceRegisterWithSnsIdResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceRegisterWithSnsIdResult(%+v)", *p)
}

// Attributes:
//  - SnsIdType
//  - SnsAccessToken
//  - UdidHash
//  - MigrationPincodeSessionId
//  - OldUdidHash
type TalkServiceFindSnsIdUserStatusArgs struct {
  // unused field # 1
  SnsIdType C60759oi `thrift:"snsIdType,2" db:"snsIdType" json:"snsIdType"`
  SnsAccessToken string `thrift:"snsAccessToken,3" db:"snsAccessToken" json:"snsAccessToken"`
  UdidHash string `thrift:"udidHash,4" db:"udidHash" json:"udidHash"`
  MigrationPincodeSessionId string `thrift:"migrationPincodeSessionId,5" db:"migrationPincodeSessionId" json:"migrationPincodeSessionId"`
  OldUdidHash string `thrift:"oldUdidHash,6" db:"oldUdidHash" json:"oldUdidHash"`
}

func NewTalkServiceFindSnsIdUserStatusArgs() *TalkServiceFindSnsIdUserStatusArgs {
  return &TalkServiceFindSnsIdUserStatusArgs{}
}


func (p *TalkServiceFindSnsIdUserStatusArgs) GetSnsIdType() C60759oi {
  return p.SnsIdType
}

func (p *TalkServiceFindSnsIdUserStatusArgs) GetSnsAccessToken() string {
  return p.SnsAccessToken
}

func (p *TalkServiceFindSnsIdUserStatusArgs) GetUdidHash() string {
  return p.UdidHash
}

func (p *TalkServiceFindSnsIdUserStatusArgs) GetMigrationPincodeSessionId() string {
  return p.MigrationPincodeSessionId
}

func (p *TalkServiceFindSnsIdUserStatusArgs) GetOldUdidHash() string {
  return p.OldUdidHash
}
func (p *TalkServiceFindSnsIdUserStatusArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceFindSnsIdUserStatusArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := C60759oi(v)
  p.SnsIdType = temp
}
  return nil
}

func (p *TalkServiceFindSnsIdUserStatusArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.SnsAccessToken = v
}
  return nil
}

func (p *TalkServiceFindSnsIdUserStatusArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.UdidHash = v
}
  return nil
}

func (p *TalkServiceFindSnsIdUserStatusArgs)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.MigrationPincodeSessionId = v
}
  return nil
}

func (p *TalkServiceFindSnsIdUserStatusArgs)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.OldUdidHash = v
}
  return nil
}

func (p *TalkServiceFindSnsIdUserStatusArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("findSnsIdUserStatus_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceFindSnsIdUserStatusArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("snsIdType", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:snsIdType: ", p), err) }
  if err := oprot.WriteI32(int32(p.SnsIdType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.snsIdType (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:snsIdType: ", p), err) }
  return err
}

func (p *TalkServiceFindSnsIdUserStatusArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("snsAccessToken", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:snsAccessToken: ", p), err) }
  if err := oprot.WriteString(string(p.SnsAccessToken)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.snsAccessToken (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:snsAccessToken: ", p), err) }
  return err
}

func (p *TalkServiceFindSnsIdUserStatusArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("udidHash", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:udidHash: ", p), err) }
  if err := oprot.WriteString(string(p.UdidHash)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.udidHash (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:udidHash: ", p), err) }
  return err
}

func (p *TalkServiceFindSnsIdUserStatusArgs) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("migrationPincodeSessionId", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:migrationPincodeSessionId: ", p), err) }
  if err := oprot.WriteString(string(p.MigrationPincodeSessionId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.migrationPincodeSessionId (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:migrationPincodeSessionId: ", p), err) }
  return err
}

func (p *TalkServiceFindSnsIdUserStatusArgs) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("oldUdidHash", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:oldUdidHash: ", p), err) }
  if err := oprot.WriteString(string(p.OldUdidHash)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.oldUdidHash (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:oldUdidHash: ", p), err) }
  return err
}

func (p *TalkServiceFindSnsIdUserStatusArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceFindSnsIdUserStatusArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceFindSnsIdUserStatusResult struct {
  Success *SnsIdUserStatus `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceFindSnsIdUserStatusResult() *TalkServiceFindSnsIdUserStatusResult {
  return &TalkServiceFindSnsIdUserStatusResult{}
}

var TalkServiceFindSnsIdUserStatusResult_Success_DEFAULT *SnsIdUserStatus
func (p *TalkServiceFindSnsIdUserStatusResult) GetSuccess() *SnsIdUserStatus {
  if !p.IsSetSuccess() {
    return TalkServiceFindSnsIdUserStatusResult_Success_DEFAULT
  }
return p.Success
}
var TalkServiceFindSnsIdUserStatusResult_E_DEFAULT *TalkException
func (p *TalkServiceFindSnsIdUserStatusResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceFindSnsIdUserStatusResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceFindSnsIdUserStatusResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceFindSnsIdUserStatusResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceFindSnsIdUserStatusResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceFindSnsIdUserStatusResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &SnsIdUserStatus{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TalkServiceFindSnsIdUserStatusResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceFindSnsIdUserStatusResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("findSnsIdUserStatus_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceFindSnsIdUserStatusResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceFindSnsIdUserStatusResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceFindSnsIdUserStatusResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceFindSnsIdUserStatusResult(%+v)", *p)
}

// Attributes:
//  - ID
//  - Type
type TalkServiceGetContactRegistrationArgs struct {
  ID string `thrift:"id,1" db:"id" json:"id"`
  Type ContactType `thrift:"type,2" db:"type" json:"type"`
}

func NewTalkServiceGetContactRegistrationArgs() *TalkServiceGetContactRegistrationArgs {
  return &TalkServiceGetContactRegistrationArgs{}
}


func (p *TalkServiceGetContactRegistrationArgs) GetID() string {
  return p.ID
}

func (p *TalkServiceGetContactRegistrationArgs) GetType() ContactType {
  return p.Type
}
func (p *TalkServiceGetContactRegistrationArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetContactRegistrationArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *TalkServiceGetContactRegistrationArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := ContactType(v)
  p.Type = temp
}
  return nil
}

func (p *TalkServiceGetContactRegistrationArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getContactRegistration_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetContactRegistrationArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := oprot.WriteString(string(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *TalkServiceGetContactRegistrationArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("type", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:type: ", p), err) }
  if err := oprot.WriteI32(int32(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:type: ", p), err) }
  return err
}

func (p *TalkServiceGetContactRegistrationArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetContactRegistrationArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetContactRegistrationResult struct {
  Success *ContactRegistration `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetContactRegistrationResult() *TalkServiceGetContactRegistrationResult {
  return &TalkServiceGetContactRegistrationResult{}
}

var TalkServiceGetContactRegistrationResult_Success_DEFAULT *ContactRegistration
func (p *TalkServiceGetContactRegistrationResult) GetSuccess() *ContactRegistration {
  if !p.IsSetSuccess() {
    return TalkServiceGetContactRegistrationResult_Success_DEFAULT
  }
return p.Success
}
var TalkServiceGetContactRegistrationResult_E_DEFAULT *TalkException
func (p *TalkServiceGetContactRegistrationResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceGetContactRegistrationResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceGetContactRegistrationResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceGetContactRegistrationResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceGetContactRegistrationResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetContactRegistrationResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &ContactRegistration{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TalkServiceGetContactRegistrationResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceGetContactRegistrationResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getContactRegistration_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetContactRegistrationResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetContactRegistrationResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetContactRegistrationResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetContactRegistrationResult(%+v)", *p)
}

// Attributes:
//  - SessionId
//  - PinCode
//  - UdidHash
//  - MigrationPincodeSessionId
//  - OldUdidHash
type TalkServiceVerifyPhoneNumberArgs struct {
  // unused field # 1
  SessionId string `thrift:"sessionId,2" db:"sessionId" json:"sessionId"`
  PinCode string `thrift:"pinCode,3" db:"pinCode" json:"pinCode"`
  UdidHash string `thrift:"udidHash,4" db:"udidHash" json:"udidHash"`
  MigrationPincodeSessionId string `thrift:"migrationPincodeSessionId,5" db:"migrationPincodeSessionId" json:"migrationPincodeSessionId"`
  OldUdidHash string `thrift:"oldUdidHash,6" db:"oldUdidHash" json:"oldUdidHash"`
}

func NewTalkServiceVerifyPhoneNumberArgs() *TalkServiceVerifyPhoneNumberArgs {
  return &TalkServiceVerifyPhoneNumberArgs{}
}


func (p *TalkServiceVerifyPhoneNumberArgs) GetSessionId() string {
  return p.SessionId
}

func (p *TalkServiceVerifyPhoneNumberArgs) GetPinCode() string {
  return p.PinCode
}

func (p *TalkServiceVerifyPhoneNumberArgs) GetUdidHash() string {
  return p.UdidHash
}

func (p *TalkServiceVerifyPhoneNumberArgs) GetMigrationPincodeSessionId() string {
  return p.MigrationPincodeSessionId
}

func (p *TalkServiceVerifyPhoneNumberArgs) GetOldUdidHash() string {
  return p.OldUdidHash
}
func (p *TalkServiceVerifyPhoneNumberArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceVerifyPhoneNumberArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.SessionId = v
}
  return nil
}

func (p *TalkServiceVerifyPhoneNumberArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.PinCode = v
}
  return nil
}

func (p *TalkServiceVerifyPhoneNumberArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.UdidHash = v
}
  return nil
}

func (p *TalkServiceVerifyPhoneNumberArgs)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.MigrationPincodeSessionId = v
}
  return nil
}

func (p *TalkServiceVerifyPhoneNumberArgs)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.OldUdidHash = v
}
  return nil
}

func (p *TalkServiceVerifyPhoneNumberArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("verifyPhoneNumber_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceVerifyPhoneNumberArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("sessionId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:sessionId: ", p), err) }
  if err := oprot.WriteString(string(p.SessionId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sessionId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:sessionId: ", p), err) }
  return err
}

func (p *TalkServiceVerifyPhoneNumberArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("pinCode", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:pinCode: ", p), err) }
  if err := oprot.WriteString(string(p.PinCode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.pinCode (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:pinCode: ", p), err) }
  return err
}

func (p *TalkServiceVerifyPhoneNumberArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("udidHash", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:udidHash: ", p), err) }
  if err := oprot.WriteString(string(p.UdidHash)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.udidHash (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:udidHash: ", p), err) }
  return err
}

func (p *TalkServiceVerifyPhoneNumberArgs) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("migrationPincodeSessionId", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:migrationPincodeSessionId: ", p), err) }
  if err := oprot.WriteString(string(p.MigrationPincodeSessionId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.migrationPincodeSessionId (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:migrationPincodeSessionId: ", p), err) }
  return err
}

func (p *TalkServiceVerifyPhoneNumberArgs) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("oldUdidHash", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:oldUdidHash: ", p), err) }
  if err := oprot.WriteString(string(p.OldUdidHash)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.oldUdidHash (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:oldUdidHash: ", p), err) }
  return err
}

func (p *TalkServiceVerifyPhoneNumberArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceVerifyPhoneNumberArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceVerifyPhoneNumberResult struct {
  Success *PhoneVerificationResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceVerifyPhoneNumberResult() *TalkServiceVerifyPhoneNumberResult {
  return &TalkServiceVerifyPhoneNumberResult{}
}

var TalkServiceVerifyPhoneNumberResult_Success_DEFAULT *PhoneVerificationResult_
func (p *TalkServiceVerifyPhoneNumberResult) GetSuccess() *PhoneVerificationResult_ {
  if !p.IsSetSuccess() {
    return TalkServiceVerifyPhoneNumberResult_Success_DEFAULT
  }
return p.Success
}
var TalkServiceVerifyPhoneNumberResult_E_DEFAULT *TalkException
func (p *TalkServiceVerifyPhoneNumberResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceVerifyPhoneNumberResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceVerifyPhoneNumberResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceVerifyPhoneNumberResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceVerifyPhoneNumberResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceVerifyPhoneNumberResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &PhoneVerificationResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TalkServiceVerifyPhoneNumberResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceVerifyPhoneNumberResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("verifyPhoneNumber_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceVerifyPhoneNumberResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceVerifyPhoneNumberResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceVerifyPhoneNumberResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceVerifyPhoneNumberResult(%+v)", *p)
}

// Attributes:
//  - FeatureType
type TalkServiceAcquireEncryptedAccessTokenArgs struct {
  // unused field # 1
  FeatureType FeatureType `thrift:"featureType,2" db:"featureType" json:"featureType"`
}

func NewTalkServiceAcquireEncryptedAccessTokenArgs() *TalkServiceAcquireEncryptedAccessTokenArgs {
  return &TalkServiceAcquireEncryptedAccessTokenArgs{}
}


func (p *TalkServiceAcquireEncryptedAccessTokenArgs) GetFeatureType() FeatureType {
  return p.FeatureType
}
func (p *TalkServiceAcquireEncryptedAccessTokenArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceAcquireEncryptedAccessTokenArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := FeatureType(v)
  p.FeatureType = temp
}
  return nil
}

func (p *TalkServiceAcquireEncryptedAccessTokenArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("acquireEncryptedAccessToken_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceAcquireEncryptedAccessTokenArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("featureType", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:featureType: ", p), err) }
  if err := oprot.WriteI32(int32(p.FeatureType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.featureType (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:featureType: ", p), err) }
  return err
}

func (p *TalkServiceAcquireEncryptedAccessTokenArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceAcquireEncryptedAccessTokenArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceAcquireEncryptedAccessTokenResult struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceAcquireEncryptedAccessTokenResult() *TalkServiceAcquireEncryptedAccessTokenResult {
  return &TalkServiceAcquireEncryptedAccessTokenResult{}
}

var TalkServiceAcquireEncryptedAccessTokenResult_Success_DEFAULT string
func (p *TalkServiceAcquireEncryptedAccessTokenResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return TalkServiceAcquireEncryptedAccessTokenResult_Success_DEFAULT
  }
return *p.Success
}
var TalkServiceAcquireEncryptedAccessTokenResult_E_DEFAULT *TalkException
func (p *TalkServiceAcquireEncryptedAccessTokenResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceAcquireEncryptedAccessTokenResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceAcquireEncryptedAccessTokenResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceAcquireEncryptedAccessTokenResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceAcquireEncryptedAccessTokenResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceAcquireEncryptedAccessTokenResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *TalkServiceAcquireEncryptedAccessTokenResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceAcquireEncryptedAccessTokenResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("acquireEncryptedAccessToken_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceAcquireEncryptedAccessTokenResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceAcquireEncryptedAccessTokenResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceAcquireEncryptedAccessTokenResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceAcquireEncryptedAccessTokenResult(%+v)", *p)
}

// Attributes:
//  - SnsIdType
//  - SnsAccessToken
//  - IdentityCredential
//  - Region
//  - UdidHash
//  - DeviceInfo
//  - MigrationPincodeSessionId
type TalkServiceRegisterWithSnsIdAndIdentityCredentialArgs struct {
  // unused field # 1
  SnsIdType C60759oi `thrift:"snsIdType,2" db:"snsIdType" json:"snsIdType"`
  SnsAccessToken string `thrift:"snsAccessToken,3" db:"snsAccessToken" json:"snsAccessToken"`
  IdentityCredential *IdentityCredential `thrift:"identityCredential,4" db:"identityCredential" json:"identityCredential"`
  Region string `thrift:"region,5" db:"region" json:"region"`
  UdidHash string `thrift:"udidHash,6" db:"udidHash" json:"udidHash"`
  DeviceInfo *DeviceInfo `thrift:"deviceInfo,7" db:"deviceInfo" json:"deviceInfo"`
  MigrationPincodeSessionId string `thrift:"migrationPincodeSessionId,8" db:"migrationPincodeSessionId" json:"migrationPincodeSessionId"`
}

func NewTalkServiceRegisterWithSnsIdAndIdentityCredentialArgs() *TalkServiceRegisterWithSnsIdAndIdentityCredentialArgs {
  return &TalkServiceRegisterWithSnsIdAndIdentityCredentialArgs{}
}


func (p *TalkServiceRegisterWithSnsIdAndIdentityCredentialArgs) GetSnsIdType() C60759oi {
  return p.SnsIdType
}

func (p *TalkServiceRegisterWithSnsIdAndIdentityCredentialArgs) GetSnsAccessToken() string {
  return p.SnsAccessToken
}
var TalkServiceRegisterWithSnsIdAndIdentityCredentialArgs_IdentityCredential_DEFAULT *IdentityCredential
func (p *TalkServiceRegisterWithSnsIdAndIdentityCredentialArgs) GetIdentityCredential() *IdentityCredential {
  if !p.IsSetIdentityCredential() {
    return TalkServiceRegisterWithSnsIdAndIdentityCredentialArgs_IdentityCredential_DEFAULT
  }
return p.IdentityCredential
}

func (p *TalkServiceRegisterWithSnsIdAndIdentityCredentialArgs) GetRegion() string {
  return p.Region
}

func (p *TalkServiceRegisterWithSnsIdAndIdentityCredentialArgs) GetUdidHash() string {
  return p.UdidHash
}
var TalkServiceRegisterWithSnsIdAndIdentityCredentialArgs_DeviceInfo_DEFAULT *DeviceInfo
func (p *TalkServiceRegisterWithSnsIdAndIdentityCredentialArgs) GetDeviceInfo() *DeviceInfo {
  if !p.IsSetDeviceInfo() {
    return TalkServiceRegisterWithSnsIdAndIdentityCredentialArgs_DeviceInfo_DEFAULT
  }
return p.DeviceInfo
}

func (p *TalkServiceRegisterWithSnsIdAndIdentityCredentialArgs) GetMigrationPincodeSessionId() string {
  return p.MigrationPincodeSessionId
}
func (p *TalkServiceRegisterWithSnsIdAndIdentityCredentialArgs) IsSetIdentityCredential() bool {
  return p.IdentityCredential != nil
}

func (p *TalkServiceRegisterWithSnsIdAndIdentityCredentialArgs) IsSetDeviceInfo() bool {
  return p.DeviceInfo != nil
}

func (p *TalkServiceRegisterWithSnsIdAndIdentityCredentialArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceRegisterWithSnsIdAndIdentityCredentialArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := C60759oi(v)
  p.SnsIdType = temp
}
  return nil
}

func (p *TalkServiceRegisterWithSnsIdAndIdentityCredentialArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.SnsAccessToken = v
}
  return nil
}

func (p *TalkServiceRegisterWithSnsIdAndIdentityCredentialArgs)  ReadField4(iprot thrift.TProtocol) error {
  p.IdentityCredential = &IdentityCredential{}
  if err := p.IdentityCredential.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.IdentityCredential), err)
  }
  return nil
}

func (p *TalkServiceRegisterWithSnsIdAndIdentityCredentialArgs)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Region = v
}
  return nil
}

func (p *TalkServiceRegisterWithSnsIdAndIdentityCredentialArgs)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.UdidHash = v
}
  return nil
}

func (p *TalkServiceRegisterWithSnsIdAndIdentityCredentialArgs)  ReadField7(iprot thrift.TProtocol) error {
  p.DeviceInfo = &DeviceInfo{}
  if err := p.DeviceInfo.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.DeviceInfo), err)
  }
  return nil
}

func (p *TalkServiceRegisterWithSnsIdAndIdentityCredentialArgs)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.MigrationPincodeSessionId = v
}
  return nil
}

func (p *TalkServiceRegisterWithSnsIdAndIdentityCredentialArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("registerWithSnsIdAndIdentityCredential_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceRegisterWithSnsIdAndIdentityCredentialArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("snsIdType", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:snsIdType: ", p), err) }
  if err := oprot.WriteI32(int32(p.SnsIdType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.snsIdType (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:snsIdType: ", p), err) }
  return err
}

func (p *TalkServiceRegisterWithSnsIdAndIdentityCredentialArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("snsAccessToken", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:snsAccessToken: ", p), err) }
  if err := oprot.WriteString(string(p.SnsAccessToken)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.snsAccessToken (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:snsAccessToken: ", p), err) }
  return err
}

func (p *TalkServiceRegisterWithSnsIdAndIdentityCredentialArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("identityCredential", thrift.STRUCT, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:identityCredential: ", p), err) }
  if err := p.IdentityCredential.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.IdentityCredential), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:identityCredential: ", p), err) }
  return err
}

func (p *TalkServiceRegisterWithSnsIdAndIdentityCredentialArgs) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("region", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:region: ", p), err) }
  if err := oprot.WriteString(string(p.Region)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.region (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:region: ", p), err) }
  return err
}

func (p *TalkServiceRegisterWithSnsIdAndIdentityCredentialArgs) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("udidHash", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:udidHash: ", p), err) }
  if err := oprot.WriteString(string(p.UdidHash)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.udidHash (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:udidHash: ", p), err) }
  return err
}

func (p *TalkServiceRegisterWithSnsIdAndIdentityCredentialArgs) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("deviceInfo", thrift.STRUCT, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:deviceInfo: ", p), err) }
  if err := p.DeviceInfo.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.DeviceInfo), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:deviceInfo: ", p), err) }
  return err
}

func (p *TalkServiceRegisterWithSnsIdAndIdentityCredentialArgs) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("migrationPincodeSessionId", thrift.STRING, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:migrationPincodeSessionId: ", p), err) }
  if err := oprot.WriteString(string(p.MigrationPincodeSessionId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.migrationPincodeSessionId (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:migrationPincodeSessionId: ", p), err) }
  return err
}

func (p *TalkServiceRegisterWithSnsIdAndIdentityCredentialArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceRegisterWithSnsIdAndIdentityCredentialArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceRegisterWithSnsIdAndIdentityCredentialResult struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceRegisterWithSnsIdAndIdentityCredentialResult() *TalkServiceRegisterWithSnsIdAndIdentityCredentialResult {
  return &TalkServiceRegisterWithSnsIdAndIdentityCredentialResult{}
}

var TalkServiceRegisterWithSnsIdAndIdentityCredentialResult_Success_DEFAULT string
func (p *TalkServiceRegisterWithSnsIdAndIdentityCredentialResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return TalkServiceRegisterWithSnsIdAndIdentityCredentialResult_Success_DEFAULT
  }
return *p.Success
}
var TalkServiceRegisterWithSnsIdAndIdentityCredentialResult_E_DEFAULT *TalkException
func (p *TalkServiceRegisterWithSnsIdAndIdentityCredentialResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceRegisterWithSnsIdAndIdentityCredentialResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceRegisterWithSnsIdAndIdentityCredentialResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceRegisterWithSnsIdAndIdentityCredentialResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceRegisterWithSnsIdAndIdentityCredentialResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceRegisterWithSnsIdAndIdentityCredentialResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *TalkServiceRegisterWithSnsIdAndIdentityCredentialResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceRegisterWithSnsIdAndIdentityCredentialResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("registerWithSnsIdAndIdentityCredential_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceRegisterWithSnsIdAndIdentityCredentialResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceRegisterWithSnsIdAndIdentityCredentialResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceRegisterWithSnsIdAndIdentityCredentialResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceRegisterWithSnsIdAndIdentityCredentialResult(%+v)", *p)
}

// Attributes:
//  - Location
type TalkServiceGetShakeEventV1Args struct {
  Location *Geolocation `thrift:"location,1" db:"location" json:"location"`
}

func NewTalkServiceGetShakeEventV1Args() *TalkServiceGetShakeEventV1Args {
  return &TalkServiceGetShakeEventV1Args{}
}

var TalkServiceGetShakeEventV1Args_Location_DEFAULT *Geolocation
func (p *TalkServiceGetShakeEventV1Args) GetLocation() *Geolocation {
  if !p.IsSetLocation() {
    return TalkServiceGetShakeEventV1Args_Location_DEFAULT
  }
return p.Location
}
func (p *TalkServiceGetShakeEventV1Args) IsSetLocation() bool {
  return p.Location != nil
}

func (p *TalkServiceGetShakeEventV1Args) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetShakeEventV1Args)  ReadField1(iprot thrift.TProtocol) error {
  p.Location = &Geolocation{}
  if err := p.Location.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Location), err)
  }
  return nil
}

func (p *TalkServiceGetShakeEventV1Args) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getShakeEventV1_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetShakeEventV1Args) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("location", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:location: ", p), err) }
  if err := p.Location.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Location), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:location: ", p), err) }
  return err
}

func (p *TalkServiceGetShakeEventV1Args) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetShakeEventV1Args(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetShakeEventV1Result struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetShakeEventV1Result() *TalkServiceGetShakeEventV1Result {
  return &TalkServiceGetShakeEventV1Result{}
}

var TalkServiceGetShakeEventV1Result_Success_DEFAULT string
func (p *TalkServiceGetShakeEventV1Result) GetSuccess() string {
  if !p.IsSetSuccess() {
    return TalkServiceGetShakeEventV1Result_Success_DEFAULT
  }
return *p.Success
}
var TalkServiceGetShakeEventV1Result_E_DEFAULT *TalkException
func (p *TalkServiceGetShakeEventV1Result) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceGetShakeEventV1Result_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceGetShakeEventV1Result) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceGetShakeEventV1Result) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceGetShakeEventV1Result) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetShakeEventV1Result)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *TalkServiceGetShakeEventV1Result)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceGetShakeEventV1Result) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getShakeEventV1_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetShakeEventV1Result) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetShakeEventV1Result) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetShakeEventV1Result) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetShakeEventV1Result(%+v)", *p)
}

// Attributes:
//  - SessionId
//  - Identifier
//  - Verifier
//  - Provider
//  - MigrationPincodeSessionId
type TalkServiceRegisterDeviceWithIdentityCredentialArgs struct {
  // unused field # 1
  SessionId string `thrift:"sessionId,2" db:"sessionId" json:"sessionId"`
  Identifier string `thrift:"identifier,3" db:"identifier" json:"identifier"`
  Verifier string `thrift:"verifier,4" db:"verifier" json:"verifier"`
  Provider IdentityProvider `thrift:"provider,5" db:"provider" json:"provider"`
  MigrationPincodeSessionId string `thrift:"migrationPincodeSessionId,6" db:"migrationPincodeSessionId" json:"migrationPincodeSessionId"`
}

func NewTalkServiceRegisterDeviceWithIdentityCredentialArgs() *TalkServiceRegisterDeviceWithIdentityCredentialArgs {
  return &TalkServiceRegisterDeviceWithIdentityCredentialArgs{}
}


func (p *TalkServiceRegisterDeviceWithIdentityCredentialArgs) GetSessionId() string {
  return p.SessionId
}

func (p *TalkServiceRegisterDeviceWithIdentityCredentialArgs) GetIdentifier() string {
  return p.Identifier
}

func (p *TalkServiceRegisterDeviceWithIdentityCredentialArgs) GetVerifier() string {
  return p.Verifier
}

func (p *TalkServiceRegisterDeviceWithIdentityCredentialArgs) GetProvider() IdentityProvider {
  return p.Provider
}

func (p *TalkServiceRegisterDeviceWithIdentityCredentialArgs) GetMigrationPincodeSessionId() string {
  return p.MigrationPincodeSessionId
}
func (p *TalkServiceRegisterDeviceWithIdentityCredentialArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceRegisterDeviceWithIdentityCredentialArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.SessionId = v
}
  return nil
}

func (p *TalkServiceRegisterDeviceWithIdentityCredentialArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Identifier = v
}
  return nil
}

func (p *TalkServiceRegisterDeviceWithIdentityCredentialArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Verifier = v
}
  return nil
}

func (p *TalkServiceRegisterDeviceWithIdentityCredentialArgs)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  temp := IdentityProvider(v)
  p.Provider = temp
}
  return nil
}

func (p *TalkServiceRegisterDeviceWithIdentityCredentialArgs)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.MigrationPincodeSessionId = v
}
  return nil
}

func (p *TalkServiceRegisterDeviceWithIdentityCredentialArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("registerDeviceWithIdentityCredential_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceRegisterDeviceWithIdentityCredentialArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("sessionId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:sessionId: ", p), err) }
  if err := oprot.WriteString(string(p.SessionId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sessionId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:sessionId: ", p), err) }
  return err
}

func (p *TalkServiceRegisterDeviceWithIdentityCredentialArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("identifier", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:identifier: ", p), err) }
  if err := oprot.WriteString(string(p.Identifier)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.identifier (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:identifier: ", p), err) }
  return err
}

func (p *TalkServiceRegisterDeviceWithIdentityCredentialArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("verifier", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:verifier: ", p), err) }
  if err := oprot.WriteString(string(p.Verifier)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.verifier (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:verifier: ", p), err) }
  return err
}

func (p *TalkServiceRegisterDeviceWithIdentityCredentialArgs) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("provider", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:provider: ", p), err) }
  if err := oprot.WriteI32(int32(p.Provider)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.provider (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:provider: ", p), err) }
  return err
}

func (p *TalkServiceRegisterDeviceWithIdentityCredentialArgs) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("migrationPincodeSessionId", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:migrationPincodeSessionId: ", p), err) }
  if err := oprot.WriteString(string(p.MigrationPincodeSessionId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.migrationPincodeSessionId (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:migrationPincodeSessionId: ", p), err) }
  return err
}

func (p *TalkServiceRegisterDeviceWithIdentityCredentialArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceRegisterDeviceWithIdentityCredentialArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceRegisterDeviceWithIdentityCredentialResult struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceRegisterDeviceWithIdentityCredentialResult() *TalkServiceRegisterDeviceWithIdentityCredentialResult {
  return &TalkServiceRegisterDeviceWithIdentityCredentialResult{}
}

var TalkServiceRegisterDeviceWithIdentityCredentialResult_Success_DEFAULT string
func (p *TalkServiceRegisterDeviceWithIdentityCredentialResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return TalkServiceRegisterDeviceWithIdentityCredentialResult_Success_DEFAULT
  }
return *p.Success
}
var TalkServiceRegisterDeviceWithIdentityCredentialResult_E_DEFAULT *TalkException
func (p *TalkServiceRegisterDeviceWithIdentityCredentialResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceRegisterDeviceWithIdentityCredentialResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceRegisterDeviceWithIdentityCredentialResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceRegisterDeviceWithIdentityCredentialResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceRegisterDeviceWithIdentityCredentialResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceRegisterDeviceWithIdentityCredentialResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *TalkServiceRegisterDeviceWithIdentityCredentialResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceRegisterDeviceWithIdentityCredentialResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("registerDeviceWithIdentityCredential_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceRegisterDeviceWithIdentityCredentialResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceRegisterDeviceWithIdentityCredentialResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceRegisterDeviceWithIdentityCredentialResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceRegisterDeviceWithIdentityCredentialResult(%+v)", *p)
}

// Attributes:
//  - Latitude
//  - Longitude
//  - Accuracy
//  - NetworkStatus
//  - AltitudeMeters
//  - VelocityMetersPerSecond
//  - BearingDegrees
type TalkServiceUpdateAndGetNearbyArgs struct {
  // unused field # 1
  Latitude float64 `thrift:"latitude,2" db:"latitude" json:"latitude"`
  Longitude float64 `thrift:"longitude,3" db:"longitude" json:"longitude"`
  Accuracy *GeolocationAccuracy `thrift:"accuracy,4" db:"accuracy" json:"accuracy"`
  NetworkStatus *ClientNetworkStatus `thrift:"networkStatus,5" db:"networkStatus" json:"networkStatus"`
  AltitudeMeters float64 `thrift:"altitudeMeters,6" db:"altitudeMeters" json:"altitudeMeters"`
  VelocityMetersPerSecond float64 `thrift:"velocityMetersPerSecond,7" db:"velocityMetersPerSecond" json:"velocityMetersPerSecond"`
  BearingDegrees float64 `thrift:"bearingDegrees,8" db:"bearingDegrees" json:"bearingDegrees"`
}

func NewTalkServiceUpdateAndGetNearbyArgs() *TalkServiceUpdateAndGetNearbyArgs {
  return &TalkServiceUpdateAndGetNearbyArgs{}
}


func (p *TalkServiceUpdateAndGetNearbyArgs) GetLatitude() float64 {
  return p.Latitude
}

func (p *TalkServiceUpdateAndGetNearbyArgs) GetLongitude() float64 {
  return p.Longitude
}
var TalkServiceUpdateAndGetNearbyArgs_Accuracy_DEFAULT *GeolocationAccuracy
func (p *TalkServiceUpdateAndGetNearbyArgs) GetAccuracy() *GeolocationAccuracy {
  if !p.IsSetAccuracy() {
    return TalkServiceUpdateAndGetNearbyArgs_Accuracy_DEFAULT
  }
return p.Accuracy
}
var TalkServiceUpdateAndGetNearbyArgs_NetworkStatus_DEFAULT *ClientNetworkStatus
func (p *TalkServiceUpdateAndGetNearbyArgs) GetNetworkStatus() *ClientNetworkStatus {
  if !p.IsSetNetworkStatus() {
    return TalkServiceUpdateAndGetNearbyArgs_NetworkStatus_DEFAULT
  }
return p.NetworkStatus
}

func (p *TalkServiceUpdateAndGetNearbyArgs) GetAltitudeMeters() float64 {
  return p.AltitudeMeters
}

func (p *TalkServiceUpdateAndGetNearbyArgs) GetVelocityMetersPerSecond() float64 {
  return p.VelocityMetersPerSecond
}

func (p *TalkServiceUpdateAndGetNearbyArgs) GetBearingDegrees() float64 {
  return p.BearingDegrees
}
func (p *TalkServiceUpdateAndGetNearbyArgs) IsSetAccuracy() bool {
  return p.Accuracy != nil
}

func (p *TalkServiceUpdateAndGetNearbyArgs) IsSetNetworkStatus() bool {
  return p.NetworkStatus != nil
}

func (p *TalkServiceUpdateAndGetNearbyArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceUpdateAndGetNearbyArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Latitude = v
}
  return nil
}

func (p *TalkServiceUpdateAndGetNearbyArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Longitude = v
}
  return nil
}

func (p *TalkServiceUpdateAndGetNearbyArgs)  ReadField4(iprot thrift.TProtocol) error {
  p.Accuracy = &GeolocationAccuracy{}
  if err := p.Accuracy.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Accuracy), err)
  }
  return nil
}

func (p *TalkServiceUpdateAndGetNearbyArgs)  ReadField5(iprot thrift.TProtocol) error {
  p.NetworkStatus = &ClientNetworkStatus{}
  if err := p.NetworkStatus.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.NetworkStatus), err)
  }
  return nil
}

func (p *TalkServiceUpdateAndGetNearbyArgs)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.AltitudeMeters = v
}
  return nil
}

func (p *TalkServiceUpdateAndGetNearbyArgs)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.VelocityMetersPerSecond = v
}
  return nil
}

func (p *TalkServiceUpdateAndGetNearbyArgs)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.BearingDegrees = v
}
  return nil
}

func (p *TalkServiceUpdateAndGetNearbyArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateAndGetNearby_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceUpdateAndGetNearbyArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("latitude", thrift.DOUBLE, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:latitude: ", p), err) }
  if err := oprot.WriteDouble(float64(p.Latitude)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.latitude (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:latitude: ", p), err) }
  return err
}

func (p *TalkServiceUpdateAndGetNearbyArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("longitude", thrift.DOUBLE, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:longitude: ", p), err) }
  if err := oprot.WriteDouble(float64(p.Longitude)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.longitude (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:longitude: ", p), err) }
  return err
}

func (p *TalkServiceUpdateAndGetNearbyArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("accuracy", thrift.STRUCT, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:accuracy: ", p), err) }
  if err := p.Accuracy.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Accuracy), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:accuracy: ", p), err) }
  return err
}

func (p *TalkServiceUpdateAndGetNearbyArgs) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("networkStatus", thrift.STRUCT, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:networkStatus: ", p), err) }
  if err := p.NetworkStatus.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.NetworkStatus), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:networkStatus: ", p), err) }
  return err
}

func (p *TalkServiceUpdateAndGetNearbyArgs) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("altitudeMeters", thrift.DOUBLE, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:altitudeMeters: ", p), err) }
  if err := oprot.WriteDouble(float64(p.AltitudeMeters)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.altitudeMeters (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:altitudeMeters: ", p), err) }
  return err
}

func (p *TalkServiceUpdateAndGetNearbyArgs) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("velocityMetersPerSecond", thrift.DOUBLE, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:velocityMetersPerSecond: ", p), err) }
  if err := oprot.WriteDouble(float64(p.VelocityMetersPerSecond)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.velocityMetersPerSecond (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:velocityMetersPerSecond: ", p), err) }
  return err
}

func (p *TalkServiceUpdateAndGetNearbyArgs) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("bearingDegrees", thrift.DOUBLE, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:bearingDegrees: ", p), err) }
  if err := oprot.WriteDouble(float64(p.BearingDegrees)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.bearingDegrees (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:bearingDegrees: ", p), err) }
  return err
}

func (p *TalkServiceUpdateAndGetNearbyArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceUpdateAndGetNearbyArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceUpdateAndGetNearbyResult struct {
  Success []*NearbyEntry `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceUpdateAndGetNearbyResult() *TalkServiceUpdateAndGetNearbyResult {
  return &TalkServiceUpdateAndGetNearbyResult{}
}

var TalkServiceUpdateAndGetNearbyResult_Success_DEFAULT []*NearbyEntry

func (p *TalkServiceUpdateAndGetNearbyResult) GetSuccess() []*NearbyEntry {
  return p.Success
}
var TalkServiceUpdateAndGetNearbyResult_E_DEFAULT *TalkException
func (p *TalkServiceUpdateAndGetNearbyResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceUpdateAndGetNearbyResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceUpdateAndGetNearbyResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceUpdateAndGetNearbyResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceUpdateAndGetNearbyResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceUpdateAndGetNearbyResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*NearbyEntry, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem331 := &NearbyEntry{}
    if err := _elem331.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem331), err)
    }
    p.Success = append(p.Success, _elem331)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TalkServiceUpdateAndGetNearbyResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceUpdateAndGetNearbyResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateAndGetNearby_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceUpdateAndGetNearbyResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceUpdateAndGetNearbyResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceUpdateAndGetNearbyResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceUpdateAndGetNearbyResult(%+v)", *p)
}

// Attributes:
//  - LocalRev
//  - Count
type TalkServiceFetchOperationsArgs struct {
  // unused field # 1
  LocalRev int64 `thrift:"localRev,2" db:"localRev" json:"localRev"`
  Count int32 `thrift:"count,3" db:"count" json:"count"`
}

func NewTalkServiceFetchOperationsArgs() *TalkServiceFetchOperationsArgs {
  return &TalkServiceFetchOperationsArgs{}
}


func (p *TalkServiceFetchOperationsArgs) GetLocalRev() int64 {
  return p.LocalRev
}

func (p *TalkServiceFetchOperationsArgs) GetCount() int32 {
  return p.Count
}
func (p *TalkServiceFetchOperationsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceFetchOperationsArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.LocalRev = v
}
  return nil
}

func (p *TalkServiceFetchOperationsArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Count = v
}
  return nil
}

func (p *TalkServiceFetchOperationsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("fetchOperations_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceFetchOperationsArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("localRev", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:localRev: ", p), err) }
  if err := oprot.WriteI64(int64(p.LocalRev)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.localRev (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:localRev: ", p), err) }
  return err
}

func (p *TalkServiceFetchOperationsArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("count", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:count: ", p), err) }
  if err := oprot.WriteI32(int32(p.Count)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.count (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:count: ", p), err) }
  return err
}

func (p *TalkServiceFetchOperationsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceFetchOperationsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceFetchOperationsResult struct {
  Success []*Operation `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *ShouldSyncException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceFetchOperationsResult() *TalkServiceFetchOperationsResult {
  return &TalkServiceFetchOperationsResult{}
}

var TalkServiceFetchOperationsResult_Success_DEFAULT []*Operation

func (p *TalkServiceFetchOperationsResult) GetSuccess() []*Operation {
  return p.Success
}
var TalkServiceFetchOperationsResult_E_DEFAULT *ShouldSyncException
func (p *TalkServiceFetchOperationsResult) GetE() *ShouldSyncException {
  if !p.IsSetE() {
    return TalkServiceFetchOperationsResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceFetchOperationsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceFetchOperationsResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceFetchOperationsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceFetchOperationsResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Operation, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem332 := &Operation{}
    if err := _elem332.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem332), err)
    }
    p.Success = append(p.Success, _elem332)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TalkServiceFetchOperationsResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &ShouldSyncException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceFetchOperationsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("fetchOperations_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceFetchOperationsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceFetchOperationsResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceFetchOperationsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceFetchOperationsResult(%+v)", *p)
}

// Attributes:
//  - LocalRev
//  - Count
//  - GlobalRev
//  - IndividualRev
type TalkServiceFetchOpsArgs struct {
  // unused field # 1
  LocalRev int64 `thrift:"localRev,2" db:"localRev" json:"localRev"`
  Count int32 `thrift:"count,3" db:"count" json:"count"`
  GlobalRev int64 `thrift:"globalRev,4" db:"globalRev" json:"globalRev"`
  IndividualRev int64 `thrift:"individualRev,5" db:"individualRev" json:"individualRev"`
}

func NewTalkServiceFetchOpsArgs() *TalkServiceFetchOpsArgs {
  return &TalkServiceFetchOpsArgs{}
}


func (p *TalkServiceFetchOpsArgs) GetLocalRev() int64 {
  return p.LocalRev
}

func (p *TalkServiceFetchOpsArgs) GetCount() int32 {
  return p.Count
}

func (p *TalkServiceFetchOpsArgs) GetGlobalRev() int64 {
  return p.GlobalRev
}

func (p *TalkServiceFetchOpsArgs) GetIndividualRev() int64 {
  return p.IndividualRev
}
func (p *TalkServiceFetchOpsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceFetchOpsArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.LocalRev = v
}
  return nil
}

func (p *TalkServiceFetchOpsArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Count = v
}
  return nil
}

func (p *TalkServiceFetchOpsArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.GlobalRev = v
}
  return nil
}

func (p *TalkServiceFetchOpsArgs)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.IndividualRev = v
}
  return nil
}

func (p *TalkServiceFetchOpsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("fetchOps_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceFetchOpsArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("localRev", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:localRev: ", p), err) }
  if err := oprot.WriteI64(int64(p.LocalRev)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.localRev (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:localRev: ", p), err) }
  return err
}

func (p *TalkServiceFetchOpsArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("count", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:count: ", p), err) }
  if err := oprot.WriteI32(int32(p.Count)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.count (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:count: ", p), err) }
  return err
}

func (p *TalkServiceFetchOpsArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("globalRev", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:globalRev: ", p), err) }
  if err := oprot.WriteI64(int64(p.GlobalRev)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.globalRev (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:globalRev: ", p), err) }
  return err
}

func (p *TalkServiceFetchOpsArgs) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("individualRev", thrift.I64, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:individualRev: ", p), err) }
  if err := oprot.WriteI64(int64(p.IndividualRev)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.individualRev (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:individualRev: ", p), err) }
  return err
}

func (p *TalkServiceFetchOpsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceFetchOpsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceFetchOpsResult struct {
  Success []*Operation `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *ShouldSyncException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceFetchOpsResult() *TalkServiceFetchOpsResult {
  return &TalkServiceFetchOpsResult{}
}

var TalkServiceFetchOpsResult_Success_DEFAULT []*Operation

func (p *TalkServiceFetchOpsResult) GetSuccess() []*Operation {
  return p.Success
}
var TalkServiceFetchOpsResult_E_DEFAULT *ShouldSyncException
func (p *TalkServiceFetchOpsResult) GetE() *ShouldSyncException {
  if !p.IsSetE() {
    return TalkServiceFetchOpsResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceFetchOpsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceFetchOpsResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceFetchOpsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceFetchOpsResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Operation, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem333 := &Operation{}
    if err := _elem333.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem333), err)
    }
    p.Success = append(p.Success, _elem333)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TalkServiceFetchOpsResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &ShouldSyncException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceFetchOpsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("fetchOps_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceFetchOpsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceFetchOpsResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceFetchOpsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceFetchOpsResult(%+v)", *p)
}

// Attributes:
//  - Seq
//  - MessageId
type TalkServiceUnsendMessageArgs struct {
  Seq int32 `thrift:"seq,1" db:"seq" json:"seq"`
  MessageId string `thrift:"messageId,2" db:"messageId" json:"messageId"`
}

func NewTalkServiceUnsendMessageArgs() *TalkServiceUnsendMessageArgs {
  return &TalkServiceUnsendMessageArgs{}
}


func (p *TalkServiceUnsendMessageArgs) GetSeq() int32 {
  return p.Seq
}

func (p *TalkServiceUnsendMessageArgs) GetMessageId() string {
  return p.MessageId
}
func (p *TalkServiceUnsendMessageArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceUnsendMessageArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Seq = v
}
  return nil
}

func (p *TalkServiceUnsendMessageArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.MessageId = v
}
  return nil
}

func (p *TalkServiceUnsendMessageArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("unsendMessage_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceUnsendMessageArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("seq", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:seq: ", p), err) }
  if err := oprot.WriteI32(int32(p.Seq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.seq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:seq: ", p), err) }
  return err
}

func (p *TalkServiceUnsendMessageArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("messageId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:messageId: ", p), err) }
  if err := oprot.WriteString(string(p.MessageId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.messageId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:messageId: ", p), err) }
  return err
}

func (p *TalkServiceUnsendMessageArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceUnsendMessageArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceUnsendMessageResult struct {
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceUnsendMessageResult() *TalkServiceUnsendMessageResult {
  return &TalkServiceUnsendMessageResult{}
}

var TalkServiceUnsendMessageResult_E_DEFAULT *TalkException
func (p *TalkServiceUnsendMessageResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceUnsendMessageResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceUnsendMessageResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceUnsendMessageResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceUnsendMessageResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceUnsendMessageResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("unsendMessage_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceUnsendMessageResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceUnsendMessageResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceUnsendMessageResult(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - ID
type TalkServiceBlockRecommendationArgs struct {
  ReqSeq int32 `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
  ID string `thrift:"id,2" db:"id" json:"id"`
}

func NewTalkServiceBlockRecommendationArgs() *TalkServiceBlockRecommendationArgs {
  return &TalkServiceBlockRecommendationArgs{}
}


func (p *TalkServiceBlockRecommendationArgs) GetReqSeq() int32 {
  return p.ReqSeq
}

func (p *TalkServiceBlockRecommendationArgs) GetID() string {
  return p.ID
}
func (p *TalkServiceBlockRecommendationArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceBlockRecommendationArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqSeq = v
}
  return nil
}

func (p *TalkServiceBlockRecommendationArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *TalkServiceBlockRecommendationArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("blockRecommendation_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceBlockRecommendationArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("reqSeq", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err) }
  if err := oprot.WriteI32(int32(p.ReqSeq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err) }
  return err
}

func (p *TalkServiceBlockRecommendationArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:id: ", p), err) }
  if err := oprot.WriteString(string(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:id: ", p), err) }
  return err
}

func (p *TalkServiceBlockRecommendationArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceBlockRecommendationArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceBlockRecommendationResult struct {
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceBlockRecommendationResult() *TalkServiceBlockRecommendationResult {
  return &TalkServiceBlockRecommendationResult{}
}

var TalkServiceBlockRecommendationResult_E_DEFAULT *TalkException
func (p *TalkServiceBlockRecommendationResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceBlockRecommendationResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceBlockRecommendationResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceBlockRecommendationResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceBlockRecommendationResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceBlockRecommendationResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("blockRecommendation_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceBlockRecommendationResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceBlockRecommendationResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceBlockRecommendationResult(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - Mid
//  - Type
//  - Reference
type TalkServiceFindAndAddContactsByMidArgs struct {
  ReqSeq int32 `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
  Mid string `thrift:"mid,2" db:"mid" json:"mid"`
  Type ContactType `thrift:"type,3" db:"type" json:"type"`
  Reference string `thrift:"reference,4" db:"reference" json:"reference"`
}

func NewTalkServiceFindAndAddContactsByMidArgs() *TalkServiceFindAndAddContactsByMidArgs {
  return &TalkServiceFindAndAddContactsByMidArgs{}
}


func (p *TalkServiceFindAndAddContactsByMidArgs) GetReqSeq() int32 {
  return p.ReqSeq
}

func (p *TalkServiceFindAndAddContactsByMidArgs) GetMid() string {
  return p.Mid
}

func (p *TalkServiceFindAndAddContactsByMidArgs) GetType() ContactType {
  return p.Type
}

func (p *TalkServiceFindAndAddContactsByMidArgs) GetReference() string {
  return p.Reference
}
func (p *TalkServiceFindAndAddContactsByMidArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceFindAndAddContactsByMidArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqSeq = v
}
  return nil
}

func (p *TalkServiceFindAndAddContactsByMidArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Mid = v
}
  return nil
}

func (p *TalkServiceFindAndAddContactsByMidArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := ContactType(v)
  p.Type = temp
}
  return nil
}

func (p *TalkServiceFindAndAddContactsByMidArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Reference = v
}
  return nil
}

func (p *TalkServiceFindAndAddContactsByMidArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("findAndAddContactsByMid_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceFindAndAddContactsByMidArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("reqSeq", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err) }
  if err := oprot.WriteI32(int32(p.ReqSeq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err) }
  return err
}

func (p *TalkServiceFindAndAddContactsByMidArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("mid", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:mid: ", p), err) }
  if err := oprot.WriteString(string(p.Mid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.mid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:mid: ", p), err) }
  return err
}

func (p *TalkServiceFindAndAddContactsByMidArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("type", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:type: ", p), err) }
  if err := oprot.WriteI32(int32(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:type: ", p), err) }
  return err
}

func (p *TalkServiceFindAndAddContactsByMidArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("reference", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:reference: ", p), err) }
  if err := oprot.WriteString(string(p.Reference)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reference (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:reference: ", p), err) }
  return err
}

func (p *TalkServiceFindAndAddContactsByMidArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceFindAndAddContactsByMidArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceFindAndAddContactsByMidResult struct {
  Success map[string]*Contact `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceFindAndAddContactsByMidResult() *TalkServiceFindAndAddContactsByMidResult {
  return &TalkServiceFindAndAddContactsByMidResult{}
}

var TalkServiceFindAndAddContactsByMidResult_Success_DEFAULT map[string]*Contact

func (p *TalkServiceFindAndAddContactsByMidResult) GetSuccess() map[string]*Contact {
  return p.Success
}
var TalkServiceFindAndAddContactsByMidResult_E_DEFAULT *TalkException
func (p *TalkServiceFindAndAddContactsByMidResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceFindAndAddContactsByMidResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceFindAndAddContactsByMidResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceFindAndAddContactsByMidResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceFindAndAddContactsByMidResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceFindAndAddContactsByMidResult)  ReadField0(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]*Contact, size)
  p.Success =  tMap
  for i := 0; i < size; i ++ {
var _key334 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key334 = v
}
    _val335 := &Contact{}
    if err := _val335.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val335), err)
    }
    p.Success[_key334] = _val335
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *TalkServiceFindAndAddContactsByMidResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceFindAndAddContactsByMidResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("findAndAddContactsByMid_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceFindAndAddContactsByMidResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.MAP, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range p.Success {
      if err := oprot.WriteString(string(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteMapEnd(); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceFindAndAddContactsByMidResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceFindAndAddContactsByMidResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceFindAndAddContactsByMidResult(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - SenderMid
//  - MessageId
type TalkServiceRequestResendMessageArgs struct {
  ReqSeq int32 `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
  SenderMid string `thrift:"senderMid,2" db:"senderMid" json:"senderMid"`
  MessageId string `thrift:"messageId,3" db:"messageId" json:"messageId"`
}

func NewTalkServiceRequestResendMessageArgs() *TalkServiceRequestResendMessageArgs {
  return &TalkServiceRequestResendMessageArgs{}
}


func (p *TalkServiceRequestResendMessageArgs) GetReqSeq() int32 {
  return p.ReqSeq
}

func (p *TalkServiceRequestResendMessageArgs) GetSenderMid() string {
  return p.SenderMid
}

func (p *TalkServiceRequestResendMessageArgs) GetMessageId() string {
  return p.MessageId
}
func (p *TalkServiceRequestResendMessageArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceRequestResendMessageArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqSeq = v
}
  return nil
}

func (p *TalkServiceRequestResendMessageArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.SenderMid = v
}
  return nil
}

func (p *TalkServiceRequestResendMessageArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.MessageId = v
}
  return nil
}

func (p *TalkServiceRequestResendMessageArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("requestResendMessage_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceRequestResendMessageArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("reqSeq", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err) }
  if err := oprot.WriteI32(int32(p.ReqSeq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err) }
  return err
}

func (p *TalkServiceRequestResendMessageArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("senderMid", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:senderMid: ", p), err) }
  if err := oprot.WriteString(string(p.SenderMid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.senderMid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:senderMid: ", p), err) }
  return err
}

func (p *TalkServiceRequestResendMessageArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("messageId", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:messageId: ", p), err) }
  if err := oprot.WriteString(string(p.MessageId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.messageId (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:messageId: ", p), err) }
  return err
}

func (p *TalkServiceRequestResendMessageArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceRequestResendMessageArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceRequestResendMessageResult struct {
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceRequestResendMessageResult() *TalkServiceRequestResendMessageResult {
  return &TalkServiceRequestResendMessageResult{}
}

var TalkServiceRequestResendMessageResult_E_DEFAULT *TalkException
func (p *TalkServiceRequestResendMessageResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceRequestResendMessageResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceRequestResendMessageResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceRequestResendMessageResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceRequestResendMessageResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceRequestResendMessageResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("requestResendMessage_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceRequestResendMessageResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceRequestResendMessageResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceRequestResendMessageResult(%+v)", *p)
}

// Attributes:
//  - Seq
//  - ChatMid
//  - LastMessageId
//  - SessionId
type TalkServiceSendChatRemovedArgs struct {
  Seq int32 `thrift:"seq,1" db:"seq" json:"seq"`
  ChatMid string `thrift:"chatMid,2" db:"chatMid" json:"chatMid"`
  LastMessageId string `thrift:"lastMessageId,3" db:"lastMessageId" json:"lastMessageId"`
  SessionId int32 `thrift:"sessionId,4" db:"sessionId" json:"sessionId"`
}

func NewTalkServiceSendChatRemovedArgs() *TalkServiceSendChatRemovedArgs {
  return &TalkServiceSendChatRemovedArgs{}
}


func (p *TalkServiceSendChatRemovedArgs) GetSeq() int32 {
  return p.Seq
}

func (p *TalkServiceSendChatRemovedArgs) GetChatMid() string {
  return p.ChatMid
}

func (p *TalkServiceSendChatRemovedArgs) GetLastMessageId() string {
  return p.LastMessageId
}

func (p *TalkServiceSendChatRemovedArgs) GetSessionId() int32 {
  return p.SessionId
}
func (p *TalkServiceSendChatRemovedArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceSendChatRemovedArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Seq = v
}
  return nil
}

func (p *TalkServiceSendChatRemovedArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ChatMid = v
}
  return nil
}

func (p *TalkServiceSendChatRemovedArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.LastMessageId = v
}
  return nil
}

func (p *TalkServiceSendChatRemovedArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.SessionId = v
}
  return nil
}

func (p *TalkServiceSendChatRemovedArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("sendChatRemoved_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceSendChatRemovedArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("seq", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:seq: ", p), err) }
  if err := oprot.WriteI32(int32(p.Seq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.seq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:seq: ", p), err) }
  return err
}

func (p *TalkServiceSendChatRemovedArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("chatMid", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:chatMid: ", p), err) }
  if err := oprot.WriteString(string(p.ChatMid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.chatMid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:chatMid: ", p), err) }
  return err
}

func (p *TalkServiceSendChatRemovedArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("lastMessageId", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:lastMessageId: ", p), err) }
  if err := oprot.WriteString(string(p.LastMessageId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.lastMessageId (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:lastMessageId: ", p), err) }
  return err
}

func (p *TalkServiceSendChatRemovedArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("sessionId", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:sessionId: ", p), err) }
  if err := oprot.WriteI32(int32(p.SessionId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sessionId (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:sessionId: ", p), err) }
  return err
}

func (p *TalkServiceSendChatRemovedArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceSendChatRemovedArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceSendChatRemovedResult struct {
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceSendChatRemovedResult() *TalkServiceSendChatRemovedResult {
  return &TalkServiceSendChatRemovedResult{}
}

var TalkServiceSendChatRemovedResult_E_DEFAULT *TalkException
func (p *TalkServiceSendChatRemovedResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceSendChatRemovedResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceSendChatRemovedResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceSendChatRemovedResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceSendChatRemovedResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceSendChatRemovedResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("sendChatRemoved_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceSendChatRemovedResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceSendChatRemovedResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceSendChatRemovedResult(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - ReceiverMid
//  - OriginalMessageId
//  - ResendMessage
//  - ErrorCode
type TalkServiceRespondResendMessageArgs struct {
  ReqSeq int32 `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
  ReceiverMid string `thrift:"receiverMid,2" db:"receiverMid" json:"receiverMid"`
  OriginalMessageId string `thrift:"originalMessageId,3" db:"originalMessageId" json:"originalMessageId"`
  ResendMessage *Message `thrift:"resendMessage,4" db:"resendMessage" json:"resendMessage"`
  ErrorCode TalkExceptionCode `thrift:"errorCode,5" db:"errorCode" json:"errorCode"`
}

func NewTalkServiceRespondResendMessageArgs() *TalkServiceRespondResendMessageArgs {
  return &TalkServiceRespondResendMessageArgs{}
}


func (p *TalkServiceRespondResendMessageArgs) GetReqSeq() int32 {
  return p.ReqSeq
}

func (p *TalkServiceRespondResendMessageArgs) GetReceiverMid() string {
  return p.ReceiverMid
}

func (p *TalkServiceRespondResendMessageArgs) GetOriginalMessageId() string {
  return p.OriginalMessageId
}
var TalkServiceRespondResendMessageArgs_ResendMessage_DEFAULT *Message
func (p *TalkServiceRespondResendMessageArgs) GetResendMessage() *Message {
  if !p.IsSetResendMessage() {
    return TalkServiceRespondResendMessageArgs_ResendMessage_DEFAULT
  }
return p.ResendMessage
}

func (p *TalkServiceRespondResendMessageArgs) GetErrorCode() TalkExceptionCode {
  return p.ErrorCode
}
func (p *TalkServiceRespondResendMessageArgs) IsSetResendMessage() bool {
  return p.ResendMessage != nil
}

func (p *TalkServiceRespondResendMessageArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceRespondResendMessageArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqSeq = v
}
  return nil
}

func (p *TalkServiceRespondResendMessageArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ReceiverMid = v
}
  return nil
}

func (p *TalkServiceRespondResendMessageArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.OriginalMessageId = v
}
  return nil
}

func (p *TalkServiceRespondResendMessageArgs)  ReadField4(iprot thrift.TProtocol) error {
  p.ResendMessage = &Message{}
  if err := p.ResendMessage.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ResendMessage), err)
  }
  return nil
}

func (p *TalkServiceRespondResendMessageArgs)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  temp := TalkExceptionCode(v)
  p.ErrorCode = temp
}
  return nil
}

func (p *TalkServiceRespondResendMessageArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("respondResendMessage_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceRespondResendMessageArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("reqSeq", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err) }
  if err := oprot.WriteI32(int32(p.ReqSeq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err) }
  return err
}

func (p *TalkServiceRespondResendMessageArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("receiverMid", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:receiverMid: ", p), err) }
  if err := oprot.WriteString(string(p.ReceiverMid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.receiverMid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:receiverMid: ", p), err) }
  return err
}

func (p *TalkServiceRespondResendMessageArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("originalMessageId", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:originalMessageId: ", p), err) }
  if err := oprot.WriteString(string(p.OriginalMessageId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.originalMessageId (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:originalMessageId: ", p), err) }
  return err
}

func (p *TalkServiceRespondResendMessageArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("resendMessage", thrift.STRUCT, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:resendMessage: ", p), err) }
  if err := p.ResendMessage.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ResendMessage), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:resendMessage: ", p), err) }
  return err
}

func (p *TalkServiceRespondResendMessageArgs) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("errorCode", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:errorCode: ", p), err) }
  if err := oprot.WriteI32(int32(p.ErrorCode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.errorCode (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:errorCode: ", p), err) }
  return err
}

func (p *TalkServiceRespondResendMessageArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceRespondResendMessageArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceRespondResendMessageResult struct {
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceRespondResendMessageResult() *TalkServiceRespondResendMessageResult {
  return &TalkServiceRespondResendMessageResult{}
}

var TalkServiceRespondResendMessageResult_E_DEFAULT *TalkException
func (p *TalkServiceRespondResendMessageResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceRespondResendMessageResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceRespondResendMessageResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceRespondResendMessageResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceRespondResendMessageResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceRespondResendMessageResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("respondResendMessage_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceRespondResendMessageResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceRespondResendMessageResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceRespondResendMessageResult(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - RoomId
//  - ContactIds
type TalkServiceInviteIntoRoomArgs struct {
  ReqSeq int32 `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
  RoomId string `thrift:"roomId,2" db:"roomId" json:"roomId"`
  ContactIds []string `thrift:"contactIds,3" db:"contactIds" json:"contactIds"`
}

func NewTalkServiceInviteIntoRoomArgs() *TalkServiceInviteIntoRoomArgs {
  return &TalkServiceInviteIntoRoomArgs{}
}


func (p *TalkServiceInviteIntoRoomArgs) GetReqSeq() int32 {
  return p.ReqSeq
}

func (p *TalkServiceInviteIntoRoomArgs) GetRoomId() string {
  return p.RoomId
}

func (p *TalkServiceInviteIntoRoomArgs) GetContactIds() []string {
  return p.ContactIds
}
func (p *TalkServiceInviteIntoRoomArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceInviteIntoRoomArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqSeq = v
}
  return nil
}

func (p *TalkServiceInviteIntoRoomArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.RoomId = v
}
  return nil
}

func (p *TalkServiceInviteIntoRoomArgs)  ReadField3(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.ContactIds =  tSlice
  for i := 0; i < size; i ++ {
var _elem336 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem336 = v
}
    p.ContactIds = append(p.ContactIds, _elem336)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TalkServiceInviteIntoRoomArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("inviteIntoRoom_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceInviteIntoRoomArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("reqSeq", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err) }
  if err := oprot.WriteI32(int32(p.ReqSeq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err) }
  return err
}

func (p *TalkServiceInviteIntoRoomArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("roomId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:roomId: ", p), err) }
  if err := oprot.WriteString(string(p.RoomId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.roomId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:roomId: ", p), err) }
  return err
}

func (p *TalkServiceInviteIntoRoomArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("contactIds", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:contactIds: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.ContactIds)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.ContactIds {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:contactIds: ", p), err) }
  return err
}

func (p *TalkServiceInviteIntoRoomArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceInviteIntoRoomArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceInviteIntoRoomResult struct {
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceInviteIntoRoomResult() *TalkServiceInviteIntoRoomResult {
  return &TalkServiceInviteIntoRoomResult{}
}

var TalkServiceInviteIntoRoomResult_E_DEFAULT *TalkException
func (p *TalkServiceInviteIntoRoomResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceInviteIntoRoomResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceInviteIntoRoomResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceInviteIntoRoomResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceInviteIntoRoomResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceInviteIntoRoomResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("inviteIntoRoom_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceInviteIntoRoomResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceInviteIntoRoomResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceInviteIntoRoomResult(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - EncryptedKeyChain
//  - HashKeyChain
type TalkServiceRespondE2EEKeyExchangeArgs struct {
  ReqSeq int32 `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
  EncryptedKeyChain []byte `thrift:"encryptedKeyChain,2" db:"encryptedKeyChain" json:"encryptedKeyChain"`
  HashKeyChain []byte `thrift:"hashKeyChain,3" db:"hashKeyChain" json:"hashKeyChain"`
}

func NewTalkServiceRespondE2EEKeyExchangeArgs() *TalkServiceRespondE2EEKeyExchangeArgs {
  return &TalkServiceRespondE2EEKeyExchangeArgs{}
}


func (p *TalkServiceRespondE2EEKeyExchangeArgs) GetReqSeq() int32 {
  return p.ReqSeq
}

func (p *TalkServiceRespondE2EEKeyExchangeArgs) GetEncryptedKeyChain() []byte {
  return p.EncryptedKeyChain
}

func (p *TalkServiceRespondE2EEKeyExchangeArgs) GetHashKeyChain() []byte {
  return p.HashKeyChain
}
func (p *TalkServiceRespondE2EEKeyExchangeArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceRespondE2EEKeyExchangeArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqSeq = v
}
  return nil
}

func (p *TalkServiceRespondE2EEKeyExchangeArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.EncryptedKeyChain = v
}
  return nil
}

func (p *TalkServiceRespondE2EEKeyExchangeArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.HashKeyChain = v
}
  return nil
}

func (p *TalkServiceRespondE2EEKeyExchangeArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("respondE2EEKeyExchange_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceRespondE2EEKeyExchangeArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("reqSeq", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err) }
  if err := oprot.WriteI32(int32(p.ReqSeq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err) }
  return err
}

func (p *TalkServiceRespondE2EEKeyExchangeArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("encryptedKeyChain", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:encryptedKeyChain: ", p), err) }
  if err := oprot.WriteBinary(p.EncryptedKeyChain); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.encryptedKeyChain (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:encryptedKeyChain: ", p), err) }
  return err
}

func (p *TalkServiceRespondE2EEKeyExchangeArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("hashKeyChain", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:hashKeyChain: ", p), err) }
  if err := oprot.WriteBinary(p.HashKeyChain); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.hashKeyChain (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:hashKeyChain: ", p), err) }
  return err
}

func (p *TalkServiceRespondE2EEKeyExchangeArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceRespondE2EEKeyExchangeArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceRespondE2EEKeyExchangeResult struct {
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceRespondE2EEKeyExchangeResult() *TalkServiceRespondE2EEKeyExchangeResult {
  return &TalkServiceRespondE2EEKeyExchangeResult{}
}

var TalkServiceRespondE2EEKeyExchangeResult_E_DEFAULT *TalkException
func (p *TalkServiceRespondE2EEKeyExchangeResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceRespondE2EEKeyExchangeResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceRespondE2EEKeyExchangeResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceRespondE2EEKeyExchangeResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceRespondE2EEKeyExchangeResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceRespondE2EEKeyExchangeResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("respondE2EEKeyExchange_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceRespondE2EEKeyExchangeResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceRespondE2EEKeyExchangeResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceRespondE2EEKeyExchangeResult(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - LocalContacts
type TalkServiceSyncContactsArgs struct {
  ReqSeq int32 `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
  LocalContacts []*ContactModification `thrift:"localContacts,2" db:"localContacts" json:"localContacts"`
}

func NewTalkServiceSyncContactsArgs() *TalkServiceSyncContactsArgs {
  return &TalkServiceSyncContactsArgs{}
}


func (p *TalkServiceSyncContactsArgs) GetReqSeq() int32 {
  return p.ReqSeq
}

func (p *TalkServiceSyncContactsArgs) GetLocalContacts() []*ContactModification {
  return p.LocalContacts
}
func (p *TalkServiceSyncContactsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceSyncContactsArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqSeq = v
}
  return nil
}

func (p *TalkServiceSyncContactsArgs)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*ContactModification, 0, size)
  p.LocalContacts =  tSlice
  for i := 0; i < size; i ++ {
    _elem337 := &ContactModification{}
    if err := _elem337.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem337), err)
    }
    p.LocalContacts = append(p.LocalContacts, _elem337)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TalkServiceSyncContactsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("syncContacts_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceSyncContactsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("reqSeq", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err) }
  if err := oprot.WriteI32(int32(p.ReqSeq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err) }
  return err
}

func (p *TalkServiceSyncContactsArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("localContacts", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:localContacts: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.LocalContacts)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.LocalContacts {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:localContacts: ", p), err) }
  return err
}

func (p *TalkServiceSyncContactsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceSyncContactsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceSyncContactsResult struct {
  Success map[string]*ContactRegistration `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceSyncContactsResult() *TalkServiceSyncContactsResult {
  return &TalkServiceSyncContactsResult{}
}

var TalkServiceSyncContactsResult_Success_DEFAULT map[string]*ContactRegistration

func (p *TalkServiceSyncContactsResult) GetSuccess() map[string]*ContactRegistration {
  return p.Success
}
var TalkServiceSyncContactsResult_E_DEFAULT *TalkException
func (p *TalkServiceSyncContactsResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceSyncContactsResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceSyncContactsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceSyncContactsResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceSyncContactsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceSyncContactsResult)  ReadField0(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]*ContactRegistration, size)
  p.Success =  tMap
  for i := 0; i < size; i ++ {
var _key338 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key338 = v
}
    _val339 := &ContactRegistration{}
    if err := _val339.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val339), err)
    }
    p.Success[_key338] = _val339
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *TalkServiceSyncContactsResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceSyncContactsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("syncContacts_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceSyncContactsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.MAP, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range p.Success {
      if err := oprot.WriteString(string(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteMapEnd(); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceSyncContactsResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceSyncContactsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceSyncContactsResult(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - Phones
//  - Reference
type TalkServiceFindAndAddContactsByPhoneArgs struct {
  ReqSeq int32 `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
  Phones []string `thrift:"phones,2" db:"phones" json:"phones"`
  Reference string `thrift:"reference,3" db:"reference" json:"reference"`
}

func NewTalkServiceFindAndAddContactsByPhoneArgs() *TalkServiceFindAndAddContactsByPhoneArgs {
  return &TalkServiceFindAndAddContactsByPhoneArgs{}
}


func (p *TalkServiceFindAndAddContactsByPhoneArgs) GetReqSeq() int32 {
  return p.ReqSeq
}

func (p *TalkServiceFindAndAddContactsByPhoneArgs) GetPhones() []string {
  return p.Phones
}

func (p *TalkServiceFindAndAddContactsByPhoneArgs) GetReference() string {
  return p.Reference
}
func (p *TalkServiceFindAndAddContactsByPhoneArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.SET {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceFindAndAddContactsByPhoneArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqSeq = v
}
  return nil
}

func (p *TalkServiceFindAndAddContactsByPhoneArgs)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadSetBegin()
  if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
  }
  tSet := make([]string, 0, size)
  p.Phones =  tSet
  for i := 0; i < size; i ++ {
var _elem340 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem340 = v
}
    p.Phones = append(p.Phones, _elem340)
  }
  if err := iprot.ReadSetEnd(); err != nil {
    return thrift.PrependError("error reading set end: ", err)
  }
  return nil
}

func (p *TalkServiceFindAndAddContactsByPhoneArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Reference = v
}
  return nil
}

func (p *TalkServiceFindAndAddContactsByPhoneArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("findAndAddContactsByPhone_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceFindAndAddContactsByPhoneArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("reqSeq", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err) }
  if err := oprot.WriteI32(int32(p.ReqSeq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err) }
  return err
}

func (p *TalkServiceFindAndAddContactsByPhoneArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("phones", thrift.SET, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:phones: ", p), err) }
  if err := oprot.WriteSetBegin(thrift.STRING, len(p.Phones)); err != nil {
    return thrift.PrependError("error writing set begin: ", err)
  }
  for i := 0; i<len(p.Phones); i++ {
    for j := i+1; j<len(p.Phones); j++ {
      if reflect.DeepEqual(p.Phones[i],p.Phones[j]) { 
        return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", p.Phones[i]))
      }
    }
  }
  for _, v := range p.Phones {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteSetEnd(); err != nil {
    return thrift.PrependError("error writing set end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:phones: ", p), err) }
  return err
}

func (p *TalkServiceFindAndAddContactsByPhoneArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("reference", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:reference: ", p), err) }
  if err := oprot.WriteString(string(p.Reference)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reference (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:reference: ", p), err) }
  return err
}

func (p *TalkServiceFindAndAddContactsByPhoneArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceFindAndAddContactsByPhoneArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceFindAndAddContactsByPhoneResult struct {
  Success map[string]*Contact `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceFindAndAddContactsByPhoneResult() *TalkServiceFindAndAddContactsByPhoneResult {
  return &TalkServiceFindAndAddContactsByPhoneResult{}
}

var TalkServiceFindAndAddContactsByPhoneResult_Success_DEFAULT map[string]*Contact

func (p *TalkServiceFindAndAddContactsByPhoneResult) GetSuccess() map[string]*Contact {
  return p.Success
}
var TalkServiceFindAndAddContactsByPhoneResult_E_DEFAULT *TalkException
func (p *TalkServiceFindAndAddContactsByPhoneResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceFindAndAddContactsByPhoneResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceFindAndAddContactsByPhoneResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceFindAndAddContactsByPhoneResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceFindAndAddContactsByPhoneResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceFindAndAddContactsByPhoneResult)  ReadField0(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]*Contact, size)
  p.Success =  tMap
  for i := 0; i < size; i ++ {
var _key341 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key341 = v
}
    _val342 := &Contact{}
    if err := _val342.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val342), err)
    }
    p.Success[_key341] = _val342
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *TalkServiceFindAndAddContactsByPhoneResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceFindAndAddContactsByPhoneResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("findAndAddContactsByPhone_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceFindAndAddContactsByPhoneResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.MAP, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range p.Success {
      if err := oprot.WriteString(string(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteMapEnd(); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceFindAndAddContactsByPhoneResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceFindAndAddContactsByPhoneResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceFindAndAddContactsByPhoneResult(%+v)", *p)
}

// Attributes:
//  - LastRev
//  - Badge
type TalkServiceNotifySleepArgs struct {
  // unused field # 1
  LastRev int64 `thrift:"lastRev,2" db:"lastRev" json:"lastRev"`
  Badge int32 `thrift:"badge,3" db:"badge" json:"badge"`
}

func NewTalkServiceNotifySleepArgs() *TalkServiceNotifySleepArgs {
  return &TalkServiceNotifySleepArgs{}
}


func (p *TalkServiceNotifySleepArgs) GetLastRev() int64 {
  return p.LastRev
}

func (p *TalkServiceNotifySleepArgs) GetBadge() int32 {
  return p.Badge
}
func (p *TalkServiceNotifySleepArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceNotifySleepArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.LastRev = v
}
  return nil
}

func (p *TalkServiceNotifySleepArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Badge = v
}
  return nil
}

func (p *TalkServiceNotifySleepArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("notifySleep_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceNotifySleepArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("lastRev", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:lastRev: ", p), err) }
  if err := oprot.WriteI64(int64(p.LastRev)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.lastRev (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:lastRev: ", p), err) }
  return err
}

func (p *TalkServiceNotifySleepArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("badge", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:badge: ", p), err) }
  if err := oprot.WriteI32(int32(p.Badge)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.badge (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:badge: ", p), err) }
  return err
}

func (p *TalkServiceNotifySleepArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceNotifySleepArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceNotifySleepResult struct {
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceNotifySleepResult() *TalkServiceNotifySleepResult {
  return &TalkServiceNotifySleepResult{}
}

var TalkServiceNotifySleepResult_E_DEFAULT *TalkException
func (p *TalkServiceNotifySleepResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceNotifySleepResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceNotifySleepResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceNotifySleepResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceNotifySleepResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceNotifySleepResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("notifySleep_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceNotifySleepResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceNotifySleepResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceNotifySleepResult(%+v)", *p)
}

// Attributes:
//  - SyncOpRevision
//  - Profile
type TalkServiceReportProfileArgs struct {
  // unused field # 1
  SyncOpRevision int64 `thrift:"syncOpRevision,2" db:"syncOpRevision" json:"syncOpRevision"`
  Profile *Profile `thrift:"profile,3" db:"profile" json:"profile"`
}

func NewTalkServiceReportProfileArgs() *TalkServiceReportProfileArgs {
  return &TalkServiceReportProfileArgs{}
}


func (p *TalkServiceReportProfileArgs) GetSyncOpRevision() int64 {
  return p.SyncOpRevision
}
var TalkServiceReportProfileArgs_Profile_DEFAULT *Profile
func (p *TalkServiceReportProfileArgs) GetProfile() *Profile {
  if !p.IsSetProfile() {
    return TalkServiceReportProfileArgs_Profile_DEFAULT
  }
return p.Profile
}
func (p *TalkServiceReportProfileArgs) IsSetProfile() bool {
  return p.Profile != nil
}

func (p *TalkServiceReportProfileArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceReportProfileArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.SyncOpRevision = v
}
  return nil
}

func (p *TalkServiceReportProfileArgs)  ReadField3(iprot thrift.TProtocol) error {
  p.Profile = &Profile{}
  if err := p.Profile.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Profile), err)
  }
  return nil
}

func (p *TalkServiceReportProfileArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("reportProfile_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceReportProfileArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("syncOpRevision", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:syncOpRevision: ", p), err) }
  if err := oprot.WriteI64(int64(p.SyncOpRevision)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.syncOpRevision (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:syncOpRevision: ", p), err) }
  return err
}

func (p *TalkServiceReportProfileArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("profile", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:profile: ", p), err) }
  if err := p.Profile.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Profile), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:profile: ", p), err) }
  return err
}

func (p *TalkServiceReportProfileArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceReportProfileArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceReportProfileResult struct {
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceReportProfileResult() *TalkServiceReportProfileResult {
  return &TalkServiceReportProfileResult{}
}

var TalkServiceReportProfileResult_E_DEFAULT *TalkException
func (p *TalkServiceReportProfileResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceReportProfileResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceReportProfileResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceReportProfileResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceReportProfileResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceReportProfileResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("reportProfile_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceReportProfileResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceReportProfileResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceReportProfileResult(%+v)", *p)
}

// Attributes:
//  - LastRev
//  - DeviceInfo
//  - UdidHash
//  - OldUdidHash
type TalkServiceNotifyUpdatedArgs struct {
  // unused field # 1
  LastRev int64 `thrift:"lastRev,2" db:"lastRev" json:"lastRev"`
  DeviceInfo *DeviceInfo `thrift:"deviceInfo,3" db:"deviceInfo" json:"deviceInfo"`
  UdidHash string `thrift:"udidHash,4" db:"udidHash" json:"udidHash"`
  OldUdidHash string `thrift:"oldUdidHash,5" db:"oldUdidHash" json:"oldUdidHash"`
}

func NewTalkServiceNotifyUpdatedArgs() *TalkServiceNotifyUpdatedArgs {
  return &TalkServiceNotifyUpdatedArgs{}
}


func (p *TalkServiceNotifyUpdatedArgs) GetLastRev() int64 {
  return p.LastRev
}
var TalkServiceNotifyUpdatedArgs_DeviceInfo_DEFAULT *DeviceInfo
func (p *TalkServiceNotifyUpdatedArgs) GetDeviceInfo() *DeviceInfo {
  if !p.IsSetDeviceInfo() {
    return TalkServiceNotifyUpdatedArgs_DeviceInfo_DEFAULT
  }
return p.DeviceInfo
}

func (p *TalkServiceNotifyUpdatedArgs) GetUdidHash() string {
  return p.UdidHash
}

func (p *TalkServiceNotifyUpdatedArgs) GetOldUdidHash() string {
  return p.OldUdidHash
}
func (p *TalkServiceNotifyUpdatedArgs) IsSetDeviceInfo() bool {
  return p.DeviceInfo != nil
}

func (p *TalkServiceNotifyUpdatedArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceNotifyUpdatedArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.LastRev = v
}
  return nil
}

func (p *TalkServiceNotifyUpdatedArgs)  ReadField3(iprot thrift.TProtocol) error {
  p.DeviceInfo = &DeviceInfo{}
  if err := p.DeviceInfo.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.DeviceInfo), err)
  }
  return nil
}

func (p *TalkServiceNotifyUpdatedArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.UdidHash = v
}
  return nil
}

func (p *TalkServiceNotifyUpdatedArgs)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.OldUdidHash = v
}
  return nil
}

func (p *TalkServiceNotifyUpdatedArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("notifyUpdated_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceNotifyUpdatedArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("lastRev", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:lastRev: ", p), err) }
  if err := oprot.WriteI64(int64(p.LastRev)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.lastRev (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:lastRev: ", p), err) }
  return err
}

func (p *TalkServiceNotifyUpdatedArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("deviceInfo", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:deviceInfo: ", p), err) }
  if err := p.DeviceInfo.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.DeviceInfo), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:deviceInfo: ", p), err) }
  return err
}

func (p *TalkServiceNotifyUpdatedArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("udidHash", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:udidHash: ", p), err) }
  if err := oprot.WriteString(string(p.UdidHash)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.udidHash (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:udidHash: ", p), err) }
  return err
}

func (p *TalkServiceNotifyUpdatedArgs) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("oldUdidHash", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:oldUdidHash: ", p), err) }
  if err := oprot.WriteString(string(p.OldUdidHash)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.oldUdidHash (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:oldUdidHash: ", p), err) }
  return err
}

func (p *TalkServiceNotifyUpdatedArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceNotifyUpdatedArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceNotifyUpdatedResult struct {
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceNotifyUpdatedResult() *TalkServiceNotifyUpdatedResult {
  return &TalkServiceNotifyUpdatedResult{}
}

var TalkServiceNotifyUpdatedResult_E_DEFAULT *TalkException
func (p *TalkServiceNotifyUpdatedResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceNotifyUpdatedResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceNotifyUpdatedResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceNotifyUpdatedResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceNotifyUpdatedResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceNotifyUpdatedResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("notifyUpdated_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceNotifyUpdatedResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceNotifyUpdatedResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceNotifyUpdatedResult(%+v)", *p)
}

// Attributes:
//  - SyncOpRevision
//  - Settings
type TalkServiceReportSettingsArgs struct {
  // unused field # 1
  SyncOpRevision int64 `thrift:"syncOpRevision,2" db:"syncOpRevision" json:"syncOpRevision"`
  Settings *Settings `thrift:"settings,3" db:"settings" json:"settings"`
}

func NewTalkServiceReportSettingsArgs() *TalkServiceReportSettingsArgs {
  return &TalkServiceReportSettingsArgs{}
}


func (p *TalkServiceReportSettingsArgs) GetSyncOpRevision() int64 {
  return p.SyncOpRevision
}
var TalkServiceReportSettingsArgs_Settings_DEFAULT *Settings
func (p *TalkServiceReportSettingsArgs) GetSettings() *Settings {
  if !p.IsSetSettings() {
    return TalkServiceReportSettingsArgs_Settings_DEFAULT
  }
return p.Settings
}
func (p *TalkServiceReportSettingsArgs) IsSetSettings() bool {
  return p.Settings != nil
}

func (p *TalkServiceReportSettingsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceReportSettingsArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.SyncOpRevision = v
}
  return nil
}

func (p *TalkServiceReportSettingsArgs)  ReadField3(iprot thrift.TProtocol) error {
  p.Settings = &Settings{}
  if err := p.Settings.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Settings), err)
  }
  return nil
}

func (p *TalkServiceReportSettingsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("reportSettings_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceReportSettingsArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("syncOpRevision", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:syncOpRevision: ", p), err) }
  if err := oprot.WriteI64(int64(p.SyncOpRevision)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.syncOpRevision (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:syncOpRevision: ", p), err) }
  return err
}

func (p *TalkServiceReportSettingsArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("settings", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:settings: ", p), err) }
  if err := p.Settings.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Settings), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:settings: ", p), err) }
  return err
}

func (p *TalkServiceReportSettingsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceReportSettingsArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceReportSettingsResult struct {
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceReportSettingsResult() *TalkServiceReportSettingsResult {
  return &TalkServiceReportSettingsResult{}
}

var TalkServiceReportSettingsResult_E_DEFAULT *TalkException
func (p *TalkServiceReportSettingsResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceReportSettingsResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceReportSettingsResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceReportSettingsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceReportSettingsResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceReportSettingsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("reportSettings_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceReportSettingsResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceReportSettingsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceReportSettingsResult(%+v)", *p)
}

// Attributes:
//  - SyncReason
type TalkServiceGetBlockedContactIdsArgs struct {
  SyncReason SyncReason `thrift:"syncReason,1" db:"syncReason" json:"syncReason"`
}

func NewTalkServiceGetBlockedContactIdsArgs() *TalkServiceGetBlockedContactIdsArgs {
  return &TalkServiceGetBlockedContactIdsArgs{}
}


func (p *TalkServiceGetBlockedContactIdsArgs) GetSyncReason() SyncReason {
  return p.SyncReason
}
func (p *TalkServiceGetBlockedContactIdsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetBlockedContactIdsArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := SyncReason(v)
  p.SyncReason = temp
}
  return nil
}

func (p *TalkServiceGetBlockedContactIdsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getBlockedContactIds_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetBlockedContactIdsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("syncReason", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:syncReason: ", p), err) }
  if err := oprot.WriteI32(int32(p.SyncReason)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.syncReason (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:syncReason: ", p), err) }
  return err
}

func (p *TalkServiceGetBlockedContactIdsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetBlockedContactIdsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetBlockedContactIdsResult struct {
  Success []string `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetBlockedContactIdsResult() *TalkServiceGetBlockedContactIdsResult {
  return &TalkServiceGetBlockedContactIdsResult{}
}

var TalkServiceGetBlockedContactIdsResult_Success_DEFAULT []string

func (p *TalkServiceGetBlockedContactIdsResult) GetSuccess() []string {
  return p.Success
}
var TalkServiceGetBlockedContactIdsResult_E_DEFAULT *TalkException
func (p *TalkServiceGetBlockedContactIdsResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceGetBlockedContactIdsResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceGetBlockedContactIdsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceGetBlockedContactIdsResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceGetBlockedContactIdsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetBlockedContactIdsResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
var _elem343 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem343 = v
}
    p.Success = append(p.Success, _elem343)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TalkServiceGetBlockedContactIdsResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceGetBlockedContactIdsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getBlockedContactIds_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetBlockedContactIdsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRING, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetBlockedContactIdsResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetBlockedContactIdsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetBlockedContactIdsResult(%+v)", *p)
}

// Attributes:
//  - Location
//  - NetworkStatus
type TalkServiceOpenProximityMatchArgs struct {
  // unused field # 1
  Location *Location `thrift:"location,2" db:"location" json:"location"`
  NetworkStatus *ClientNetworkStatus `thrift:"networkStatus,3" db:"networkStatus" json:"networkStatus"`
}

func NewTalkServiceOpenProximityMatchArgs() *TalkServiceOpenProximityMatchArgs {
  return &TalkServiceOpenProximityMatchArgs{}
}

var TalkServiceOpenProximityMatchArgs_Location_DEFAULT *Location
func (p *TalkServiceOpenProximityMatchArgs) GetLocation() *Location {
  if !p.IsSetLocation() {
    return TalkServiceOpenProximityMatchArgs_Location_DEFAULT
  }
return p.Location
}
var TalkServiceOpenProximityMatchArgs_NetworkStatus_DEFAULT *ClientNetworkStatus
func (p *TalkServiceOpenProximityMatchArgs) GetNetworkStatus() *ClientNetworkStatus {
  if !p.IsSetNetworkStatus() {
    return TalkServiceOpenProximityMatchArgs_NetworkStatus_DEFAULT
  }
return p.NetworkStatus
}
func (p *TalkServiceOpenProximityMatchArgs) IsSetLocation() bool {
  return p.Location != nil
}

func (p *TalkServiceOpenProximityMatchArgs) IsSetNetworkStatus() bool {
  return p.NetworkStatus != nil
}

func (p *TalkServiceOpenProximityMatchArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceOpenProximityMatchArgs)  ReadField2(iprot thrift.TProtocol) error {
  p.Location = &Location{}
  if err := p.Location.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Location), err)
  }
  return nil
}

func (p *TalkServiceOpenProximityMatchArgs)  ReadField3(iprot thrift.TProtocol) error {
  p.NetworkStatus = &ClientNetworkStatus{}
  if err := p.NetworkStatus.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.NetworkStatus), err)
  }
  return nil
}

func (p *TalkServiceOpenProximityMatchArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("openProximityMatch_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceOpenProximityMatchArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("location", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:location: ", p), err) }
  if err := p.Location.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Location), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:location: ", p), err) }
  return err
}

func (p *TalkServiceOpenProximityMatchArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("networkStatus", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:networkStatus: ", p), err) }
  if err := p.NetworkStatus.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.NetworkStatus), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:networkStatus: ", p), err) }
  return err
}

func (p *TalkServiceOpenProximityMatchArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceOpenProximityMatchArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceOpenProximityMatchResult struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceOpenProximityMatchResult() *TalkServiceOpenProximityMatchResult {
  return &TalkServiceOpenProximityMatchResult{}
}

var TalkServiceOpenProximityMatchResult_Success_DEFAULT string
func (p *TalkServiceOpenProximityMatchResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return TalkServiceOpenProximityMatchResult_Success_DEFAULT
  }
return *p.Success
}
var TalkServiceOpenProximityMatchResult_E_DEFAULT *TalkException
func (p *TalkServiceOpenProximityMatchResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceOpenProximityMatchResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceOpenProximityMatchResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceOpenProximityMatchResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceOpenProximityMatchResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceOpenProximityMatchResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *TalkServiceOpenProximityMatchResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceOpenProximityMatchResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("openProximityMatch_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceOpenProximityMatchResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceOpenProximityMatchResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceOpenProximityMatchResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceOpenProximityMatchResult(%+v)", *p)
}

// Attributes:
//  - Direction
//  - MidOrEMid
type TalkServiceRemoveFriendRequestArgs struct {
  Direction Direction `thrift:"direction,1" db:"direction" json:"direction"`
  MidOrEMid string `thrift:"midOrEMid,2" db:"midOrEMid" json:"midOrEMid"`
}

func NewTalkServiceRemoveFriendRequestArgs() *TalkServiceRemoveFriendRequestArgs {
  return &TalkServiceRemoveFriendRequestArgs{}
}


func (p *TalkServiceRemoveFriendRequestArgs) GetDirection() Direction {
  return p.Direction
}

func (p *TalkServiceRemoveFriendRequestArgs) GetMidOrEMid() string {
  return p.MidOrEMid
}
func (p *TalkServiceRemoveFriendRequestArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceRemoveFriendRequestArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := Direction(v)
  p.Direction = temp
}
  return nil
}

func (p *TalkServiceRemoveFriendRequestArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.MidOrEMid = v
}
  return nil
}

func (p *TalkServiceRemoveFriendRequestArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("removeFriendRequest_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceRemoveFriendRequestArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("direction", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:direction: ", p), err) }
  if err := oprot.WriteI32(int32(p.Direction)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.direction (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:direction: ", p), err) }
  return err
}

func (p *TalkServiceRemoveFriendRequestArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("midOrEMid", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:midOrEMid: ", p), err) }
  if err := oprot.WriteString(string(p.MidOrEMid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.midOrEMid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:midOrEMid: ", p), err) }
  return err
}

func (p *TalkServiceRemoveFriendRequestArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceRemoveFriendRequestArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceRemoveFriendRequestResult struct {
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceRemoveFriendRequestResult() *TalkServiceRemoveFriendRequestResult {
  return &TalkServiceRemoveFriendRequestResult{}
}

var TalkServiceRemoveFriendRequestResult_E_DEFAULT *TalkException
func (p *TalkServiceRemoveFriendRequestResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceRemoveFriendRequestResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceRemoveFriendRequestResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceRemoveFriendRequestResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceRemoveFriendRequestResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceRemoveFriendRequestResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("removeFriendRequest_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceRemoveFriendRequestResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceRemoveFriendRequestResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceRemoveFriendRequestResult(%+v)", *p)
}

// Attributes:
//  - Token
//  - Type
type TalkServiceUpdateNotificationTokenArgs struct {
  // unused field # 1
  Token string `thrift:"token,2" db:"token" json:"token"`
  Type UpdateNotificationTokenType `thrift:"type,3" db:"type" json:"type"`
}

func NewTalkServiceUpdateNotificationTokenArgs() *TalkServiceUpdateNotificationTokenArgs {
  return &TalkServiceUpdateNotificationTokenArgs{}
}


func (p *TalkServiceUpdateNotificationTokenArgs) GetToken() string {
  return p.Token
}

func (p *TalkServiceUpdateNotificationTokenArgs) GetType() UpdateNotificationTokenType {
  return p.Type
}
func (p *TalkServiceUpdateNotificationTokenArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceUpdateNotificationTokenArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Token = v
}
  return nil
}

func (p *TalkServiceUpdateNotificationTokenArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := UpdateNotificationTokenType(v)
  p.Type = temp
}
  return nil
}

func (p *TalkServiceUpdateNotificationTokenArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateNotificationToken_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceUpdateNotificationTokenArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("token", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:token: ", p), err) }
  if err := oprot.WriteString(string(p.Token)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.token (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:token: ", p), err) }
  return err
}

func (p *TalkServiceUpdateNotificationTokenArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("type", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:type: ", p), err) }
  if err := oprot.WriteI32(int32(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:type: ", p), err) }
  return err
}

func (p *TalkServiceUpdateNotificationTokenArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceUpdateNotificationTokenArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceUpdateNotificationTokenResult struct {
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceUpdateNotificationTokenResult() *TalkServiceUpdateNotificationTokenResult {
  return &TalkServiceUpdateNotificationTokenResult{}
}

var TalkServiceUpdateNotificationTokenResult_E_DEFAULT *TalkException
func (p *TalkServiceUpdateNotificationTokenResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceUpdateNotificationTokenResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceUpdateNotificationTokenResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceUpdateNotificationTokenResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceUpdateNotificationTokenResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceUpdateNotificationTokenResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateNotificationToken_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceUpdateNotificationTokenResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceUpdateNotificationTokenResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceUpdateNotificationTokenResult(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - Attr
//  - ExtendedProfile
type TalkServiceUpdateExtendedProfileAttributeArgs struct {
  ReqSeq int32 `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
  Attr UpdateExtendedProfileAttributeAttr `thrift:"attr,2" db:"attr" json:"attr"`
  ExtendedProfile *ExtendedProfile `thrift:"extendedProfile,3" db:"extendedProfile" json:"extendedProfile"`
}

func NewTalkServiceUpdateExtendedProfileAttributeArgs() *TalkServiceUpdateExtendedProfileAttributeArgs {
  return &TalkServiceUpdateExtendedProfileAttributeArgs{}
}


func (p *TalkServiceUpdateExtendedProfileAttributeArgs) GetReqSeq() int32 {
  return p.ReqSeq
}

func (p *TalkServiceUpdateExtendedProfileAttributeArgs) GetAttr() UpdateExtendedProfileAttributeAttr {
  return p.Attr
}
var TalkServiceUpdateExtendedProfileAttributeArgs_ExtendedProfile_DEFAULT *ExtendedProfile
func (p *TalkServiceUpdateExtendedProfileAttributeArgs) GetExtendedProfile() *ExtendedProfile {
  if !p.IsSetExtendedProfile() {
    return TalkServiceUpdateExtendedProfileAttributeArgs_ExtendedProfile_DEFAULT
  }
return p.ExtendedProfile
}
func (p *TalkServiceUpdateExtendedProfileAttributeArgs) IsSetExtendedProfile() bool {
  return p.ExtendedProfile != nil
}

func (p *TalkServiceUpdateExtendedProfileAttributeArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceUpdateExtendedProfileAttributeArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqSeq = v
}
  return nil
}

func (p *TalkServiceUpdateExtendedProfileAttributeArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := UpdateExtendedProfileAttributeAttr(v)
  p.Attr = temp
}
  return nil
}

func (p *TalkServiceUpdateExtendedProfileAttributeArgs)  ReadField3(iprot thrift.TProtocol) error {
  p.ExtendedProfile = &ExtendedProfile{}
  if err := p.ExtendedProfile.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ExtendedProfile), err)
  }
  return nil
}

func (p *TalkServiceUpdateExtendedProfileAttributeArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateExtendedProfileAttribute_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceUpdateExtendedProfileAttributeArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("reqSeq", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err) }
  if err := oprot.WriteI32(int32(p.ReqSeq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err) }
  return err
}

func (p *TalkServiceUpdateExtendedProfileAttributeArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("attr", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:attr: ", p), err) }
  if err := oprot.WriteI32(int32(p.Attr)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.attr (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:attr: ", p), err) }
  return err
}

func (p *TalkServiceUpdateExtendedProfileAttributeArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("extendedProfile", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:extendedProfile: ", p), err) }
  if err := p.ExtendedProfile.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ExtendedProfile), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:extendedProfile: ", p), err) }
  return err
}

func (p *TalkServiceUpdateExtendedProfileAttributeArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceUpdateExtendedProfileAttributeArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceUpdateExtendedProfileAttributeResult struct {
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceUpdateExtendedProfileAttributeResult() *TalkServiceUpdateExtendedProfileAttributeResult {
  return &TalkServiceUpdateExtendedProfileAttributeResult{}
}

var TalkServiceUpdateExtendedProfileAttributeResult_E_DEFAULT *TalkException
func (p *TalkServiceUpdateExtendedProfileAttributeResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceUpdateExtendedProfileAttributeResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceUpdateExtendedProfileAttributeResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceUpdateExtendedProfileAttributeResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceUpdateExtendedProfileAttributeResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceUpdateExtendedProfileAttributeResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateExtendedProfileAttribute_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceUpdateExtendedProfileAttributeResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceUpdateExtendedProfileAttributeResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceUpdateExtendedProfileAttributeResult(%+v)", *p)
}

// Attributes:
//  - IdentityCredential
//  - MigrationPincodeSessionId
type TalkServiceVerifyIdentityCredentialWithResultArgs struct {
  // unused field # 1
  IdentityCredential *IdentityCredential `thrift:"identityCredential,2" db:"identityCredential" json:"identityCredential"`
  MigrationPincodeSessionId string `thrift:"migrationPincodeSessionId,3" db:"migrationPincodeSessionId" json:"migrationPincodeSessionId"`
}

func NewTalkServiceVerifyIdentityCredentialWithResultArgs() *TalkServiceVerifyIdentityCredentialWithResultArgs {
  return &TalkServiceVerifyIdentityCredentialWithResultArgs{}
}

var TalkServiceVerifyIdentityCredentialWithResultArgs_IdentityCredential_DEFAULT *IdentityCredential
func (p *TalkServiceVerifyIdentityCredentialWithResultArgs) GetIdentityCredential() *IdentityCredential {
  if !p.IsSetIdentityCredential() {
    return TalkServiceVerifyIdentityCredentialWithResultArgs_IdentityCredential_DEFAULT
  }
return p.IdentityCredential
}

func (p *TalkServiceVerifyIdentityCredentialWithResultArgs) GetMigrationPincodeSessionId() string {
  return p.MigrationPincodeSessionId
}
func (p *TalkServiceVerifyIdentityCredentialWithResultArgs) IsSetIdentityCredential() bool {
  return p.IdentityCredential != nil
}

func (p *TalkServiceVerifyIdentityCredentialWithResultArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceVerifyIdentityCredentialWithResultArgs)  ReadField2(iprot thrift.TProtocol) error {
  p.IdentityCredential = &IdentityCredential{}
  if err := p.IdentityCredential.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.IdentityCredential), err)
  }
  return nil
}

func (p *TalkServiceVerifyIdentityCredentialWithResultArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.MigrationPincodeSessionId = v
}
  return nil
}

func (p *TalkServiceVerifyIdentityCredentialWithResultArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("verifyIdentityCredentialWithResult_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceVerifyIdentityCredentialWithResultArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("identityCredential", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:identityCredential: ", p), err) }
  if err := p.IdentityCredential.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.IdentityCredential), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:identityCredential: ", p), err) }
  return err
}

func (p *TalkServiceVerifyIdentityCredentialWithResultArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("migrationPincodeSessionId", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:migrationPincodeSessionId: ", p), err) }
  if err := oprot.WriteString(string(p.MigrationPincodeSessionId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.migrationPincodeSessionId (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:migrationPincodeSessionId: ", p), err) }
  return err
}

func (p *TalkServiceVerifyIdentityCredentialWithResultArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceVerifyIdentityCredentialWithResultArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceVerifyIdentityCredentialWithResultResult struct {
  Success *UserAuthStatus `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceVerifyIdentityCredentialWithResultResult() *TalkServiceVerifyIdentityCredentialWithResultResult {
  return &TalkServiceVerifyIdentityCredentialWithResultResult{}
}

var TalkServiceVerifyIdentityCredentialWithResultResult_Success_DEFAULT *UserAuthStatus
func (p *TalkServiceVerifyIdentityCredentialWithResultResult) GetSuccess() *UserAuthStatus {
  if !p.IsSetSuccess() {
    return TalkServiceVerifyIdentityCredentialWithResultResult_Success_DEFAULT
  }
return p.Success
}
var TalkServiceVerifyIdentityCredentialWithResultResult_E_DEFAULT *TalkException
func (p *TalkServiceVerifyIdentityCredentialWithResultResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceVerifyIdentityCredentialWithResultResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceVerifyIdentityCredentialWithResultResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceVerifyIdentityCredentialWithResultResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceVerifyIdentityCredentialWithResultResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceVerifyIdentityCredentialWithResultResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &UserAuthStatus{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TalkServiceVerifyIdentityCredentialWithResultResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceVerifyIdentityCredentialWithResultResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("verifyIdentityCredentialWithResult_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceVerifyIdentityCredentialWithResultResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceVerifyIdentityCredentialWithResultResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceVerifyIdentityCredentialWithResultResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceVerifyIdentityCredentialWithResultResult(%+v)", *p)
}

// Attributes:
//  - Identifier
//  - Provider
//  - Locale
type TalkServiceRequestAccountPasswordResetArgs struct {
  // unused field # 1
  Identifier string `thrift:"identifier,2" db:"identifier" json:"identifier"`
  // unused field # 3
  Provider IdentityProvider `thrift:"provider,4" db:"provider" json:"provider"`
  Locale string `thrift:"locale,5" db:"locale" json:"locale"`
}

func NewTalkServiceRequestAccountPasswordResetArgs() *TalkServiceRequestAccountPasswordResetArgs {
  return &TalkServiceRequestAccountPasswordResetArgs{}
}


func (p *TalkServiceRequestAccountPasswordResetArgs) GetIdentifier() string {
  return p.Identifier
}

func (p *TalkServiceRequestAccountPasswordResetArgs) GetProvider() IdentityProvider {
  return p.Provider
}

func (p *TalkServiceRequestAccountPasswordResetArgs) GetLocale() string {
  return p.Locale
}
func (p *TalkServiceRequestAccountPasswordResetArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceRequestAccountPasswordResetArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Identifier = v
}
  return nil
}

func (p *TalkServiceRequestAccountPasswordResetArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  temp := IdentityProvider(v)
  p.Provider = temp
}
  return nil
}

func (p *TalkServiceRequestAccountPasswordResetArgs)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Locale = v
}
  return nil
}

func (p *TalkServiceRequestAccountPasswordResetArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("requestAccountPasswordReset_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceRequestAccountPasswordResetArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("identifier", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:identifier: ", p), err) }
  if err := oprot.WriteString(string(p.Identifier)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.identifier (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:identifier: ", p), err) }
  return err
}

func (p *TalkServiceRequestAccountPasswordResetArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("provider", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:provider: ", p), err) }
  if err := oprot.WriteI32(int32(p.Provider)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.provider (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:provider: ", p), err) }
  return err
}

func (p *TalkServiceRequestAccountPasswordResetArgs) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("locale", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:locale: ", p), err) }
  if err := oprot.WriteString(string(p.Locale)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.locale (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:locale: ", p), err) }
  return err
}

func (p *TalkServiceRequestAccountPasswordResetArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceRequestAccountPasswordResetArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceRequestAccountPasswordResetResult struct {
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceRequestAccountPasswordResetResult() *TalkServiceRequestAccountPasswordResetResult {
  return &TalkServiceRequestAccountPasswordResetResult{}
}

var TalkServiceRequestAccountPasswordResetResult_E_DEFAULT *TalkException
func (p *TalkServiceRequestAccountPasswordResetResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceRequestAccountPasswordResetResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceRequestAccountPasswordResetResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceRequestAccountPasswordResetResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceRequestAccountPasswordResetResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceRequestAccountPasswordResetResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("requestAccountPasswordReset_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceRequestAccountPasswordResetResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceRequestAccountPasswordResetResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceRequestAccountPasswordResetResult(%+v)", *p)
}

// Attributes:
//  - Request
type TalkServiceSendPostbackArgs struct {
  // unused field # 1
  Request *SendPostbackRequest `thrift:"request,2" db:"request" json:"request"`
}

func NewTalkServiceSendPostbackArgs() *TalkServiceSendPostbackArgs {
  return &TalkServiceSendPostbackArgs{}
}

var TalkServiceSendPostbackArgs_Request_DEFAULT *SendPostbackRequest
func (p *TalkServiceSendPostbackArgs) GetRequest() *SendPostbackRequest {
  if !p.IsSetRequest() {
    return TalkServiceSendPostbackArgs_Request_DEFAULT
  }
return p.Request
}
func (p *TalkServiceSendPostbackArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *TalkServiceSendPostbackArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceSendPostbackArgs)  ReadField2(iprot thrift.TProtocol) error {
  p.Request = &SendPostbackRequest{}
  if err := p.Request.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *TalkServiceSendPostbackArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("sendPostback_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceSendPostbackArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:request: ", p), err) }
  if err := p.Request.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:request: ", p), err) }
  return err
}

func (p *TalkServiceSendPostbackArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceSendPostbackArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceSendPostbackResult struct {
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceSendPostbackResult() *TalkServiceSendPostbackResult {
  return &TalkServiceSendPostbackResult{}
}

var TalkServiceSendPostbackResult_E_DEFAULT *TalkException
func (p *TalkServiceSendPostbackResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceSendPostbackResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceSendPostbackResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceSendPostbackResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceSendPostbackResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceSendPostbackResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("sendPostback_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceSendPostbackResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceSendPostbackResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceSendPostbackResult(%+v)", *p)
}

// Attributes:
//  - MidOrEMid
//  - Method
//  - FriendRequestParams
type TalkServiceTryFriendRequestArgs struct {
  MidOrEMid string `thrift:"midOrEMid,1" db:"midOrEMid" json:"midOrEMid"`
  Method FriendRequestMethod `thrift:"method,2" db:"method" json:"method"`
  FriendRequestParams string `thrift:"friendRequestParams,3" db:"friendRequestParams" json:"friendRequestParams"`
}

func NewTalkServiceTryFriendRequestArgs() *TalkServiceTryFriendRequestArgs {
  return &TalkServiceTryFriendRequestArgs{}
}


func (p *TalkServiceTryFriendRequestArgs) GetMidOrEMid() string {
  return p.MidOrEMid
}

func (p *TalkServiceTryFriendRequestArgs) GetMethod() FriendRequestMethod {
  return p.Method
}

func (p *TalkServiceTryFriendRequestArgs) GetFriendRequestParams() string {
  return p.FriendRequestParams
}
func (p *TalkServiceTryFriendRequestArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceTryFriendRequestArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.MidOrEMid = v
}
  return nil
}

func (p *TalkServiceTryFriendRequestArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := FriendRequestMethod(v)
  p.Method = temp
}
  return nil
}

func (p *TalkServiceTryFriendRequestArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.FriendRequestParams = v
}
  return nil
}

func (p *TalkServiceTryFriendRequestArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("tryFriendRequest_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceTryFriendRequestArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("midOrEMid", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:midOrEMid: ", p), err) }
  if err := oprot.WriteString(string(p.MidOrEMid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.midOrEMid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:midOrEMid: ", p), err) }
  return err
}

func (p *TalkServiceTryFriendRequestArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("method", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:method: ", p), err) }
  if err := oprot.WriteI32(int32(p.Method)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.method (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:method: ", p), err) }
  return err
}

func (p *TalkServiceTryFriendRequestArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("friendRequestParams", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:friendRequestParams: ", p), err) }
  if err := oprot.WriteString(string(p.FriendRequestParams)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.friendRequestParams (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:friendRequestParams: ", p), err) }
  return err
}

func (p *TalkServiceTryFriendRequestArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceTryFriendRequestArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceTryFriendRequestResult struct {
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceTryFriendRequestResult() *TalkServiceTryFriendRequestResult {
  return &TalkServiceTryFriendRequestResult{}
}

var TalkServiceTryFriendRequestResult_E_DEFAULT *TalkException
func (p *TalkServiceTryFriendRequestResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceTryFriendRequestResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceTryFriendRequestResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceTryFriendRequestResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceTryFriendRequestResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceTryFriendRequestResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("tryFriendRequest_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceTryFriendRequestResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceTryFriendRequestResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceTryFriendRequestResult(%+v)", *p)
}

// Attributes:
//  - SessionId
//  - Ids
type TalkServiceAcceptProximityMatchesArgs struct {
  // unused field # 1
  SessionId string `thrift:"sessionId,2" db:"sessionId" json:"sessionId"`
  Ids []string `thrift:"ids,3" db:"ids" json:"ids"`
}

func NewTalkServiceAcceptProximityMatchesArgs() *TalkServiceAcceptProximityMatchesArgs {
  return &TalkServiceAcceptProximityMatchesArgs{}
}


func (p *TalkServiceAcceptProximityMatchesArgs) GetSessionId() string {
  return p.SessionId
}

func (p *TalkServiceAcceptProximityMatchesArgs) GetIds() []string {
  return p.Ids
}
func (p *TalkServiceAcceptProximityMatchesArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.SET {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceAcceptProximityMatchesArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.SessionId = v
}
  return nil
}

func (p *TalkServiceAcceptProximityMatchesArgs)  ReadField3(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadSetBegin()
  if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
  }
  tSet := make([]string, 0, size)
  p.Ids =  tSet
  for i := 0; i < size; i ++ {
var _elem344 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem344 = v
}
    p.Ids = append(p.Ids, _elem344)
  }
  if err := iprot.ReadSetEnd(); err != nil {
    return thrift.PrependError("error reading set end: ", err)
  }
  return nil
}

func (p *TalkServiceAcceptProximityMatchesArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("acceptProximityMatches_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceAcceptProximityMatchesArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("sessionId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:sessionId: ", p), err) }
  if err := oprot.WriteString(string(p.SessionId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sessionId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:sessionId: ", p), err) }
  return err
}

func (p *TalkServiceAcceptProximityMatchesArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("ids", thrift.SET, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ids: ", p), err) }
  if err := oprot.WriteSetBegin(thrift.STRING, len(p.Ids)); err != nil {
    return thrift.PrependError("error writing set begin: ", err)
  }
  for i := 0; i<len(p.Ids); i++ {
    for j := i+1; j<len(p.Ids); j++ {
      if reflect.DeepEqual(p.Ids[i],p.Ids[j]) { 
        return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", p.Ids[i]))
      }
    }
  }
  for _, v := range p.Ids {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteSetEnd(); err != nil {
    return thrift.PrependError("error writing set end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ids: ", p), err) }
  return err
}

func (p *TalkServiceAcceptProximityMatchesArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceAcceptProximityMatchesArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceAcceptProximityMatchesResult struct {
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceAcceptProximityMatchesResult() *TalkServiceAcceptProximityMatchesResult {
  return &TalkServiceAcceptProximityMatchesResult{}
}

var TalkServiceAcceptProximityMatchesResult_E_DEFAULT *TalkException
func (p *TalkServiceAcceptProximityMatchesResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceAcceptProximityMatchesResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceAcceptProximityMatchesResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceAcceptProximityMatchesResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceAcceptProximityMatchesResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceAcceptProximityMatchesResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("acceptProximityMatches_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceAcceptProximityMatchesResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceAcceptProximityMatchesResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceAcceptProximityMatchesResult(%+v)", *p)
}

// Attributes:
//  - Ids
type TalkServiceGetContactsArgs struct {
  // unused field # 1
  Ids []string `thrift:"ids,2" db:"ids" json:"ids"`
}

func NewTalkServiceGetContactsArgs() *TalkServiceGetContactsArgs {
  return &TalkServiceGetContactsArgs{}
}


func (p *TalkServiceGetContactsArgs) GetIds() []string {
  return p.Ids
}
func (p *TalkServiceGetContactsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetContactsArgs)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Ids =  tSlice
  for i := 0; i < size; i ++ {
var _elem345 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem345 = v
}
    p.Ids = append(p.Ids, _elem345)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TalkServiceGetContactsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getContacts_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetContactsArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("ids", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ids: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.Ids)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Ids {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ids: ", p), err) }
  return err
}

func (p *TalkServiceGetContactsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetContactsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetContactsResult struct {
  Success []*Contact `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetContactsResult() *TalkServiceGetContactsResult {
  return &TalkServiceGetContactsResult{}
}

var TalkServiceGetContactsResult_Success_DEFAULT []*Contact

func (p *TalkServiceGetContactsResult) GetSuccess() []*Contact {
  return p.Success
}
var TalkServiceGetContactsResult_E_DEFAULT *TalkException
func (p *TalkServiceGetContactsResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceGetContactsResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceGetContactsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceGetContactsResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceGetContactsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetContactsResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Contact, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem346 := &Contact{}
    if err := _elem346.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem346), err)
    }
    p.Success = append(p.Success, _elem346)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TalkServiceGetContactsResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceGetContactsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getContacts_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetContactsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetContactsResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetContactsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetContactsResult(%+v)", *p)
}

// Attributes:
//  - BooleanState
//  - StringState
type TalkServiceReportDeviceStateArgs struct {
  // unused field # 1
  BooleanState map[C59122ec]bool `thrift:"booleanState,2" db:"booleanState" json:"booleanState"`
  StringState map[C59430gc]string `thrift:"stringState,3" db:"stringState" json:"stringState"`
}

func NewTalkServiceReportDeviceStateArgs() *TalkServiceReportDeviceStateArgs {
  return &TalkServiceReportDeviceStateArgs{}
}


func (p *TalkServiceReportDeviceStateArgs) GetBooleanState() map[C59122ec]bool {
  return p.BooleanState
}

func (p *TalkServiceReportDeviceStateArgs) GetStringState() map[C59430gc]string {
  return p.StringState
}
func (p *TalkServiceReportDeviceStateArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceReportDeviceStateArgs)  ReadField2(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[C59122ec]bool, size)
  p.BooleanState =  tMap
  for i := 0; i < size; i ++ {
var _key347 C59122ec
    if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := C59122ec(v)
    _key347 = temp
}
var _val348 bool
    if v, err := iprot.ReadBool(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val348 = v
}
    p.BooleanState[_key347] = _val348
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *TalkServiceReportDeviceStateArgs)  ReadField3(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[C59430gc]string, size)
  p.StringState =  tMap
  for i := 0; i < size; i ++ {
var _key349 C59430gc
    if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := C59430gc(v)
    _key349 = temp
}
var _val350 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val350 = v
}
    p.StringState[_key349] = _val350
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *TalkServiceReportDeviceStateArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("reportDeviceState_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceReportDeviceStateArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("booleanState", thrift.MAP, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:booleanState: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.I32, thrift.BOOL, len(p.BooleanState)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.BooleanState {
    if err := oprot.WriteI32(int32(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteBool(bool(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:booleanState: ", p), err) }
  return err
}

func (p *TalkServiceReportDeviceStateArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("stringState", thrift.MAP, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:stringState: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.I32, thrift.STRING, len(p.StringState)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.StringState {
    if err := oprot.WriteI32(int32(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:stringState: ", p), err) }
  return err
}

func (p *TalkServiceReportDeviceStateArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceReportDeviceStateArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceReportDeviceStateResult struct {
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceReportDeviceStateResult() *TalkServiceReportDeviceStateResult {
  return &TalkServiceReportDeviceStateResult{}
}

var TalkServiceReportDeviceStateResult_E_DEFAULT *TalkException
func (p *TalkServiceReportDeviceStateResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceReportDeviceStateResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceReportDeviceStateResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceReportDeviceStateResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceReportDeviceStateResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceReportDeviceStateResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("reportDeviceState_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceReportDeviceStateResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceReportDeviceStateResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceReportDeviceStateResult(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - ID
type TalkServiceBlockContactArgs struct {
  ReqSeq int32 `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
  ID string `thrift:"id,2" db:"id" json:"id"`
}

func NewTalkServiceBlockContactArgs() *TalkServiceBlockContactArgs {
  return &TalkServiceBlockContactArgs{}
}


func (p *TalkServiceBlockContactArgs) GetReqSeq() int32 {
  return p.ReqSeq
}

func (p *TalkServiceBlockContactArgs) GetID() string {
  return p.ID
}
func (p *TalkServiceBlockContactArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceBlockContactArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqSeq = v
}
  return nil
}

func (p *TalkServiceBlockContactArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *TalkServiceBlockContactArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("blockContact_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceBlockContactArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("reqSeq", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err) }
  if err := oprot.WriteI32(int32(p.ReqSeq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err) }
  return err
}

func (p *TalkServiceBlockContactArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:id: ", p), err) }
  if err := oprot.WriteString(string(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:id: ", p), err) }
  return err
}

func (p *TalkServiceBlockContactArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceBlockContactArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceBlockContactResult struct {
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceBlockContactResult() *TalkServiceBlockContactResult {
  return &TalkServiceBlockContactResult{}
}

var TalkServiceBlockContactResult_E_DEFAULT *TalkException
func (p *TalkServiceBlockContactResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceBlockContactResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceBlockContactResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceBlockContactResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceBlockContactResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceBlockContactResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("blockContact_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceBlockContactResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceBlockContactResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceBlockContactResult(%+v)", *p)
}

// Attributes:
//  - SyncReason
type TalkServiceGetExtendedProfileArgs struct {
  SyncReason SyncReason `thrift:"syncReason,1" db:"syncReason" json:"syncReason"`
}

func NewTalkServiceGetExtendedProfileArgs() *TalkServiceGetExtendedProfileArgs {
  return &TalkServiceGetExtendedProfileArgs{}
}


func (p *TalkServiceGetExtendedProfileArgs) GetSyncReason() SyncReason {
  return p.SyncReason
}
func (p *TalkServiceGetExtendedProfileArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetExtendedProfileArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := SyncReason(v)
  p.SyncReason = temp
}
  return nil
}

func (p *TalkServiceGetExtendedProfileArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getExtendedProfile_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetExtendedProfileArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("syncReason", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:syncReason: ", p), err) }
  if err := oprot.WriteI32(int32(p.SyncReason)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.syncReason (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:syncReason: ", p), err) }
  return err
}

func (p *TalkServiceGetExtendedProfileArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetExtendedProfileArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetExtendedProfileResult struct {
  Success *ExtendedProfile `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetExtendedProfileResult() *TalkServiceGetExtendedProfileResult {
  return &TalkServiceGetExtendedProfileResult{}
}

var TalkServiceGetExtendedProfileResult_Success_DEFAULT *ExtendedProfile
func (p *TalkServiceGetExtendedProfileResult) GetSuccess() *ExtendedProfile {
  if !p.IsSetSuccess() {
    return TalkServiceGetExtendedProfileResult_Success_DEFAULT
  }
return p.Success
}
var TalkServiceGetExtendedProfileResult_E_DEFAULT *TalkException
func (p *TalkServiceGetExtendedProfileResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceGetExtendedProfileResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceGetExtendedProfileResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceGetExtendedProfileResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceGetExtendedProfileResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetExtendedProfileResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &ExtendedProfile{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TalkServiceGetExtendedProfileResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceGetExtendedProfileResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getExtendedProfile_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetExtendedProfileResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetExtendedProfileResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetExtendedProfileResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetExtendedProfileResult(%+v)", *p)
}

// Attributes:
//  - AttributesToRetrieve
type TalkServiceGetSettingsAttributes2Args struct {
  // unused field # 1
  AttributesToRetrieve []SettingAttribute `thrift:"attributesToRetrieve,2" db:"attributesToRetrieve" json:"attributesToRetrieve"`
}

func NewTalkServiceGetSettingsAttributes2Args() *TalkServiceGetSettingsAttributes2Args {
  return &TalkServiceGetSettingsAttributes2Args{}
}


func (p *TalkServiceGetSettingsAttributes2Args) GetAttributesToRetrieve() []SettingAttribute {
  return p.AttributesToRetrieve
}
func (p *TalkServiceGetSettingsAttributes2Args) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.SET {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetSettingsAttributes2Args)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadSetBegin()
  if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
  }
  tSet := make([]SettingAttribute, 0, size)
  p.AttributesToRetrieve =  tSet
  for i := 0; i < size; i ++ {
var _elem351 SettingAttribute
    if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := SettingAttribute(v)
    _elem351 = temp
}
    p.AttributesToRetrieve = append(p.AttributesToRetrieve, _elem351)
  }
  if err := iprot.ReadSetEnd(); err != nil {
    return thrift.PrependError("error reading set end: ", err)
  }
  return nil
}

func (p *TalkServiceGetSettingsAttributes2Args) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getSettingsAttributes2_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetSettingsAttributes2Args) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("attributesToRetrieve", thrift.SET, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:attributesToRetrieve: ", p), err) }
  if err := oprot.WriteSetBegin(thrift.I32, len(p.AttributesToRetrieve)); err != nil {
    return thrift.PrependError("error writing set begin: ", err)
  }
  for i := 0; i<len(p.AttributesToRetrieve); i++ {
    for j := i+1; j<len(p.AttributesToRetrieve); j++ {
      if reflect.DeepEqual(p.AttributesToRetrieve[i],p.AttributesToRetrieve[j]) { 
        return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", p.AttributesToRetrieve[i]))
      }
    }
  }
  for _, v := range p.AttributesToRetrieve {
    if err := oprot.WriteI32(int32(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteSetEnd(); err != nil {
    return thrift.PrependError("error writing set end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:attributesToRetrieve: ", p), err) }
  return err
}

func (p *TalkServiceGetSettingsAttributes2Args) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetSettingsAttributes2Args(%+v)", *p)
}

// Attributes:
//  - Success
type TalkServiceGetSettingsAttributes2Result struct {
  Success *Settings `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTalkServiceGetSettingsAttributes2Result() *TalkServiceGetSettingsAttributes2Result {
  return &TalkServiceGetSettingsAttributes2Result{}
}

var TalkServiceGetSettingsAttributes2Result_Success_DEFAULT *Settings
func (p *TalkServiceGetSettingsAttributes2Result) GetSuccess() *Settings {
  if !p.IsSetSuccess() {
    return TalkServiceGetSettingsAttributes2Result_Success_DEFAULT
  }
return p.Success
}
func (p *TalkServiceGetSettingsAttributes2Result) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceGetSettingsAttributes2Result) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetSettingsAttributes2Result)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &Settings{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TalkServiceGetSettingsAttributes2Result) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getSettingsAttributes2_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetSettingsAttributes2Result) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetSettingsAttributes2Result) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetSettingsAttributes2Result(%+v)", *p)
}

// Attributes:
//  - SyncReason
type TalkServiceGetProfileArgs struct {
  SyncReason SyncReason `thrift:"syncReason,1" db:"syncReason" json:"syncReason"`
}

func NewTalkServiceGetProfileArgs() *TalkServiceGetProfileArgs {
  return &TalkServiceGetProfileArgs{}
}


func (p *TalkServiceGetProfileArgs) GetSyncReason() SyncReason {
  return p.SyncReason
}
func (p *TalkServiceGetProfileArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetProfileArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := SyncReason(v)
  p.SyncReason = temp
}
  return nil
}

func (p *TalkServiceGetProfileArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getProfile_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetProfileArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("syncReason", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:syncReason: ", p), err) }
  if err := oprot.WriteI32(int32(p.SyncReason)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.syncReason (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:syncReason: ", p), err) }
  return err
}

func (p *TalkServiceGetProfileArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetProfileArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetProfileResult struct {
  Success *Profile `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetProfileResult() *TalkServiceGetProfileResult {
  return &TalkServiceGetProfileResult{}
}

var TalkServiceGetProfileResult_Success_DEFAULT *Profile
func (p *TalkServiceGetProfileResult) GetSuccess() *Profile {
  if !p.IsSetSuccess() {
    return TalkServiceGetProfileResult_Success_DEFAULT
  }
return p.Success
}
var TalkServiceGetProfileResult_E_DEFAULT *TalkException
func (p *TalkServiceGetProfileResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceGetProfileResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceGetProfileResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceGetProfileResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceGetProfileResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetProfileResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &Profile{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TalkServiceGetProfileResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceGetProfileResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getProfile_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetProfileResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetProfileResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetProfileResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetProfileResult(%+v)", *p)
}

// Attributes:
//  - SessionId
type TalkServiceGetProximityMatchCandidateListArgs struct {
  // unused field # 1
  SessionId string `thrift:"sessionId,2" db:"sessionId" json:"sessionId"`
}

func NewTalkServiceGetProximityMatchCandidateListArgs() *TalkServiceGetProximityMatchCandidateListArgs {
  return &TalkServiceGetProximityMatchCandidateListArgs{}
}


func (p *TalkServiceGetProximityMatchCandidateListArgs) GetSessionId() string {
  return p.SessionId
}
func (p *TalkServiceGetProximityMatchCandidateListArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetProximityMatchCandidateListArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.SessionId = v
}
  return nil
}

func (p *TalkServiceGetProximityMatchCandidateListArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getProximityMatchCandidateList_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetProximityMatchCandidateListArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("sessionId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:sessionId: ", p), err) }
  if err := oprot.WriteString(string(p.SessionId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sessionId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:sessionId: ", p), err) }
  return err
}

func (p *TalkServiceGetProximityMatchCandidateListArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetProximityMatchCandidateListArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetProximityMatchCandidateListResult struct {
  Success *ProximityMatchCandidateResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetProximityMatchCandidateListResult() *TalkServiceGetProximityMatchCandidateListResult {
  return &TalkServiceGetProximityMatchCandidateListResult{}
}

var TalkServiceGetProximityMatchCandidateListResult_Success_DEFAULT *ProximityMatchCandidateResult_
func (p *TalkServiceGetProximityMatchCandidateListResult) GetSuccess() *ProximityMatchCandidateResult_ {
  if !p.IsSetSuccess() {
    return TalkServiceGetProximityMatchCandidateListResult_Success_DEFAULT
  }
return p.Success
}
var TalkServiceGetProximityMatchCandidateListResult_E_DEFAULT *TalkException
func (p *TalkServiceGetProximityMatchCandidateListResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceGetProximityMatchCandidateListResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceGetProximityMatchCandidateListResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceGetProximityMatchCandidateListResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceGetProximityMatchCandidateListResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetProximityMatchCandidateListResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &ProximityMatchCandidateResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TalkServiceGetProximityMatchCandidateListResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceGetProximityMatchCandidateListResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getProximityMatchCandidateList_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetProximityMatchCandidateListResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetProximityMatchCandidateListResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetProximityMatchCandidateListResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetProximityMatchCandidateListResult(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - SearchId
//  - Reference
type TalkServiceFindAndAddContactByMetaTagArgs struct {
  ReqSeq int32 `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
  SearchId string `thrift:"searchId,2" db:"searchId" json:"searchId"`
  Reference string `thrift:"reference,3" db:"reference" json:"reference"`
}

func NewTalkServiceFindAndAddContactByMetaTagArgs() *TalkServiceFindAndAddContactByMetaTagArgs {
  return &TalkServiceFindAndAddContactByMetaTagArgs{}
}


func (p *TalkServiceFindAndAddContactByMetaTagArgs) GetReqSeq() int32 {
  return p.ReqSeq
}

func (p *TalkServiceFindAndAddContactByMetaTagArgs) GetSearchId() string {
  return p.SearchId
}

func (p *TalkServiceFindAndAddContactByMetaTagArgs) GetReference() string {
  return p.Reference
}
func (p *TalkServiceFindAndAddContactByMetaTagArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceFindAndAddContactByMetaTagArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqSeq = v
}
  return nil
}

func (p *TalkServiceFindAndAddContactByMetaTagArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.SearchId = v
}
  return nil
}

func (p *TalkServiceFindAndAddContactByMetaTagArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Reference = v
}
  return nil
}

func (p *TalkServiceFindAndAddContactByMetaTagArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("findAndAddContactByMetaTag_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceFindAndAddContactByMetaTagArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("reqSeq", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err) }
  if err := oprot.WriteI32(int32(p.ReqSeq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err) }
  return err
}

func (p *TalkServiceFindAndAddContactByMetaTagArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("searchId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:searchId: ", p), err) }
  if err := oprot.WriteString(string(p.SearchId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.searchId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:searchId: ", p), err) }
  return err
}

func (p *TalkServiceFindAndAddContactByMetaTagArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("reference", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:reference: ", p), err) }
  if err := oprot.WriteString(string(p.Reference)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reference (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:reference: ", p), err) }
  return err
}

func (p *TalkServiceFindAndAddContactByMetaTagArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceFindAndAddContactByMetaTagArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceFindAndAddContactByMetaTagResult struct {
  Success *PendingAgreementsResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceFindAndAddContactByMetaTagResult() *TalkServiceFindAndAddContactByMetaTagResult {
  return &TalkServiceFindAndAddContactByMetaTagResult{}
}

var TalkServiceFindAndAddContactByMetaTagResult_Success_DEFAULT *PendingAgreementsResponse
func (p *TalkServiceFindAndAddContactByMetaTagResult) GetSuccess() *PendingAgreementsResponse {
  if !p.IsSetSuccess() {
    return TalkServiceFindAndAddContactByMetaTagResult_Success_DEFAULT
  }
return p.Success
}
var TalkServiceFindAndAddContactByMetaTagResult_E_DEFAULT *TalkException
func (p *TalkServiceFindAndAddContactByMetaTagResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceFindAndAddContactByMetaTagResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceFindAndAddContactByMetaTagResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceFindAndAddContactByMetaTagResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceFindAndAddContactByMetaTagResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceFindAndAddContactByMetaTagResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &PendingAgreementsResponse{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TalkServiceFindAndAddContactByMetaTagResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceFindAndAddContactByMetaTagResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("findAndAddContactByMetaTag_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceFindAndAddContactByMetaTagResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceFindAndAddContactByMetaTagResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceFindAndAddContactByMetaTagResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceFindAndAddContactByMetaTagResult(%+v)", *p)
}

// Attributes:
//  - ChatIds
//  - SyncReason
type TalkServiceGetMessageReadRangeArgs struct {
  // unused field # 1
  ChatIds []string `thrift:"chatIds,2" db:"chatIds" json:"chatIds"`
  SyncReason SyncReason `thrift:"syncReason,3" db:"syncReason" json:"syncReason"`
}

func NewTalkServiceGetMessageReadRangeArgs() *TalkServiceGetMessageReadRangeArgs {
  return &TalkServiceGetMessageReadRangeArgs{}
}


func (p *TalkServiceGetMessageReadRangeArgs) GetChatIds() []string {
  return p.ChatIds
}

func (p *TalkServiceGetMessageReadRangeArgs) GetSyncReason() SyncReason {
  return p.SyncReason
}
func (p *TalkServiceGetMessageReadRangeArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetMessageReadRangeArgs)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.ChatIds =  tSlice
  for i := 0; i < size; i ++ {
var _elem352 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem352 = v
}
    p.ChatIds = append(p.ChatIds, _elem352)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TalkServiceGetMessageReadRangeArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := SyncReason(v)
  p.SyncReason = temp
}
  return nil
}

func (p *TalkServiceGetMessageReadRangeArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getMessageReadRange_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetMessageReadRangeArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("chatIds", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:chatIds: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.ChatIds)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.ChatIds {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:chatIds: ", p), err) }
  return err
}

func (p *TalkServiceGetMessageReadRangeArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("syncReason", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:syncReason: ", p), err) }
  if err := oprot.WriteI32(int32(p.SyncReason)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.syncReason (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:syncReason: ", p), err) }
  return err
}

func (p *TalkServiceGetMessageReadRangeArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetMessageReadRangeArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetMessageReadRangeResult struct {
  Success []*TMessageReadRange `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetMessageReadRangeResult() *TalkServiceGetMessageReadRangeResult {
  return &TalkServiceGetMessageReadRangeResult{}
}

var TalkServiceGetMessageReadRangeResult_Success_DEFAULT []*TMessageReadRange

func (p *TalkServiceGetMessageReadRangeResult) GetSuccess() []*TMessageReadRange {
  return p.Success
}
var TalkServiceGetMessageReadRangeResult_E_DEFAULT *TalkException
func (p *TalkServiceGetMessageReadRangeResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceGetMessageReadRangeResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceGetMessageReadRangeResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceGetMessageReadRangeResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceGetMessageReadRangeResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetMessageReadRangeResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TMessageReadRange, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem353 := &TMessageReadRange{}
    if err := _elem353.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem353), err)
    }
    p.Success = append(p.Success, _elem353)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TalkServiceGetMessageReadRangeResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceGetMessageReadRangeResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getMessageReadRange_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetMessageReadRangeResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetMessageReadRangeResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetMessageReadRangeResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetMessageReadRangeResult(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - SearchId
type TalkServiceRegisterUseridArgs struct {
  ReqSeq int32 `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
  SearchId string `thrift:"searchId,2" db:"searchId" json:"searchId"`
}

func NewTalkServiceRegisterUseridArgs() *TalkServiceRegisterUseridArgs {
  return &TalkServiceRegisterUseridArgs{}
}


func (p *TalkServiceRegisterUseridArgs) GetReqSeq() int32 {
  return p.ReqSeq
}

func (p *TalkServiceRegisterUseridArgs) GetSearchId() string {
  return p.SearchId
}
func (p *TalkServiceRegisterUseridArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceRegisterUseridArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqSeq = v
}
  return nil
}

func (p *TalkServiceRegisterUseridArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.SearchId = v
}
  return nil
}

func (p *TalkServiceRegisterUseridArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("registerUserid_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceRegisterUseridArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("reqSeq", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err) }
  if err := oprot.WriteI32(int32(p.ReqSeq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err) }
  return err
}

func (p *TalkServiceRegisterUseridArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("searchId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:searchId: ", p), err) }
  if err := oprot.WriteString(string(p.SearchId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.searchId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:searchId: ", p), err) }
  return err
}

func (p *TalkServiceRegisterUseridArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceRegisterUseridArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceRegisterUseridResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceRegisterUseridResult() *TalkServiceRegisterUseridResult {
  return &TalkServiceRegisterUseridResult{}
}

var TalkServiceRegisterUseridResult_Success_DEFAULT bool
func (p *TalkServiceRegisterUseridResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return TalkServiceRegisterUseridResult_Success_DEFAULT
  }
return *p.Success
}
var TalkServiceRegisterUseridResult_E_DEFAULT *TalkException
func (p *TalkServiceRegisterUseridResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceRegisterUseridResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceRegisterUseridResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceRegisterUseridResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceRegisterUseridResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceRegisterUseridResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *TalkServiceRegisterUseridResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceRegisterUseridResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("registerUserid_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceRegisterUseridResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceRegisterUseridResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceRegisterUseridResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceRegisterUseridResult(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - PushRecvReports
type TalkServiceReportPushRecvReportsArgs struct {
  ReqSeq int32 `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
  PushRecvReports []*PushRecvReport `thrift:"pushRecvReports,2" db:"pushRecvReports" json:"pushRecvReports"`
}

func NewTalkServiceReportPushRecvReportsArgs() *TalkServiceReportPushRecvReportsArgs {
  return &TalkServiceReportPushRecvReportsArgs{}
}


func (p *TalkServiceReportPushRecvReportsArgs) GetReqSeq() int32 {
  return p.ReqSeq
}

func (p *TalkServiceReportPushRecvReportsArgs) GetPushRecvReports() []*PushRecvReport {
  return p.PushRecvReports
}
func (p *TalkServiceReportPushRecvReportsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceReportPushRecvReportsArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqSeq = v
}
  return nil
}

func (p *TalkServiceReportPushRecvReportsArgs)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*PushRecvReport, 0, size)
  p.PushRecvReports =  tSlice
  for i := 0; i < size; i ++ {
    _elem354 := &PushRecvReport{}
    if err := _elem354.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem354), err)
    }
    p.PushRecvReports = append(p.PushRecvReports, _elem354)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TalkServiceReportPushRecvReportsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("reportPushRecvReports_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceReportPushRecvReportsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("reqSeq", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err) }
  if err := oprot.WriteI32(int32(p.ReqSeq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err) }
  return err
}

func (p *TalkServiceReportPushRecvReportsArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("pushRecvReports", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:pushRecvReports: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.PushRecvReports)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.PushRecvReports {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:pushRecvReports: ", p), err) }
  return err
}

func (p *TalkServiceReportPushRecvReportsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceReportPushRecvReportsArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceReportPushRecvReportsResult struct {
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceReportPushRecvReportsResult() *TalkServiceReportPushRecvReportsResult {
  return &TalkServiceReportPushRecvReportsResult{}
}

var TalkServiceReportPushRecvReportsResult_E_DEFAULT *TalkException
func (p *TalkServiceReportPushRecvReportsResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceReportPushRecvReportsResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceReportPushRecvReportsResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceReportPushRecvReportsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceReportPushRecvReportsResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceReportPushRecvReportsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("reportPushRecvReports_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceReportPushRecvReportsResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceReportPushRecvReportsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceReportPushRecvReportsResult(%+v)", *p)
}

type TalkServiceNoopArgs struct {
}

func NewTalkServiceNoopArgs() *TalkServiceNoopArgs {
  return &TalkServiceNoopArgs{}
}

func (p *TalkServiceNoopArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceNoopArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("noop_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceNoopArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceNoopArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceNoopResult struct {
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceNoopResult() *TalkServiceNoopResult {
  return &TalkServiceNoopResult{}
}

var TalkServiceNoopResult_E_DEFAULT *TalkException
func (p *TalkServiceNoopResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceNoopResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceNoopResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceNoopResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceNoopResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceNoopResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("noop_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceNoopResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceNoopResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceNoopResult(%+v)", *p)
}

// Attributes:
//  - SyncReason
type TalkServiceGetBlockedRecommendationIdsArgs struct {
  SyncReason SyncReason `thrift:"syncReason,1" db:"syncReason" json:"syncReason"`
}

func NewTalkServiceGetBlockedRecommendationIdsArgs() *TalkServiceGetBlockedRecommendationIdsArgs {
  return &TalkServiceGetBlockedRecommendationIdsArgs{}
}


func (p *TalkServiceGetBlockedRecommendationIdsArgs) GetSyncReason() SyncReason {
  return p.SyncReason
}
func (p *TalkServiceGetBlockedRecommendationIdsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetBlockedRecommendationIdsArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := SyncReason(v)
  p.SyncReason = temp
}
  return nil
}

func (p *TalkServiceGetBlockedRecommendationIdsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getBlockedRecommendationIds_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetBlockedRecommendationIdsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("syncReason", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:syncReason: ", p), err) }
  if err := oprot.WriteI32(int32(p.SyncReason)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.syncReason (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:syncReason: ", p), err) }
  return err
}

func (p *TalkServiceGetBlockedRecommendationIdsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetBlockedRecommendationIdsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetBlockedRecommendationIdsResult struct {
  Success []string `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetBlockedRecommendationIdsResult() *TalkServiceGetBlockedRecommendationIdsResult {
  return &TalkServiceGetBlockedRecommendationIdsResult{}
}

var TalkServiceGetBlockedRecommendationIdsResult_Success_DEFAULT []string

func (p *TalkServiceGetBlockedRecommendationIdsResult) GetSuccess() []string {
  return p.Success
}
var TalkServiceGetBlockedRecommendationIdsResult_E_DEFAULT *TalkException
func (p *TalkServiceGetBlockedRecommendationIdsResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceGetBlockedRecommendationIdsResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceGetBlockedRecommendationIdsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceGetBlockedRecommendationIdsResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceGetBlockedRecommendationIdsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetBlockedRecommendationIdsResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
var _elem355 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem355 = v
}
    p.Success = append(p.Success, _elem355)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TalkServiceGetBlockedRecommendationIdsResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceGetBlockedRecommendationIdsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getBlockedRecommendationIds_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetBlockedRecommendationIdsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRING, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetBlockedRecommendationIdsResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetBlockedRecommendationIdsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetBlockedRecommendationIdsResult(%+v)", *p)
}

// Attributes:
//  - RemoveFollowerRequest
type TalkServiceRemoveFollowerArgs struct {
  // unused field # 1
  RemoveFollowerRequest *RemoveFollowerRequest `thrift:"removeFollowerRequest,2" db:"removeFollowerRequest" json:"removeFollowerRequest"`
}

func NewTalkServiceRemoveFollowerArgs() *TalkServiceRemoveFollowerArgs {
  return &TalkServiceRemoveFollowerArgs{}
}

var TalkServiceRemoveFollowerArgs_RemoveFollowerRequest_DEFAULT *RemoveFollowerRequest
func (p *TalkServiceRemoveFollowerArgs) GetRemoveFollowerRequest() *RemoveFollowerRequest {
  if !p.IsSetRemoveFollowerRequest() {
    return TalkServiceRemoveFollowerArgs_RemoveFollowerRequest_DEFAULT
  }
return p.RemoveFollowerRequest
}
func (p *TalkServiceRemoveFollowerArgs) IsSetRemoveFollowerRequest() bool {
  return p.RemoveFollowerRequest != nil
}

func (p *TalkServiceRemoveFollowerArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceRemoveFollowerArgs)  ReadField2(iprot thrift.TProtocol) error {
  p.RemoveFollowerRequest = &RemoveFollowerRequest{}
  if err := p.RemoveFollowerRequest.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RemoveFollowerRequest), err)
  }
  return nil
}

func (p *TalkServiceRemoveFollowerArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("removeFollower_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceRemoveFollowerArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("removeFollowerRequest", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:removeFollowerRequest: ", p), err) }
  if err := p.RemoveFollowerRequest.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RemoveFollowerRequest), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:removeFollowerRequest: ", p), err) }
  return err
}

func (p *TalkServiceRemoveFollowerArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceRemoveFollowerArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceRemoveFollowerResult struct {
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceRemoveFollowerResult() *TalkServiceRemoveFollowerResult {
  return &TalkServiceRemoveFollowerResult{}
}

var TalkServiceRemoveFollowerResult_E_DEFAULT *TalkException
func (p *TalkServiceRemoveFollowerResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceRemoveFollowerResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceRemoveFollowerResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceRemoveFollowerResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceRemoveFollowerResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceRemoveFollowerResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("removeFollower_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceRemoveFollowerResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceRemoveFollowerResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceRemoveFollowerResult(%+v)", *p)
}

// Attributes:
//  - MigrationSessionId
type TalkServiceVerifyAccountMigrationArgs struct {
  // unused field # 1
  MigrationSessionId string `thrift:"migrationSessionId,2" db:"migrationSessionId" json:"migrationSessionId"`
}

func NewTalkServiceVerifyAccountMigrationArgs() *TalkServiceVerifyAccountMigrationArgs {
  return &TalkServiceVerifyAccountMigrationArgs{}
}


func (p *TalkServiceVerifyAccountMigrationArgs) GetMigrationSessionId() string {
  return p.MigrationSessionId
}
func (p *TalkServiceVerifyAccountMigrationArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceVerifyAccountMigrationArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.MigrationSessionId = v
}
  return nil
}

func (p *TalkServiceVerifyAccountMigrationArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("verifyAccountMigration_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceVerifyAccountMigrationArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("migrationSessionId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:migrationSessionId: ", p), err) }
  if err := oprot.WriteString(string(p.MigrationSessionId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.migrationSessionId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:migrationSessionId: ", p), err) }
  return err
}

func (p *TalkServiceVerifyAccountMigrationArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceVerifyAccountMigrationArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceVerifyAccountMigrationResult struct {
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceVerifyAccountMigrationResult() *TalkServiceVerifyAccountMigrationResult {
  return &TalkServiceVerifyAccountMigrationResult{}
}

var TalkServiceVerifyAccountMigrationResult_E_DEFAULT *TalkException
func (p *TalkServiceVerifyAccountMigrationResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceVerifyAccountMigrationResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceVerifyAccountMigrationResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceVerifyAccountMigrationResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceVerifyAccountMigrationResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceVerifyAccountMigrationResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("verifyAccountMigration_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceVerifyAccountMigrationResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceVerifyAccountMigrationResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceVerifyAccountMigrationResult(%+v)", *p)
}

// Attributes:
//  - SyncReason
type TalkServiceGetSettingsArgs struct {
  SyncReason SyncReason `thrift:"syncReason,1" db:"syncReason" json:"syncReason"`
}

func NewTalkServiceGetSettingsArgs() *TalkServiceGetSettingsArgs {
  return &TalkServiceGetSettingsArgs{}
}


func (p *TalkServiceGetSettingsArgs) GetSyncReason() SyncReason {
  return p.SyncReason
}
func (p *TalkServiceGetSettingsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetSettingsArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := SyncReason(v)
  p.SyncReason = temp
}
  return nil
}

func (p *TalkServiceGetSettingsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getSettings_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetSettingsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("syncReason", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:syncReason: ", p), err) }
  if err := oprot.WriteI32(int32(p.SyncReason)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.syncReason (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:syncReason: ", p), err) }
  return err
}

func (p *TalkServiceGetSettingsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetSettingsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetSettingsResult struct {
  Success *Settings `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetSettingsResult() *TalkServiceGetSettingsResult {
  return &TalkServiceGetSettingsResult{}
}

var TalkServiceGetSettingsResult_Success_DEFAULT *Settings
func (p *TalkServiceGetSettingsResult) GetSuccess() *Settings {
  if !p.IsSetSuccess() {
    return TalkServiceGetSettingsResult_Success_DEFAULT
  }
return p.Success
}
var TalkServiceGetSettingsResult_E_DEFAULT *TalkException
func (p *TalkServiceGetSettingsResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceGetSettingsResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceGetSettingsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceGetSettingsResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceGetSettingsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetSettingsResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &Settings{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TalkServiceGetSettingsResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceGetSettingsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getSettings_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetSettingsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetSettingsResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetSettingsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetSettingsResult(%+v)", *p)
}

// Attributes:
//  - KeyVersion
//  - ChatMid
type TalkServiceGetLastE2EEGroupSharedKeyArgs struct {
  // unused field # 1
  KeyVersion int32 `thrift:"keyVersion,2" db:"keyVersion" json:"keyVersion"`
  ChatMid string `thrift:"chatMid,3" db:"chatMid" json:"chatMid"`
}

func NewTalkServiceGetLastE2EEGroupSharedKeyArgs() *TalkServiceGetLastE2EEGroupSharedKeyArgs {
  return &TalkServiceGetLastE2EEGroupSharedKeyArgs{}
}


func (p *TalkServiceGetLastE2EEGroupSharedKeyArgs) GetKeyVersion() int32 {
  return p.KeyVersion
}

func (p *TalkServiceGetLastE2EEGroupSharedKeyArgs) GetChatMid() string {
  return p.ChatMid
}
func (p *TalkServiceGetLastE2EEGroupSharedKeyArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetLastE2EEGroupSharedKeyArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.KeyVersion = v
}
  return nil
}

func (p *TalkServiceGetLastE2EEGroupSharedKeyArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.ChatMid = v
}
  return nil
}

func (p *TalkServiceGetLastE2EEGroupSharedKeyArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getLastE2EEGroupSharedKey_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetLastE2EEGroupSharedKeyArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("keyVersion", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:keyVersion: ", p), err) }
  if err := oprot.WriteI32(int32(p.KeyVersion)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.keyVersion (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:keyVersion: ", p), err) }
  return err
}

func (p *TalkServiceGetLastE2EEGroupSharedKeyArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("chatMid", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:chatMid: ", p), err) }
  if err := oprot.WriteString(string(p.ChatMid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.chatMid (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:chatMid: ", p), err) }
  return err
}

func (p *TalkServiceGetLastE2EEGroupSharedKeyArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetLastE2EEGroupSharedKeyArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetLastE2EEGroupSharedKeyResult struct {
  Success *E2EEGroupSharedKey `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetLastE2EEGroupSharedKeyResult() *TalkServiceGetLastE2EEGroupSharedKeyResult {
  return &TalkServiceGetLastE2EEGroupSharedKeyResult{}
}

var TalkServiceGetLastE2EEGroupSharedKeyResult_Success_DEFAULT *E2EEGroupSharedKey
func (p *TalkServiceGetLastE2EEGroupSharedKeyResult) GetSuccess() *E2EEGroupSharedKey {
  if !p.IsSetSuccess() {
    return TalkServiceGetLastE2EEGroupSharedKeyResult_Success_DEFAULT
  }
return p.Success
}
var TalkServiceGetLastE2EEGroupSharedKeyResult_E_DEFAULT *TalkException
func (p *TalkServiceGetLastE2EEGroupSharedKeyResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceGetLastE2EEGroupSharedKeyResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceGetLastE2EEGroupSharedKeyResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceGetLastE2EEGroupSharedKeyResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceGetLastE2EEGroupSharedKeyResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetLastE2EEGroupSharedKeyResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &E2EEGroupSharedKey{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TalkServiceGetLastE2EEGroupSharedKeyResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceGetLastE2EEGroupSharedKeyResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getLastE2EEGroupSharedKey_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetLastE2EEGroupSharedKeyResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetLastE2EEGroupSharedKeyResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetLastE2EEGroupSharedKeyResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetLastE2EEGroupSharedKeyResult(%+v)", *p)
}

type TalkServiceGetRingbackToneArgs struct {
}

func NewTalkServiceGetRingbackToneArgs() *TalkServiceGetRingbackToneArgs {
  return &TalkServiceGetRingbackToneArgs{}
}

func (p *TalkServiceGetRingbackToneArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetRingbackToneArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getRingbackTone_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetRingbackToneArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetRingbackToneArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetRingbackToneResult struct {
  Success *RingbackTone `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetRingbackToneResult() *TalkServiceGetRingbackToneResult {
  return &TalkServiceGetRingbackToneResult{}
}

var TalkServiceGetRingbackToneResult_Success_DEFAULT *RingbackTone
func (p *TalkServiceGetRingbackToneResult) GetSuccess() *RingbackTone {
  if !p.IsSetSuccess() {
    return TalkServiceGetRingbackToneResult_Success_DEFAULT
  }
return p.Success
}
var TalkServiceGetRingbackToneResult_E_DEFAULT *TalkException
func (p *TalkServiceGetRingbackToneResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceGetRingbackToneResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceGetRingbackToneResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceGetRingbackToneResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceGetRingbackToneResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetRingbackToneResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &RingbackTone{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TalkServiceGetRingbackToneResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceGetRingbackToneResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getRingbackTone_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetRingbackToneResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetRingbackToneResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetRingbackToneResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetRingbackToneResult(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - RoomId
type TalkServiceLeaveRoomArgs struct {
  ReqSeq int32 `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
  RoomId string `thrift:"roomId,2" db:"roomId" json:"roomId"`
}

func NewTalkServiceLeaveRoomArgs() *TalkServiceLeaveRoomArgs {
  return &TalkServiceLeaveRoomArgs{}
}


func (p *TalkServiceLeaveRoomArgs) GetReqSeq() int32 {
  return p.ReqSeq
}

func (p *TalkServiceLeaveRoomArgs) GetRoomId() string {
  return p.RoomId
}
func (p *TalkServiceLeaveRoomArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceLeaveRoomArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqSeq = v
}
  return nil
}

func (p *TalkServiceLeaveRoomArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.RoomId = v
}
  return nil
}

func (p *TalkServiceLeaveRoomArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("leaveRoom_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceLeaveRoomArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("reqSeq", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err) }
  if err := oprot.WriteI32(int32(p.ReqSeq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err) }
  return err
}

func (p *TalkServiceLeaveRoomArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("roomId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:roomId: ", p), err) }
  if err := oprot.WriteString(string(p.RoomId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.roomId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:roomId: ", p), err) }
  return err
}

func (p *TalkServiceLeaveRoomArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceLeaveRoomArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceLeaveRoomResult struct {
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceLeaveRoomResult() *TalkServiceLeaveRoomResult {
  return &TalkServiceLeaveRoomResult{}
}

var TalkServiceLeaveRoomResult_E_DEFAULT *TalkException
func (p *TalkServiceLeaveRoomResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceLeaveRoomResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceLeaveRoomResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceLeaveRoomResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceLeaveRoomResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceLeaveRoomResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("leaveRoom_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceLeaveRoomResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceLeaveRoomResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceLeaveRoomResult(%+v)", *p)
}

// Attributes:
//  - Seq
//  - ChatMid
//  - LastMessageId
//  - SessionId
type TalkServiceSendChatCheckedArgs struct {
  Seq int32 `thrift:"seq,1" db:"seq" json:"seq"`
  ChatMid string `thrift:"chatMid,2" db:"chatMid" json:"chatMid"`
  LastMessageId string `thrift:"lastMessageId,3" db:"lastMessageId" json:"lastMessageId"`
  SessionId int32 `thrift:"sessionId,4" db:"sessionId" json:"sessionId"`
}

func NewTalkServiceSendChatCheckedArgs() *TalkServiceSendChatCheckedArgs {
  return &TalkServiceSendChatCheckedArgs{}
}


func (p *TalkServiceSendChatCheckedArgs) GetSeq() int32 {
  return p.Seq
}

func (p *TalkServiceSendChatCheckedArgs) GetChatMid() string {
  return p.ChatMid
}

func (p *TalkServiceSendChatCheckedArgs) GetLastMessageId() string {
  return p.LastMessageId
}

func (p *TalkServiceSendChatCheckedArgs) GetSessionId() int32 {
  return p.SessionId
}
func (p *TalkServiceSendChatCheckedArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceSendChatCheckedArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Seq = v
}
  return nil
}

func (p *TalkServiceSendChatCheckedArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ChatMid = v
}
  return nil
}

func (p *TalkServiceSendChatCheckedArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.LastMessageId = v
}
  return nil
}

func (p *TalkServiceSendChatCheckedArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.SessionId = v
}
  return nil
}

func (p *TalkServiceSendChatCheckedArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("sendChatChecked_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceSendChatCheckedArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("seq", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:seq: ", p), err) }
  if err := oprot.WriteI32(int32(p.Seq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.seq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:seq: ", p), err) }
  return err
}

func (p *TalkServiceSendChatCheckedArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("chatMid", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:chatMid: ", p), err) }
  if err := oprot.WriteString(string(p.ChatMid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.chatMid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:chatMid: ", p), err) }
  return err
}

func (p *TalkServiceSendChatCheckedArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("lastMessageId", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:lastMessageId: ", p), err) }
  if err := oprot.WriteString(string(p.LastMessageId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.lastMessageId (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:lastMessageId: ", p), err) }
  return err
}

func (p *TalkServiceSendChatCheckedArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("sessionId", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:sessionId: ", p), err) }
  if err := oprot.WriteI32(int32(p.SessionId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sessionId (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:sessionId: ", p), err) }
  return err
}

func (p *TalkServiceSendChatCheckedArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceSendChatCheckedArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceSendChatCheckedResult struct {
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceSendChatCheckedResult() *TalkServiceSendChatCheckedResult {
  return &TalkServiceSendChatCheckedResult{}
}

var TalkServiceSendChatCheckedResult_E_DEFAULT *TalkException
func (p *TalkServiceSendChatCheckedResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceSendChatCheckedResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceSendChatCheckedResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceSendChatCheckedResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceSendChatCheckedResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceSendChatCheckedResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("sendChatChecked_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceSendChatCheckedResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceSendChatCheckedResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceSendChatCheckedResult(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - SearchId
//  - Reference
type TalkServiceFindAndAddContactsByUseridArgs struct {
  ReqSeq int32 `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
  SearchId string `thrift:"searchId,2" db:"searchId" json:"searchId"`
  Reference string `thrift:"reference,3" db:"reference" json:"reference"`
}

func NewTalkServiceFindAndAddContactsByUseridArgs() *TalkServiceFindAndAddContactsByUseridArgs {
  return &TalkServiceFindAndAddContactsByUseridArgs{}
}


func (p *TalkServiceFindAndAddContactsByUseridArgs) GetReqSeq() int32 {
  return p.ReqSeq
}

func (p *TalkServiceFindAndAddContactsByUseridArgs) GetSearchId() string {
  return p.SearchId
}

func (p *TalkServiceFindAndAddContactsByUseridArgs) GetReference() string {
  return p.Reference
}
func (p *TalkServiceFindAndAddContactsByUseridArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceFindAndAddContactsByUseridArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqSeq = v
}
  return nil
}

func (p *TalkServiceFindAndAddContactsByUseridArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.SearchId = v
}
  return nil
}

func (p *TalkServiceFindAndAddContactsByUseridArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Reference = v
}
  return nil
}

func (p *TalkServiceFindAndAddContactsByUseridArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("findAndAddContactsByUserid_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceFindAndAddContactsByUseridArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("reqSeq", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err) }
  if err := oprot.WriteI32(int32(p.ReqSeq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err) }
  return err
}

func (p *TalkServiceFindAndAddContactsByUseridArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("searchId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:searchId: ", p), err) }
  if err := oprot.WriteString(string(p.SearchId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.searchId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:searchId: ", p), err) }
  return err
}

func (p *TalkServiceFindAndAddContactsByUseridArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("reference", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:reference: ", p), err) }
  if err := oprot.WriteString(string(p.Reference)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reference (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:reference: ", p), err) }
  return err
}

func (p *TalkServiceFindAndAddContactsByUseridArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceFindAndAddContactsByUseridArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceFindAndAddContactsByUseridResult struct {
  Success map[string]*Contact `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceFindAndAddContactsByUseridResult() *TalkServiceFindAndAddContactsByUseridResult {
  return &TalkServiceFindAndAddContactsByUseridResult{}
}

var TalkServiceFindAndAddContactsByUseridResult_Success_DEFAULT map[string]*Contact

func (p *TalkServiceFindAndAddContactsByUseridResult) GetSuccess() map[string]*Contact {
  return p.Success
}
var TalkServiceFindAndAddContactsByUseridResult_E_DEFAULT *TalkException
func (p *TalkServiceFindAndAddContactsByUseridResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceFindAndAddContactsByUseridResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceFindAndAddContactsByUseridResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceFindAndAddContactsByUseridResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceFindAndAddContactsByUseridResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceFindAndAddContactsByUseridResult)  ReadField0(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]*Contact, size)
  p.Success =  tMap
  for i := 0; i < size; i ++ {
var _key356 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key356 = v
}
    _val357 := &Contact{}
    if err := _val357.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val357), err)
    }
    p.Success[_key356] = _val357
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *TalkServiceFindAndAddContactsByUseridResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceFindAndAddContactsByUseridResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("findAndAddContactsByUserid_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceFindAndAddContactsByUseridResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.MAP, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range p.Success {
      if err := oprot.WriteString(string(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteMapEnd(); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceFindAndAddContactsByUseridResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceFindAndAddContactsByUseridResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceFindAndAddContactsByUseridResult(%+v)", *p)
}

// Attributes:
//  - SyncReason
type TalkServiceGetAllContactIdsArgs struct {
  SyncReason SyncReason `thrift:"syncReason,1" db:"syncReason" json:"syncReason"`
}

func NewTalkServiceGetAllContactIdsArgs() *TalkServiceGetAllContactIdsArgs {
  return &TalkServiceGetAllContactIdsArgs{}
}


func (p *TalkServiceGetAllContactIdsArgs) GetSyncReason() SyncReason {
  return p.SyncReason
}
func (p *TalkServiceGetAllContactIdsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetAllContactIdsArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := SyncReason(v)
  p.SyncReason = temp
}
  return nil
}

func (p *TalkServiceGetAllContactIdsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getAllContactIds_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetAllContactIdsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("syncReason", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:syncReason: ", p), err) }
  if err := oprot.WriteI32(int32(p.SyncReason)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.syncReason (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:syncReason: ", p), err) }
  return err
}

func (p *TalkServiceGetAllContactIdsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetAllContactIdsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetAllContactIdsResult struct {
  Success []string `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetAllContactIdsResult() *TalkServiceGetAllContactIdsResult {
  return &TalkServiceGetAllContactIdsResult{}
}

var TalkServiceGetAllContactIdsResult_Success_DEFAULT []string

func (p *TalkServiceGetAllContactIdsResult) GetSuccess() []string {
  return p.Success
}
var TalkServiceGetAllContactIdsResult_E_DEFAULT *TalkException
func (p *TalkServiceGetAllContactIdsResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceGetAllContactIdsResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceGetAllContactIdsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceGetAllContactIdsResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceGetAllContactIdsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetAllContactIdsResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
var _elem358 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem358 = v
}
    p.Success = append(p.Success, _elem358)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TalkServiceGetAllContactIdsResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceGetAllContactIdsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getAllContactIds_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetAllContactIdsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRING, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetAllContactIdsResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetAllContactIdsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetAllContactIdsResult(%+v)", *p)
}

// Attributes:
//  - UnfollowRequest
type TalkServiceUnfollowArgs struct {
  // unused field # 1
  UnfollowRequest *UnfollowRequest `thrift:"unfollowRequest,2" db:"unfollowRequest" json:"unfollowRequest"`
}

func NewTalkServiceUnfollowArgs() *TalkServiceUnfollowArgs {
  return &TalkServiceUnfollowArgs{}
}

var TalkServiceUnfollowArgs_UnfollowRequest_DEFAULT *UnfollowRequest
func (p *TalkServiceUnfollowArgs) GetUnfollowRequest() *UnfollowRequest {
  if !p.IsSetUnfollowRequest() {
    return TalkServiceUnfollowArgs_UnfollowRequest_DEFAULT
  }
return p.UnfollowRequest
}
func (p *TalkServiceUnfollowArgs) IsSetUnfollowRequest() bool {
  return p.UnfollowRequest != nil
}

func (p *TalkServiceUnfollowArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceUnfollowArgs)  ReadField2(iprot thrift.TProtocol) error {
  p.UnfollowRequest = &UnfollowRequest{}
  if err := p.UnfollowRequest.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UnfollowRequest), err)
  }
  return nil
}

func (p *TalkServiceUnfollowArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("unfollow_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceUnfollowArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("unfollowRequest", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:unfollowRequest: ", p), err) }
  if err := p.UnfollowRequest.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UnfollowRequest), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:unfollowRequest: ", p), err) }
  return err
}

func (p *TalkServiceUnfollowArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceUnfollowArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceUnfollowResult struct {
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceUnfollowResult() *TalkServiceUnfollowResult {
  return &TalkServiceUnfollowResult{}
}

var TalkServiceUnfollowResult_E_DEFAULT *TalkException
func (p *TalkServiceUnfollowResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceUnfollowResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceUnfollowResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceUnfollowResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceUnfollowResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceUnfollowResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("unfollow_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceUnfollowResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceUnfollowResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceUnfollowResult(%+v)", *p)
}

// Attributes:
//  - SessionId
type TalkServiceCloseProximityMatchArgs struct {
  // unused field # 1
  SessionId string `thrift:"sessionId,2" db:"sessionId" json:"sessionId"`
}

func NewTalkServiceCloseProximityMatchArgs() *TalkServiceCloseProximityMatchArgs {
  return &TalkServiceCloseProximityMatchArgs{}
}


func (p *TalkServiceCloseProximityMatchArgs) GetSessionId() string {
  return p.SessionId
}
func (p *TalkServiceCloseProximityMatchArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceCloseProximityMatchArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.SessionId = v
}
  return nil
}

func (p *TalkServiceCloseProximityMatchArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("closeProximityMatch_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceCloseProximityMatchArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("sessionId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:sessionId: ", p), err) }
  if err := oprot.WriteString(string(p.SessionId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sessionId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:sessionId: ", p), err) }
  return err
}

func (p *TalkServiceCloseProximityMatchArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceCloseProximityMatchArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceCloseProximityMatchResult struct {
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceCloseProximityMatchResult() *TalkServiceCloseProximityMatchResult {
  return &TalkServiceCloseProximityMatchResult{}
}

var TalkServiceCloseProximityMatchResult_E_DEFAULT *TalkException
func (p *TalkServiceCloseProximityMatchResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceCloseProximityMatchResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceCloseProximityMatchResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceCloseProximityMatchResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceCloseProximityMatchResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceCloseProximityMatchResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("closeProximityMatch_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceCloseProximityMatchResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceCloseProximityMatchResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceCloseProximityMatchResult(%+v)", *p)
}

// Attributes:
//  - PhoneNumberList
type TalkServiceInviteFriendsBySmsArgs struct {
  // unused field # 1
  PhoneNumberList []string `thrift:"phoneNumberList,2" db:"phoneNumberList" json:"phoneNumberList"`
}

func NewTalkServiceInviteFriendsBySmsArgs() *TalkServiceInviteFriendsBySmsArgs {
  return &TalkServiceInviteFriendsBySmsArgs{}
}


func (p *TalkServiceInviteFriendsBySmsArgs) GetPhoneNumberList() []string {
  return p.PhoneNumberList
}
func (p *TalkServiceInviteFriendsBySmsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceInviteFriendsBySmsArgs)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.PhoneNumberList =  tSlice
  for i := 0; i < size; i ++ {
var _elem359 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem359 = v
}
    p.PhoneNumberList = append(p.PhoneNumberList, _elem359)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TalkServiceInviteFriendsBySmsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("inviteFriendsBySms_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceInviteFriendsBySmsArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("phoneNumberList", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:phoneNumberList: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.PhoneNumberList)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.PhoneNumberList {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:phoneNumberList: ", p), err) }
  return err
}

func (p *TalkServiceInviteFriendsBySmsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceInviteFriendsBySmsArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceInviteFriendsBySmsResult struct {
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceInviteFriendsBySmsResult() *TalkServiceInviteFriendsBySmsResult {
  return &TalkServiceInviteFriendsBySmsResult{}
}

var TalkServiceInviteFriendsBySmsResult_E_DEFAULT *TalkException
func (p *TalkServiceInviteFriendsBySmsResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceInviteFriendsBySmsResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceInviteFriendsBySmsResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceInviteFriendsBySmsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceInviteFriendsBySmsResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceInviteFriendsBySmsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("inviteFriendsBySms_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceInviteFriendsBySmsResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceInviteFriendsBySmsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceInviteFriendsBySmsResult(%+v)", *p)
}

// Attributes:
//  - Categories
type TalkServiceGetChatEffectMetaListArgs struct {
  Categories []C58964da `thrift:"categories,1" db:"categories" json:"categories"`
}

func NewTalkServiceGetChatEffectMetaListArgs() *TalkServiceGetChatEffectMetaListArgs {
  return &TalkServiceGetChatEffectMetaListArgs{}
}


func (p *TalkServiceGetChatEffectMetaListArgs) GetCategories() []C58964da {
  return p.Categories
}
func (p *TalkServiceGetChatEffectMetaListArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.SET {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetChatEffectMetaListArgs)  ReadField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadSetBegin()
  if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
  }
  tSet := make([]C58964da, 0, size)
  p.Categories =  tSet
  for i := 0; i < size; i ++ {
var _elem360 C58964da
    if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := C58964da(v)
    _elem360 = temp
}
    p.Categories = append(p.Categories, _elem360)
  }
  if err := iprot.ReadSetEnd(); err != nil {
    return thrift.PrependError("error reading set end: ", err)
  }
  return nil
}

func (p *TalkServiceGetChatEffectMetaListArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getChatEffectMetaList_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetChatEffectMetaListArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("categories", thrift.SET, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:categories: ", p), err) }
  if err := oprot.WriteSetBegin(thrift.I32, len(p.Categories)); err != nil {
    return thrift.PrependError("error writing set begin: ", err)
  }
  for i := 0; i<len(p.Categories); i++ {
    for j := i+1; j<len(p.Categories); j++ {
      if reflect.DeepEqual(p.Categories[i],p.Categories[j]) { 
        return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", p.Categories[i]))
      }
    }
  }
  for _, v := range p.Categories {
    if err := oprot.WriteI32(int32(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteSetEnd(); err != nil {
    return thrift.PrependError("error writing set end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:categories: ", p), err) }
  return err
}

func (p *TalkServiceGetChatEffectMetaListArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetChatEffectMetaListArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetChatEffectMetaListResult struct {
  Success []*ChatEffectMeta `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetChatEffectMetaListResult() *TalkServiceGetChatEffectMetaListResult {
  return &TalkServiceGetChatEffectMetaListResult{}
}

var TalkServiceGetChatEffectMetaListResult_Success_DEFAULT []*ChatEffectMeta

func (p *TalkServiceGetChatEffectMetaListResult) GetSuccess() []*ChatEffectMeta {
  return p.Success
}
var TalkServiceGetChatEffectMetaListResult_E_DEFAULT *TalkException
func (p *TalkServiceGetChatEffectMetaListResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceGetChatEffectMetaListResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceGetChatEffectMetaListResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceGetChatEffectMetaListResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceGetChatEffectMetaListResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetChatEffectMetaListResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*ChatEffectMeta, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem361 := &ChatEffectMeta{}
    if err := _elem361.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem361), err)
    }
    p.Success = append(p.Success, _elem361)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TalkServiceGetChatEffectMetaListResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceGetChatEffectMetaListResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getChatEffectMetaList_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetChatEffectMetaListResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetChatEffectMetaListResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetChatEffectMetaListResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetChatEffectMetaListResult(%+v)", *p)
}

// Attributes:
//  - Seq
//  - LastMessageId
type TalkServiceRemoveAllMessagesArgs struct {
  Seq int32 `thrift:"seq,1" db:"seq" json:"seq"`
  LastMessageId string `thrift:"lastMessageId,2" db:"lastMessageId" json:"lastMessageId"`
}

func NewTalkServiceRemoveAllMessagesArgs() *TalkServiceRemoveAllMessagesArgs {
  return &TalkServiceRemoveAllMessagesArgs{}
}


func (p *TalkServiceRemoveAllMessagesArgs) GetSeq() int32 {
  return p.Seq
}

func (p *TalkServiceRemoveAllMessagesArgs) GetLastMessageId() string {
  return p.LastMessageId
}
func (p *TalkServiceRemoveAllMessagesArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceRemoveAllMessagesArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Seq = v
}
  return nil
}

func (p *TalkServiceRemoveAllMessagesArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.LastMessageId = v
}
  return nil
}

func (p *TalkServiceRemoveAllMessagesArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("removeAllMessages_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceRemoveAllMessagesArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("seq", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:seq: ", p), err) }
  if err := oprot.WriteI32(int32(p.Seq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.seq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:seq: ", p), err) }
  return err
}

func (p *TalkServiceRemoveAllMessagesArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("lastMessageId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:lastMessageId: ", p), err) }
  if err := oprot.WriteString(string(p.LastMessageId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.lastMessageId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:lastMessageId: ", p), err) }
  return err
}

func (p *TalkServiceRemoveAllMessagesArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceRemoveAllMessagesArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceRemoveAllMessagesResult struct {
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceRemoveAllMessagesResult() *TalkServiceRemoveAllMessagesResult {
  return &TalkServiceRemoveAllMessagesResult{}
}

var TalkServiceRemoveAllMessagesResult_E_DEFAULT *TalkException
func (p *TalkServiceRemoveAllMessagesResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceRemoveAllMessagesResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceRemoveAllMessagesResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceRemoveAllMessagesResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceRemoveAllMessagesResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceRemoveAllMessagesResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("removeAllMessages_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceRemoveAllMessagesResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceRemoveAllMessagesResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceRemoveAllMessagesResult(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - ID
//  - Reference
type TalkServiceUnblockContactArgs struct {
  ReqSeq int32 `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
  ID string `thrift:"id,2" db:"id" json:"id"`
  Reference string `thrift:"reference,3" db:"reference" json:"reference"`
}

func NewTalkServiceUnblockContactArgs() *TalkServiceUnblockContactArgs {
  return &TalkServiceUnblockContactArgs{}
}


func (p *TalkServiceUnblockContactArgs) GetReqSeq() int32 {
  return p.ReqSeq
}

func (p *TalkServiceUnblockContactArgs) GetID() string {
  return p.ID
}

func (p *TalkServiceUnblockContactArgs) GetReference() string {
  return p.Reference
}
func (p *TalkServiceUnblockContactArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceUnblockContactArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqSeq = v
}
  return nil
}

func (p *TalkServiceUnblockContactArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *TalkServiceUnblockContactArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Reference = v
}
  return nil
}

func (p *TalkServiceUnblockContactArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("unblockContact_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceUnblockContactArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("reqSeq", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err) }
  if err := oprot.WriteI32(int32(p.ReqSeq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err) }
  return err
}

func (p *TalkServiceUnblockContactArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:id: ", p), err) }
  if err := oprot.WriteString(string(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:id: ", p), err) }
  return err
}

func (p *TalkServiceUnblockContactArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("reference", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:reference: ", p), err) }
  if err := oprot.WriteString(string(p.Reference)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reference (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:reference: ", p), err) }
  return err
}

func (p *TalkServiceUnblockContactArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceUnblockContactArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceUnblockContactResult struct {
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceUnblockContactResult() *TalkServiceUnblockContactResult {
  return &TalkServiceUnblockContactResult{}
}

var TalkServiceUnblockContactResult_E_DEFAULT *TalkException
func (p *TalkServiceUnblockContactResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceUnblockContactResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceUnblockContactResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceUnblockContactResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceUnblockContactResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceUnblockContactResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("unblockContact_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceUnblockContactResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceUnblockContactResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceUnblockContactResult(%+v)", *p)
}

type TalkServiceGetAnalyticsInfoArgs struct {
}

func NewTalkServiceGetAnalyticsInfoArgs() *TalkServiceGetAnalyticsInfoArgs {
  return &TalkServiceGetAnalyticsInfoArgs{}
}

func (p *TalkServiceGetAnalyticsInfoArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetAnalyticsInfoArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getAnalyticsInfo_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetAnalyticsInfoArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetAnalyticsInfoArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetAnalyticsInfoResult struct {
  Success *AnalyticsInfo `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetAnalyticsInfoResult() *TalkServiceGetAnalyticsInfoResult {
  return &TalkServiceGetAnalyticsInfoResult{}
}

var TalkServiceGetAnalyticsInfoResult_Success_DEFAULT *AnalyticsInfo
func (p *TalkServiceGetAnalyticsInfoResult) GetSuccess() *AnalyticsInfo {
  if !p.IsSetSuccess() {
    return TalkServiceGetAnalyticsInfoResult_Success_DEFAULT
  }
return p.Success
}
var TalkServiceGetAnalyticsInfoResult_E_DEFAULT *TalkException
func (p *TalkServiceGetAnalyticsInfoResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceGetAnalyticsInfoResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceGetAnalyticsInfoResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceGetAnalyticsInfoResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceGetAnalyticsInfoResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetAnalyticsInfoResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &AnalyticsInfo{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TalkServiceGetAnalyticsInfoResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceGetAnalyticsInfoResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getAnalyticsInfo_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetAnalyticsInfoResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetAnalyticsInfoResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetAnalyticsInfoResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetAnalyticsInfoResult(%+v)", *p)
}

// Attributes:
//  - SyncReason
type TalkServiceGetRecommendationIdsArgs struct {
  SyncReason SyncReason `thrift:"syncReason,1" db:"syncReason" json:"syncReason"`
}

func NewTalkServiceGetRecommendationIdsArgs() *TalkServiceGetRecommendationIdsArgs {
  return &TalkServiceGetRecommendationIdsArgs{}
}


func (p *TalkServiceGetRecommendationIdsArgs) GetSyncReason() SyncReason {
  return p.SyncReason
}
func (p *TalkServiceGetRecommendationIdsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetRecommendationIdsArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := SyncReason(v)
  p.SyncReason = temp
}
  return nil
}

func (p *TalkServiceGetRecommendationIdsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getRecommendationIds_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetRecommendationIdsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("syncReason", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:syncReason: ", p), err) }
  if err := oprot.WriteI32(int32(p.SyncReason)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.syncReason (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:syncReason: ", p), err) }
  return err
}

func (p *TalkServiceGetRecommendationIdsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetRecommendationIdsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetRecommendationIdsResult struct {
  Success []string `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetRecommendationIdsResult() *TalkServiceGetRecommendationIdsResult {
  return &TalkServiceGetRecommendationIdsResult{}
}

var TalkServiceGetRecommendationIdsResult_Success_DEFAULT []string

func (p *TalkServiceGetRecommendationIdsResult) GetSuccess() []string {
  return p.Success
}
var TalkServiceGetRecommendationIdsResult_E_DEFAULT *TalkException
func (p *TalkServiceGetRecommendationIdsResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceGetRecommendationIdsResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceGetRecommendationIdsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceGetRecommendationIdsResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceGetRecommendationIdsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetRecommendationIdsResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
var _elem362 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem362 = v
}
    p.Success = append(p.Success, _elem362)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TalkServiceGetRecommendationIdsResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceGetRecommendationIdsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getRecommendationIds_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetRecommendationIdsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRING, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetRecommendationIdsResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetRecommendationIdsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetRecommendationIdsResult(%+v)", *p)
}

// Attributes:
//  - UdidHash
//  - ApplicationTypeWithExtensions
type TalkServiceNotifyRegistrationCompleteArgs struct {
  // unused field # 1
  UdidHash string `thrift:"udidHash,2" db:"udidHash" json:"udidHash"`
  ApplicationTypeWithExtensions string `thrift:"applicationTypeWithExtensions,3" db:"applicationTypeWithExtensions" json:"applicationTypeWithExtensions"`
}

func NewTalkServiceNotifyRegistrationCompleteArgs() *TalkServiceNotifyRegistrationCompleteArgs {
  return &TalkServiceNotifyRegistrationCompleteArgs{}
}


func (p *TalkServiceNotifyRegistrationCompleteArgs) GetUdidHash() string {
  return p.UdidHash
}

func (p *TalkServiceNotifyRegistrationCompleteArgs) GetApplicationTypeWithExtensions() string {
  return p.ApplicationTypeWithExtensions
}
func (p *TalkServiceNotifyRegistrationCompleteArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceNotifyRegistrationCompleteArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.UdidHash = v
}
  return nil
}

func (p *TalkServiceNotifyRegistrationCompleteArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.ApplicationTypeWithExtensions = v
}
  return nil
}

func (p *TalkServiceNotifyRegistrationCompleteArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("notifyRegistrationComplete_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceNotifyRegistrationCompleteArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("udidHash", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:udidHash: ", p), err) }
  if err := oprot.WriteString(string(p.UdidHash)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.udidHash (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:udidHash: ", p), err) }
  return err
}

func (p *TalkServiceNotifyRegistrationCompleteArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("applicationTypeWithExtensions", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:applicationTypeWithExtensions: ", p), err) }
  if err := oprot.WriteString(string(p.ApplicationTypeWithExtensions)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.applicationTypeWithExtensions (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:applicationTypeWithExtensions: ", p), err) }
  return err
}

func (p *TalkServiceNotifyRegistrationCompleteArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceNotifyRegistrationCompleteArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceNotifyRegistrationCompleteResult struct {
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceNotifyRegistrationCompleteResult() *TalkServiceNotifyRegistrationCompleteResult {
  return &TalkServiceNotifyRegistrationCompleteResult{}
}

var TalkServiceNotifyRegistrationCompleteResult_E_DEFAULT *TalkException
func (p *TalkServiceNotifyRegistrationCompleteResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceNotifyRegistrationCompleteResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceNotifyRegistrationCompleteResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceNotifyRegistrationCompleteResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceNotifyRegistrationCompleteResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceNotifyRegistrationCompleteResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("notifyRegistrationComplete_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceNotifyRegistrationCompleteResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceNotifyRegistrationCompleteResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceNotifyRegistrationCompleteResult(%+v)", *p)
}

// Attributes:
//  - ClientRevision
type TalkServiceWakeUpLongPollingArgs struct {
  // unused field # 1
  ClientRevision int64 `thrift:"clientRevision,2" db:"clientRevision" json:"clientRevision"`
}

func NewTalkServiceWakeUpLongPollingArgs() *TalkServiceWakeUpLongPollingArgs {
  return &TalkServiceWakeUpLongPollingArgs{}
}


func (p *TalkServiceWakeUpLongPollingArgs) GetClientRevision() int64 {
  return p.ClientRevision
}
func (p *TalkServiceWakeUpLongPollingArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceWakeUpLongPollingArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ClientRevision = v
}
  return nil
}

func (p *TalkServiceWakeUpLongPollingArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("wakeUpLongPolling_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceWakeUpLongPollingArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("clientRevision", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:clientRevision: ", p), err) }
  if err := oprot.WriteI64(int64(p.ClientRevision)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.clientRevision (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:clientRevision: ", p), err) }
  return err
}

func (p *TalkServiceWakeUpLongPollingArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceWakeUpLongPollingArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceWakeUpLongPollingResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceWakeUpLongPollingResult() *TalkServiceWakeUpLongPollingResult {
  return &TalkServiceWakeUpLongPollingResult{}
}

var TalkServiceWakeUpLongPollingResult_Success_DEFAULT bool
func (p *TalkServiceWakeUpLongPollingResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return TalkServiceWakeUpLongPollingResult_Success_DEFAULT
  }
return *p.Success
}
var TalkServiceWakeUpLongPollingResult_E_DEFAULT *TalkException
func (p *TalkServiceWakeUpLongPollingResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceWakeUpLongPollingResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceWakeUpLongPollingResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceWakeUpLongPollingResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceWakeUpLongPollingResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceWakeUpLongPollingResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *TalkServiceWakeUpLongPollingResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceWakeUpLongPollingResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("wakeUpLongPolling_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceWakeUpLongPollingResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceWakeUpLongPollingResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceWakeUpLongPollingResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceWakeUpLongPollingResult(%+v)", *p)
}

// Attributes:
//  - ReqSeq
//  - ID
type TalkServiceUnblockRecommendationArgs struct {
  ReqSeq int32 `thrift:"reqSeq,1" db:"reqSeq" json:"reqSeq"`
  ID string `thrift:"id,2" db:"id" json:"id"`
}

func NewTalkServiceUnblockRecommendationArgs() *TalkServiceUnblockRecommendationArgs {
  return &TalkServiceUnblockRecommendationArgs{}
}


func (p *TalkServiceUnblockRecommendationArgs) GetReqSeq() int32 {
  return p.ReqSeq
}

func (p *TalkServiceUnblockRecommendationArgs) GetID() string {
  return p.ID
}
func (p *TalkServiceUnblockRecommendationArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceUnblockRecommendationArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ReqSeq = v
}
  return nil
}

func (p *TalkServiceUnblockRecommendationArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *TalkServiceUnblockRecommendationArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("unblockRecommendation_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceUnblockRecommendationArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("reqSeq", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:reqSeq: ", p), err) }
  if err := oprot.WriteI32(int32(p.ReqSeq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reqSeq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:reqSeq: ", p), err) }
  return err
}

func (p *TalkServiceUnblockRecommendationArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:id: ", p), err) }
  if err := oprot.WriteString(string(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:id: ", p), err) }
  return err
}

func (p *TalkServiceUnblockRecommendationArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceUnblockRecommendationArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceUnblockRecommendationResult struct {
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceUnblockRecommendationResult() *TalkServiceUnblockRecommendationResult {
  return &TalkServiceUnblockRecommendationResult{}
}

var TalkServiceUnblockRecommendationResult_E_DEFAULT *TalkException
func (p *TalkServiceUnblockRecommendationResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceUnblockRecommendationResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceUnblockRecommendationResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceUnblockRecommendationResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceUnblockRecommendationResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceUnblockRecommendationResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("unblockRecommendation_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceUnblockRecommendationResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceUnblockRecommendationResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceUnblockRecommendationResult(%+v)", *p)
}

// Attributes:
//  - Seq
//  - Message
type TalkServiceSendMessageArgs struct {
  Seq int32 `thrift:"seq,1" db:"seq" json:"seq"`
  Message *Message `thrift:"message,2" db:"message" json:"message"`
}

func NewTalkServiceSendMessageArgs() *TalkServiceSendMessageArgs {
  return &TalkServiceSendMessageArgs{}
}


func (p *TalkServiceSendMessageArgs) GetSeq() int32 {
  return p.Seq
}
var TalkServiceSendMessageArgs_Message_DEFAULT *Message
func (p *TalkServiceSendMessageArgs) GetMessage() *Message {
  if !p.IsSetMessage() {
    return TalkServiceSendMessageArgs_Message_DEFAULT
  }
return p.Message
}
func (p *TalkServiceSendMessageArgs) IsSetMessage() bool {
  return p.Message != nil
}

func (p *TalkServiceSendMessageArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceSendMessageArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Seq = v
}
  return nil
}

func (p *TalkServiceSendMessageArgs)  ReadField2(iprot thrift.TProtocol) error {
  p.Message = &Message{}
  if err := p.Message.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Message), err)
  }
  return nil
}

func (p *TalkServiceSendMessageArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("sendMessage_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceSendMessageArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("seq", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:seq: ", p), err) }
  if err := oprot.WriteI32(int32(p.Seq)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.seq (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:seq: ", p), err) }
  return err
}

func (p *TalkServiceSendMessageArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("message", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:message: ", p), err) }
  if err := p.Message.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Message), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:message: ", p), err) }
  return err
}

func (p *TalkServiceSendMessageArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceSendMessageArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceSendMessageResult struct {
  Success *Message `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceSendMessageResult() *TalkServiceSendMessageResult {
  return &TalkServiceSendMessageResult{}
}

var TalkServiceSendMessageResult_Success_DEFAULT *Message
func (p *TalkServiceSendMessageResult) GetSuccess() *Message {
  if !p.IsSetSuccess() {
    return TalkServiceSendMessageResult_Success_DEFAULT
  }
return p.Success
}
var TalkServiceSendMessageResult_E_DEFAULT *TalkException
func (p *TalkServiceSendMessageResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceSendMessageResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceSendMessageResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceSendMessageResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceSendMessageResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceSendMessageResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &Message{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TalkServiceSendMessageResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceSendMessageResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("sendMessage_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceSendMessageResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceSendMessageResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceSendMessageResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceSendMessageResult(%+v)", *p)
}

// Attributes:
//  - Text
type TalkServiceSendEchoPushArgs struct {
  // unused field # 1
  Text string `thrift:"text,2" db:"text" json:"text"`
}

func NewTalkServiceSendEchoPushArgs() *TalkServiceSendEchoPushArgs {
  return &TalkServiceSendEchoPushArgs{}
}


func (p *TalkServiceSendEchoPushArgs) GetText() string {
  return p.Text
}
func (p *TalkServiceSendEchoPushArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceSendEchoPushArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Text = v
}
  return nil
}

func (p *TalkServiceSendEchoPushArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("sendEchoPush_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceSendEchoPushArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("text", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:text: ", p), err) }
  if err := oprot.WriteString(string(p.Text)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.text (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:text: ", p), err) }
  return err
}

func (p *TalkServiceSendEchoPushArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceSendEchoPushArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceSendEchoPushResult struct {
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceSendEchoPushResult() *TalkServiceSendEchoPushResult {
  return &TalkServiceSendEchoPushResult{}
}

var TalkServiceSendEchoPushResult_E_DEFAULT *TalkException
func (p *TalkServiceSendEchoPushResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceSendEchoPushResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceSendEchoPushResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceSendEchoPushResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceSendEchoPushResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceSendEchoPushResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("sendEchoPush_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceSendEchoPushResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceSendEchoPushResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceSendEchoPushResult(%+v)", *p)
}

// Attributes:
//  - MigrationPincodeSessionId
//  - AccountMigrationPincode
type TalkServiceVerifyAccountMigrationPincodeArgs struct {
  // unused field # 1
  MigrationPincodeSessionId string `thrift:"migrationPincodeSessionId,2" db:"migrationPincodeSessionId" json:"migrationPincodeSessionId"`
  AccountMigrationPincode string `thrift:"accountMigrationPincode,3" db:"accountMigrationPincode" json:"accountMigrationPincode"`
}

func NewTalkServiceVerifyAccountMigrationPincodeArgs() *TalkServiceVerifyAccountMigrationPincodeArgs {
  return &TalkServiceVerifyAccountMigrationPincodeArgs{}
}


func (p *TalkServiceVerifyAccountMigrationPincodeArgs) GetMigrationPincodeSessionId() string {
  return p.MigrationPincodeSessionId
}

func (p *TalkServiceVerifyAccountMigrationPincodeArgs) GetAccountMigrationPincode() string {
  return p.AccountMigrationPincode
}
func (p *TalkServiceVerifyAccountMigrationPincodeArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceVerifyAccountMigrationPincodeArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.MigrationPincodeSessionId = v
}
  return nil
}

func (p *TalkServiceVerifyAccountMigrationPincodeArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.AccountMigrationPincode = v
}
  return nil
}

func (p *TalkServiceVerifyAccountMigrationPincodeArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("verifyAccountMigrationPincode_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceVerifyAccountMigrationPincodeArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("migrationPincodeSessionId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:migrationPincodeSessionId: ", p), err) }
  if err := oprot.WriteString(string(p.MigrationPincodeSessionId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.migrationPincodeSessionId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:migrationPincodeSessionId: ", p), err) }
  return err
}

func (p *TalkServiceVerifyAccountMigrationPincodeArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("accountMigrationPincode", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:accountMigrationPincode: ", p), err) }
  if err := oprot.WriteString(string(p.AccountMigrationPincode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.accountMigrationPincode (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:accountMigrationPincode: ", p), err) }
  return err
}

func (p *TalkServiceVerifyAccountMigrationPincodeArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceVerifyAccountMigrationPincodeArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceVerifyAccountMigrationPincodeResult struct {
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceVerifyAccountMigrationPincodeResult() *TalkServiceVerifyAccountMigrationPincodeResult {
  return &TalkServiceVerifyAccountMigrationPincodeResult{}
}

var TalkServiceVerifyAccountMigrationPincodeResult_E_DEFAULT *TalkException
func (p *TalkServiceVerifyAccountMigrationPincodeResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceVerifyAccountMigrationPincodeResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceVerifyAccountMigrationPincodeResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceVerifyAccountMigrationPincodeResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceVerifyAccountMigrationPincodeResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceVerifyAccountMigrationPincodeResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("verifyAccountMigrationPincode_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceVerifyAccountMigrationPincodeResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceVerifyAccountMigrationPincodeResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceVerifyAccountMigrationPincodeResult(%+v)", *p)
}

// Attributes:
//  - UdidHash
//  - ApplicationTypeWithExtensions
type TalkServiceNotifyInstalledArgs struct {
  // unused field # 1
  UdidHash string `thrift:"udidHash,2" db:"udidHash" json:"udidHash"`
  ApplicationTypeWithExtensions string `thrift:"applicationTypeWithExtensions,3" db:"applicationTypeWithExtensions" json:"applicationTypeWithExtensions"`
}

func NewTalkServiceNotifyInstalledArgs() *TalkServiceNotifyInstalledArgs {
  return &TalkServiceNotifyInstalledArgs{}
}


func (p *TalkServiceNotifyInstalledArgs) GetUdidHash() string {
  return p.UdidHash
}

func (p *TalkServiceNotifyInstalledArgs) GetApplicationTypeWithExtensions() string {
  return p.ApplicationTypeWithExtensions
}
func (p *TalkServiceNotifyInstalledArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceNotifyInstalledArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.UdidHash = v
}
  return nil
}

func (p *TalkServiceNotifyInstalledArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.ApplicationTypeWithExtensions = v
}
  return nil
}

func (p *TalkServiceNotifyInstalledArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("notifyInstalled_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceNotifyInstalledArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("udidHash", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:udidHash: ", p), err) }
  if err := oprot.WriteString(string(p.UdidHash)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.udidHash (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:udidHash: ", p), err) }
  return err
}

func (p *TalkServiceNotifyInstalledArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("applicationTypeWithExtensions", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:applicationTypeWithExtensions: ", p), err) }
  if err := oprot.WriteString(string(p.ApplicationTypeWithExtensions)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.applicationTypeWithExtensions (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:applicationTypeWithExtensions: ", p), err) }
  return err
}

func (p *TalkServiceNotifyInstalledArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceNotifyInstalledArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceNotifyInstalledResult struct {
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceNotifyInstalledResult() *TalkServiceNotifyInstalledResult {
  return &TalkServiceNotifyInstalledResult{}
}

var TalkServiceNotifyInstalledResult_E_DEFAULT *TalkException
func (p *TalkServiceNotifyInstalledResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceNotifyInstalledResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceNotifyInstalledResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceNotifyInstalledResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceNotifyInstalledResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceNotifyInstalledResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("notifyInstalled_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceNotifyInstalledResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceNotifyInstalledResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceNotifyInstalledResult(%+v)", *p)
}

// Attributes:
//  - Verifier
//  - PinCode
type TalkServiceVerifyQrcodeArgs struct {
  // unused field # 1
  Verifier string `thrift:"verifier,2" db:"verifier" json:"verifier"`
  PinCode string `thrift:"pinCode,3" db:"pinCode" json:"pinCode"`
}

func NewTalkServiceVerifyQrcodeArgs() *TalkServiceVerifyQrcodeArgs {
  return &TalkServiceVerifyQrcodeArgs{}
}


func (p *TalkServiceVerifyQrcodeArgs) GetVerifier() string {
  return p.Verifier
}

func (p *TalkServiceVerifyQrcodeArgs) GetPinCode() string {
  return p.PinCode
}
func (p *TalkServiceVerifyQrcodeArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceVerifyQrcodeArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Verifier = v
}
  return nil
}

func (p *TalkServiceVerifyQrcodeArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.PinCode = v
}
  return nil
}

func (p *TalkServiceVerifyQrcodeArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("verifyQrcode_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceVerifyQrcodeArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("verifier", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:verifier: ", p), err) }
  if err := oprot.WriteString(string(p.Verifier)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.verifier (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:verifier: ", p), err) }
  return err
}

func (p *TalkServiceVerifyQrcodeArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("pinCode", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:pinCode: ", p), err) }
  if err := oprot.WriteString(string(p.PinCode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.pinCode (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:pinCode: ", p), err) }
  return err
}

func (p *TalkServiceVerifyQrcodeArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceVerifyQrcodeArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceVerifyQrcodeResult struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceVerifyQrcodeResult() *TalkServiceVerifyQrcodeResult {
  return &TalkServiceVerifyQrcodeResult{}
}

var TalkServiceVerifyQrcodeResult_Success_DEFAULT string
func (p *TalkServiceVerifyQrcodeResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return TalkServiceVerifyQrcodeResult_Success_DEFAULT
  }
return *p.Success
}
var TalkServiceVerifyQrcodeResult_E_DEFAULT *TalkException
func (p *TalkServiceVerifyQrcodeResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceVerifyQrcodeResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceVerifyQrcodeResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceVerifyQrcodeResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceVerifyQrcodeResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceVerifyQrcodeResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *TalkServiceVerifyQrcodeResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceVerifyQrcodeResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("verifyQrcode_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceVerifyQrcodeResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceVerifyQrcodeResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceVerifyQrcodeResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceVerifyQrcodeResult(%+v)", *p)
}

// Attributes:
//  - SearchId
//  - Reference
type TalkServiceFindContactByMetaTagArgs struct {
  // unused field # 1
  SearchId string `thrift:"searchId,2" db:"searchId" json:"searchId"`
  Reference string `thrift:"reference,3" db:"reference" json:"reference"`
}

func NewTalkServiceFindContactByMetaTagArgs() *TalkServiceFindContactByMetaTagArgs {
  return &TalkServiceFindContactByMetaTagArgs{}
}


func (p *TalkServiceFindContactByMetaTagArgs) GetSearchId() string {
  return p.SearchId
}

func (p *TalkServiceFindContactByMetaTagArgs) GetReference() string {
  return p.Reference
}
func (p *TalkServiceFindContactByMetaTagArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceFindContactByMetaTagArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.SearchId = v
}
  return nil
}

func (p *TalkServiceFindContactByMetaTagArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Reference = v
}
  return nil
}

func (p *TalkServiceFindContactByMetaTagArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("findContactByMetaTag_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceFindContactByMetaTagArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("searchId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:searchId: ", p), err) }
  if err := oprot.WriteString(string(p.SearchId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.searchId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:searchId: ", p), err) }
  return err
}

func (p *TalkServiceFindContactByMetaTagArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("reference", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:reference: ", p), err) }
  if err := oprot.WriteString(string(p.Reference)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reference (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:reference: ", p), err) }
  return err
}

func (p *TalkServiceFindContactByMetaTagArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceFindContactByMetaTagArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceFindContactByMetaTagResult struct {
  Success *Contact `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceFindContactByMetaTagResult() *TalkServiceFindContactByMetaTagResult {
  return &TalkServiceFindContactByMetaTagResult{}
}

var TalkServiceFindContactByMetaTagResult_Success_DEFAULT *Contact
func (p *TalkServiceFindContactByMetaTagResult) GetSuccess() *Contact {
  if !p.IsSetSuccess() {
    return TalkServiceFindContactByMetaTagResult_Success_DEFAULT
  }
return p.Success
}
var TalkServiceFindContactByMetaTagResult_E_DEFAULT *TalkException
func (p *TalkServiceFindContactByMetaTagResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceFindContactByMetaTagResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceFindContactByMetaTagResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceFindContactByMetaTagResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceFindContactByMetaTagResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceFindContactByMetaTagResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &Contact{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TalkServiceFindContactByMetaTagResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceFindContactByMetaTagResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("findContactByMetaTag_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceFindContactByMetaTagResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceFindContactByMetaTagResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceFindContactByMetaTagResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceFindContactByMetaTagResult(%+v)", *p)
}

// Attributes:
//  - Phones
type TalkServiceFindContactsByPhoneArgs struct {
  // unused field # 1
  Phones []string `thrift:"phones,2" db:"phones" json:"phones"`
}

func NewTalkServiceFindContactsByPhoneArgs() *TalkServiceFindContactsByPhoneArgs {
  return &TalkServiceFindContactsByPhoneArgs{}
}


func (p *TalkServiceFindContactsByPhoneArgs) GetPhones() []string {
  return p.Phones
}
func (p *TalkServiceFindContactsByPhoneArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.SET {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceFindContactsByPhoneArgs)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadSetBegin()
  if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
  }
  tSet := make([]string, 0, size)
  p.Phones =  tSet
  for i := 0; i < size; i ++ {
var _elem363 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem363 = v
}
    p.Phones = append(p.Phones, _elem363)
  }
  if err := iprot.ReadSetEnd(); err != nil {
    return thrift.PrependError("error reading set end: ", err)
  }
  return nil
}

func (p *TalkServiceFindContactsByPhoneArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("findContactsByPhone_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceFindContactsByPhoneArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("phones", thrift.SET, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:phones: ", p), err) }
  if err := oprot.WriteSetBegin(thrift.STRING, len(p.Phones)); err != nil {
    return thrift.PrependError("error writing set begin: ", err)
  }
  for i := 0; i<len(p.Phones); i++ {
    for j := i+1; j<len(p.Phones); j++ {
      if reflect.DeepEqual(p.Phones[i],p.Phones[j]) { 
        return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", p.Phones[i]))
      }
    }
  }
  for _, v := range p.Phones {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteSetEnd(); err != nil {
    return thrift.PrependError("error writing set end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:phones: ", p), err) }
  return err
}

func (p *TalkServiceFindContactsByPhoneArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceFindContactsByPhoneArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceFindContactsByPhoneResult struct {
  Success map[string]*Contact `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceFindContactsByPhoneResult() *TalkServiceFindContactsByPhoneResult {
  return &TalkServiceFindContactsByPhoneResult{}
}

var TalkServiceFindContactsByPhoneResult_Success_DEFAULT map[string]*Contact

func (p *TalkServiceFindContactsByPhoneResult) GetSuccess() map[string]*Contact {
  return p.Success
}
var TalkServiceFindContactsByPhoneResult_E_DEFAULT *TalkException
func (p *TalkServiceFindContactsByPhoneResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceFindContactsByPhoneResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceFindContactsByPhoneResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceFindContactsByPhoneResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceFindContactsByPhoneResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceFindContactsByPhoneResult)  ReadField0(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]*Contact, size)
  p.Success =  tMap
  for i := 0; i < size; i ++ {
var _key364 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key364 = v
}
    _val365 := &Contact{}
    if err := _val365.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val365), err)
    }
    p.Success[_key364] = _val365
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *TalkServiceFindContactsByPhoneResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceFindContactsByPhoneResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("findContactsByPhone_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceFindContactsByPhoneResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.MAP, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range p.Success {
      if err := oprot.WriteString(string(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteMapEnd(); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceFindContactsByPhoneResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceFindContactsByPhoneResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceFindContactsByPhoneResult(%+v)", *p)
}

// Attributes:
//  - SessionId
//  - MigrationPincodeSessionId
type TalkServiceRegisterWithPhoneNumberArgs struct {
  // unused field # 1
  SessionId string `thrift:"sessionId,2" db:"sessionId" json:"sessionId"`
  MigrationPincodeSessionId string `thrift:"migrationPincodeSessionId,3" db:"migrationPincodeSessionId" json:"migrationPincodeSessionId"`
}

func NewTalkServiceRegisterWithPhoneNumberArgs() *TalkServiceRegisterWithPhoneNumberArgs {
  return &TalkServiceRegisterWithPhoneNumberArgs{}
}


func (p *TalkServiceRegisterWithPhoneNumberArgs) GetSessionId() string {
  return p.SessionId
}

func (p *TalkServiceRegisterWithPhoneNumberArgs) GetMigrationPincodeSessionId() string {
  return p.MigrationPincodeSessionId
}
func (p *TalkServiceRegisterWithPhoneNumberArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceRegisterWithPhoneNumberArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.SessionId = v
}
  return nil
}

func (p *TalkServiceRegisterWithPhoneNumberArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.MigrationPincodeSessionId = v
}
  return nil
}

func (p *TalkServiceRegisterWithPhoneNumberArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("registerWithPhoneNumber_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceRegisterWithPhoneNumberArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("sessionId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:sessionId: ", p), err) }
  if err := oprot.WriteString(string(p.SessionId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sessionId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:sessionId: ", p), err) }
  return err
}

func (p *TalkServiceRegisterWithPhoneNumberArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("migrationPincodeSessionId", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:migrationPincodeSessionId: ", p), err) }
  if err := oprot.WriteString(string(p.MigrationPincodeSessionId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.migrationPincodeSessionId (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:migrationPincodeSessionId: ", p), err) }
  return err
}

func (p *TalkServiceRegisterWithPhoneNumberArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceRegisterWithPhoneNumberArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceRegisterWithPhoneNumberResult struct {
  Success *RegisterWithPhoneNumberResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceRegisterWithPhoneNumberResult() *TalkServiceRegisterWithPhoneNumberResult {
  return &TalkServiceRegisterWithPhoneNumberResult{}
}

var TalkServiceRegisterWithPhoneNumberResult_Success_DEFAULT *RegisterWithPhoneNumberResult_
func (p *TalkServiceRegisterWithPhoneNumberResult) GetSuccess() *RegisterWithPhoneNumberResult_ {
  if !p.IsSetSuccess() {
    return TalkServiceRegisterWithPhoneNumberResult_Success_DEFAULT
  }
return p.Success
}
var TalkServiceRegisterWithPhoneNumberResult_E_DEFAULT *TalkException
func (p *TalkServiceRegisterWithPhoneNumberResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceRegisterWithPhoneNumberResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceRegisterWithPhoneNumberResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceRegisterWithPhoneNumberResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceRegisterWithPhoneNumberResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceRegisterWithPhoneNumberResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &RegisterWithPhoneNumberResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TalkServiceRegisterWithPhoneNumberResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceRegisterWithPhoneNumberResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("registerWithPhoneNumber_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceRegisterWithPhoneNumberResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceRegisterWithPhoneNumberResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceRegisterWithPhoneNumberResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceRegisterWithPhoneNumberResult(%+v)", *p)
}

// Attributes:
//  - EMid
type TalkServiceDecryptFollowEMidArgs struct {
  // unused field # 1
  EMid string `thrift:"eMid,2" db:"eMid" json:"eMid"`
}

func NewTalkServiceDecryptFollowEMidArgs() *TalkServiceDecryptFollowEMidArgs {
  return &TalkServiceDecryptFollowEMidArgs{}
}


func (p *TalkServiceDecryptFollowEMidArgs) GetEMid() string {
  return p.EMid
}
func (p *TalkServiceDecryptFollowEMidArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceDecryptFollowEMidArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.EMid = v
}
  return nil
}

func (p *TalkServiceDecryptFollowEMidArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("decryptFollowEMid_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceDecryptFollowEMidArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("eMid", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:eMid: ", p), err) }
  if err := oprot.WriteString(string(p.EMid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.eMid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:eMid: ", p), err) }
  return err
}

func (p *TalkServiceDecryptFollowEMidArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceDecryptFollowEMidArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceDecryptFollowEMidResult struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceDecryptFollowEMidResult() *TalkServiceDecryptFollowEMidResult {
  return &TalkServiceDecryptFollowEMidResult{}
}

var TalkServiceDecryptFollowEMidResult_Success_DEFAULT string
func (p *TalkServiceDecryptFollowEMidResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return TalkServiceDecryptFollowEMidResult_Success_DEFAULT
  }
return *p.Success
}
var TalkServiceDecryptFollowEMidResult_E_DEFAULT *TalkException
func (p *TalkServiceDecryptFollowEMidResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceDecryptFollowEMidResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceDecryptFollowEMidResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceDecryptFollowEMidResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceDecryptFollowEMidResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceDecryptFollowEMidResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *TalkServiceDecryptFollowEMidResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceDecryptFollowEMidResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("decryptFollowEMid_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceDecryptFollowEMidResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceDecryptFollowEMidResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceDecryptFollowEMidResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceDecryptFollowEMidResult(%+v)", *p)
}

// Attributes:
//  - AccountMigrationPincode
type TalkServiceUpdateAccountMigrationPincodeArgs struct {
  // unused field # 1
  AccountMigrationPincode string `thrift:"accountMigrationPincode,2" db:"accountMigrationPincode" json:"accountMigrationPincode"`
}

func NewTalkServiceUpdateAccountMigrationPincodeArgs() *TalkServiceUpdateAccountMigrationPincodeArgs {
  return &TalkServiceUpdateAccountMigrationPincodeArgs{}
}


func (p *TalkServiceUpdateAccountMigrationPincodeArgs) GetAccountMigrationPincode() string {
  return p.AccountMigrationPincode
}
func (p *TalkServiceUpdateAccountMigrationPincodeArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceUpdateAccountMigrationPincodeArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.AccountMigrationPincode = v
}
  return nil
}

func (p *TalkServiceUpdateAccountMigrationPincodeArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateAccountMigrationPincode_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceUpdateAccountMigrationPincodeArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("accountMigrationPincode", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:accountMigrationPincode: ", p), err) }
  if err := oprot.WriteString(string(p.AccountMigrationPincode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.accountMigrationPincode (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:accountMigrationPincode: ", p), err) }
  return err
}

func (p *TalkServiceUpdateAccountMigrationPincodeArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceUpdateAccountMigrationPincodeArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceUpdateAccountMigrationPincodeResult struct {
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceUpdateAccountMigrationPincodeResult() *TalkServiceUpdateAccountMigrationPincodeResult {
  return &TalkServiceUpdateAccountMigrationPincodeResult{}
}

var TalkServiceUpdateAccountMigrationPincodeResult_E_DEFAULT *TalkException
func (p *TalkServiceUpdateAccountMigrationPincodeResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceUpdateAccountMigrationPincodeResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceUpdateAccountMigrationPincodeResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceUpdateAccountMigrationPincodeResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceUpdateAccountMigrationPincodeResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceUpdateAccountMigrationPincodeResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("updateAccountMigrationPincode_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceUpdateAccountMigrationPincodeResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceUpdateAccountMigrationPincodeResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceUpdateAccountMigrationPincodeResult(%+v)", *p)
}

// Attributes:
//  - SearchId
type TalkServiceIsUseridAvailableArgs struct {
  // unused field # 1
  SearchId string `thrift:"searchId,2" db:"searchId" json:"searchId"`
}

func NewTalkServiceIsUseridAvailableArgs() *TalkServiceIsUseridAvailableArgs {
  return &TalkServiceIsUseridAvailableArgs{}
}


func (p *TalkServiceIsUseridAvailableArgs) GetSearchId() string {
  return p.SearchId
}
func (p *TalkServiceIsUseridAvailableArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceIsUseridAvailableArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.SearchId = v
}
  return nil
}

func (p *TalkServiceIsUseridAvailableArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("isUseridAvailable_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceIsUseridAvailableArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("searchId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:searchId: ", p), err) }
  if err := oprot.WriteString(string(p.SearchId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.searchId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:searchId: ", p), err) }
  return err
}

func (p *TalkServiceIsUseridAvailableArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceIsUseridAvailableArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceIsUseridAvailableResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceIsUseridAvailableResult() *TalkServiceIsUseridAvailableResult {
  return &TalkServiceIsUseridAvailableResult{}
}

var TalkServiceIsUseridAvailableResult_Success_DEFAULT bool
func (p *TalkServiceIsUseridAvailableResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return TalkServiceIsUseridAvailableResult_Success_DEFAULT
  }
return *p.Success
}
var TalkServiceIsUseridAvailableResult_E_DEFAULT *TalkException
func (p *TalkServiceIsUseridAvailableResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceIsUseridAvailableResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceIsUseridAvailableResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceIsUseridAvailableResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceIsUseridAvailableResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceIsUseridAvailableResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *TalkServiceIsUseridAvailableResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceIsUseridAvailableResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("isUseridAvailable_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceIsUseridAvailableResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceIsUseridAvailableResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceIsUseridAvailableResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceIsUseridAvailableResult(%+v)", *p)
}

// Attributes:
//  - GetFollowersRequest
type TalkServiceGetFollowersArgs struct {
  // unused field # 1
  GetFollowersRequest *GetFollowersRequest `thrift:"getFollowersRequest,2" db:"getFollowersRequest" json:"getFollowersRequest"`
}

func NewTalkServiceGetFollowersArgs() *TalkServiceGetFollowersArgs {
  return &TalkServiceGetFollowersArgs{}
}

var TalkServiceGetFollowersArgs_GetFollowersRequest_DEFAULT *GetFollowersRequest
func (p *TalkServiceGetFollowersArgs) GetGetFollowersRequest() *GetFollowersRequest {
  if !p.IsSetGetFollowersRequest() {
    return TalkServiceGetFollowersArgs_GetFollowersRequest_DEFAULT
  }
return p.GetFollowersRequest
}
func (p *TalkServiceGetFollowersArgs) IsSetGetFollowersRequest() bool {
  return p.GetFollowersRequest != nil
}

func (p *TalkServiceGetFollowersArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetFollowersArgs)  ReadField2(iprot thrift.TProtocol) error {
  p.GetFollowersRequest = &GetFollowersRequest{}
  if err := p.GetFollowersRequest.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.GetFollowersRequest), err)
  }
  return nil
}

func (p *TalkServiceGetFollowersArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getFollowers_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetFollowersArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("getFollowersRequest", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:getFollowersRequest: ", p), err) }
  if err := p.GetFollowersRequest.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.GetFollowersRequest), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:getFollowersRequest: ", p), err) }
  return err
}

func (p *TalkServiceGetFollowersArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetFollowersArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetFollowersResult struct {
  Success *GetFollowersResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetFollowersResult() *TalkServiceGetFollowersResult {
  return &TalkServiceGetFollowersResult{}
}

var TalkServiceGetFollowersResult_Success_DEFAULT *GetFollowersResponse
func (p *TalkServiceGetFollowersResult) GetSuccess() *GetFollowersResponse {
  if !p.IsSetSuccess() {
    return TalkServiceGetFollowersResult_Success_DEFAULT
  }
return p.Success
}
var TalkServiceGetFollowersResult_E_DEFAULT *TalkException
func (p *TalkServiceGetFollowersResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceGetFollowersResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceGetFollowersResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceGetFollowersResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceGetFollowersResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetFollowersResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &GetFollowersResponse{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TalkServiceGetFollowersResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceGetFollowersResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getFollowers_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetFollowersResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetFollowersResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetFollowersResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetFollowersResult(%+v)", *p)
}

type TalkServiceCreateAccountMigrationPincodeSessionArgs struct {
}

func NewTalkServiceCreateAccountMigrationPincodeSessionArgs() *TalkServiceCreateAccountMigrationPincodeSessionArgs {
  return &TalkServiceCreateAccountMigrationPincodeSessionArgs{}
}

func (p *TalkServiceCreateAccountMigrationPincodeSessionArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceCreateAccountMigrationPincodeSessionArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("createAccountMigrationPincodeSession_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceCreateAccountMigrationPincodeSessionArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceCreateAccountMigrationPincodeSessionArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceCreateAccountMigrationPincodeSessionResult struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceCreateAccountMigrationPincodeSessionResult() *TalkServiceCreateAccountMigrationPincodeSessionResult {
  return &TalkServiceCreateAccountMigrationPincodeSessionResult{}
}

var TalkServiceCreateAccountMigrationPincodeSessionResult_Success_DEFAULT string
func (p *TalkServiceCreateAccountMigrationPincodeSessionResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return TalkServiceCreateAccountMigrationPincodeSessionResult_Success_DEFAULT
  }
return *p.Success
}
var TalkServiceCreateAccountMigrationPincodeSessionResult_E_DEFAULT *TalkException
func (p *TalkServiceCreateAccountMigrationPincodeSessionResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceCreateAccountMigrationPincodeSessionResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceCreateAccountMigrationPincodeSessionResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceCreateAccountMigrationPincodeSessionResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceCreateAccountMigrationPincodeSessionResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceCreateAccountMigrationPincodeSessionResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *TalkServiceCreateAccountMigrationPincodeSessionResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceCreateAccountMigrationPincodeSessionResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("createAccountMigrationPincodeSession_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceCreateAccountMigrationPincodeSessionResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceCreateAccountMigrationPincodeSessionResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceCreateAccountMigrationPincodeSessionResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceCreateAccountMigrationPincodeSessionResult(%+v)", *p)
}

// Attributes:
//  - SessionId
type TalkServiceResendPinCodeArgs struct {
  // unused field # 1
  SessionId string `thrift:"sessionId,2" db:"sessionId" json:"sessionId"`
}

func NewTalkServiceResendPinCodeArgs() *TalkServiceResendPinCodeArgs {
  return &TalkServiceResendPinCodeArgs{}
}


func (p *TalkServiceResendPinCodeArgs) GetSessionId() string {
  return p.SessionId
}
func (p *TalkServiceResendPinCodeArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceResendPinCodeArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.SessionId = v
}
  return nil
}

func (p *TalkServiceResendPinCodeArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("resendPinCode_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceResendPinCodeArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("sessionId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:sessionId: ", p), err) }
  if err := oprot.WriteString(string(p.SessionId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sessionId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:sessionId: ", p), err) }
  return err
}

func (p *TalkServiceResendPinCodeArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceResendPinCodeArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceResendPinCodeResult struct {
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceResendPinCodeResult() *TalkServiceResendPinCodeResult {
  return &TalkServiceResendPinCodeResult{}
}

var TalkServiceResendPinCodeResult_E_DEFAULT *TalkException
func (p *TalkServiceResendPinCodeResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceResendPinCodeResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceResendPinCodeResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceResendPinCodeResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceResendPinCodeResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceResendPinCodeResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("resendPinCode_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceResendPinCodeResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceResendPinCodeResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceResendPinCodeResult(%+v)", *p)
}

// Attributes:
//  - GetFollowingsRequest
type TalkServiceGetFollowingsArgs struct {
  // unused field # 1
  GetFollowingsRequest *GetFollowingsRequest `thrift:"getFollowingsRequest,2" db:"getFollowingsRequest" json:"getFollowingsRequest"`
}

func NewTalkServiceGetFollowingsArgs() *TalkServiceGetFollowingsArgs {
  return &TalkServiceGetFollowingsArgs{}
}

var TalkServiceGetFollowingsArgs_GetFollowingsRequest_DEFAULT *GetFollowingsRequest
func (p *TalkServiceGetFollowingsArgs) GetGetFollowingsRequest() *GetFollowingsRequest {
  if !p.IsSetGetFollowingsRequest() {
    return TalkServiceGetFollowingsArgs_GetFollowingsRequest_DEFAULT
  }
return p.GetFollowingsRequest
}
func (p *TalkServiceGetFollowingsArgs) IsSetGetFollowingsRequest() bool {
  return p.GetFollowingsRequest != nil
}

func (p *TalkServiceGetFollowingsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetFollowingsArgs)  ReadField2(iprot thrift.TProtocol) error {
  p.GetFollowingsRequest = &GetFollowingsRequest{}
  if err := p.GetFollowingsRequest.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.GetFollowingsRequest), err)
  }
  return nil
}

func (p *TalkServiceGetFollowingsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getFollowings_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetFollowingsArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("getFollowingsRequest", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:getFollowingsRequest: ", p), err) }
  if err := p.GetFollowingsRequest.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.GetFollowingsRequest), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:getFollowingsRequest: ", p), err) }
  return err
}

func (p *TalkServiceGetFollowingsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetFollowingsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetFollowingsResult struct {
  Success *GetFollowingsResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetFollowingsResult() *TalkServiceGetFollowingsResult {
  return &TalkServiceGetFollowingsResult{}
}

var TalkServiceGetFollowingsResult_Success_DEFAULT *GetFollowingsResponse
func (p *TalkServiceGetFollowingsResult) GetSuccess() *GetFollowingsResponse {
  if !p.IsSetSuccess() {
    return TalkServiceGetFollowingsResult_Success_DEFAULT
  }
return p.Success
}
var TalkServiceGetFollowingsResult_E_DEFAULT *TalkException
func (p *TalkServiceGetFollowingsResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceGetFollowingsResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceGetFollowingsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceGetFollowingsResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceGetFollowingsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetFollowingsResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &GetFollowingsResponse{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TalkServiceGetFollowingsResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceGetFollowingsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getFollowings_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetFollowingsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetFollowingsResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetFollowingsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetFollowingsResult(%+v)", *p)
}

type TalkServiceGetServerTimeArgs struct {
}

func NewTalkServiceGetServerTimeArgs() *TalkServiceGetServerTimeArgs {
  return &TalkServiceGetServerTimeArgs{}
}

func (p *TalkServiceGetServerTimeArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetServerTimeArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getServerTime_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetServerTimeArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetServerTimeArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetServerTimeResult struct {
  Success *int64 `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetServerTimeResult() *TalkServiceGetServerTimeResult {
  return &TalkServiceGetServerTimeResult{}
}

var TalkServiceGetServerTimeResult_Success_DEFAULT int64
func (p *TalkServiceGetServerTimeResult) GetSuccess() int64 {
  if !p.IsSetSuccess() {
    return TalkServiceGetServerTimeResult_Success_DEFAULT
  }
return *p.Success
}
var TalkServiceGetServerTimeResult_E_DEFAULT *TalkException
func (p *TalkServiceGetServerTimeResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceGetServerTimeResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceGetServerTimeResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceGetServerTimeResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceGetServerTimeResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetServerTimeResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *TalkServiceGetServerTimeResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceGetServerTimeResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getServerTime_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetServerTimeResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.I64, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI64(int64(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetServerTimeResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetServerTimeResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetServerTimeResult(%+v)", *p)
}

type TalkServiceGetLastOpRevisionArgs struct {
}

func NewTalkServiceGetLastOpRevisionArgs() *TalkServiceGetLastOpRevisionArgs {
  return &TalkServiceGetLastOpRevisionArgs{}
}

func (p *TalkServiceGetLastOpRevisionArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetLastOpRevisionArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getLastOpRevision_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetLastOpRevisionArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetLastOpRevisionArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetLastOpRevisionResult struct {
  Success *int64 `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetLastOpRevisionResult() *TalkServiceGetLastOpRevisionResult {
  return &TalkServiceGetLastOpRevisionResult{}
}

var TalkServiceGetLastOpRevisionResult_Success_DEFAULT int64
func (p *TalkServiceGetLastOpRevisionResult) GetSuccess() int64 {
  if !p.IsSetSuccess() {
    return TalkServiceGetLastOpRevisionResult_Success_DEFAULT
  }
return *p.Success
}
var TalkServiceGetLastOpRevisionResult_E_DEFAULT *TalkException
func (p *TalkServiceGetLastOpRevisionResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceGetLastOpRevisionResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceGetLastOpRevisionResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceGetLastOpRevisionResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceGetLastOpRevisionResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetLastOpRevisionResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *TalkServiceGetLastOpRevisionResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceGetLastOpRevisionResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getLastOpRevision_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetLastOpRevisionResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.I64, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI64(int64(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetLastOpRevisionResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetLastOpRevisionResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetLastOpRevisionResult(%+v)", *p)
}

// Attributes:
//  - TicketIdWithTag
type TalkServiceFindContactByUserTicketArgs struct {
  // unused field # 1
  TicketIdWithTag string `thrift:"ticketIdWithTag,2" db:"ticketIdWithTag" json:"ticketIdWithTag"`
}

func NewTalkServiceFindContactByUserTicketArgs() *TalkServiceFindContactByUserTicketArgs {
  return &TalkServiceFindContactByUserTicketArgs{}
}


func (p *TalkServiceFindContactByUserTicketArgs) GetTicketIdWithTag() string {
  return p.TicketIdWithTag
}
func (p *TalkServiceFindContactByUserTicketArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceFindContactByUserTicketArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TicketIdWithTag = v
}
  return nil
}

func (p *TalkServiceFindContactByUserTicketArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("findContactByUserTicket_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceFindContactByUserTicketArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("ticketIdWithTag", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ticketIdWithTag: ", p), err) }
  if err := oprot.WriteString(string(p.TicketIdWithTag)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ticketIdWithTag (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ticketIdWithTag: ", p), err) }
  return err
}

func (p *TalkServiceFindContactByUserTicketArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceFindContactByUserTicketArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceFindContactByUserTicketResult struct {
  Success *Contact `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceFindContactByUserTicketResult() *TalkServiceFindContactByUserTicketResult {
  return &TalkServiceFindContactByUserTicketResult{}
}

var TalkServiceFindContactByUserTicketResult_Success_DEFAULT *Contact
func (p *TalkServiceFindContactByUserTicketResult) GetSuccess() *Contact {
  if !p.IsSetSuccess() {
    return TalkServiceFindContactByUserTicketResult_Success_DEFAULT
  }
return p.Success
}
var TalkServiceFindContactByUserTicketResult_E_DEFAULT *TalkException
func (p *TalkServiceFindContactByUserTicketResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceFindContactByUserTicketResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceFindContactByUserTicketResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceFindContactByUserTicketResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceFindContactByUserTicketResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceFindContactByUserTicketResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &Contact{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TalkServiceFindContactByUserTicketResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceFindContactByUserTicketResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("findContactByUserTicket_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceFindContactByUserTicketResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceFindContactByUserTicketResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceFindContactByUserTicketResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceFindContactByUserTicketResult(%+v)", *p)
}

// Attributes:
//  - SessionId
type TalkServiceFinishUpdateVerificationArgs struct {
  // unused field # 1
  SessionId string `thrift:"sessionId,2" db:"sessionId" json:"sessionId"`
}

func NewTalkServiceFinishUpdateVerificationArgs() *TalkServiceFinishUpdateVerificationArgs {
  return &TalkServiceFinishUpdateVerificationArgs{}
}


func (p *TalkServiceFinishUpdateVerificationArgs) GetSessionId() string {
  return p.SessionId
}
func (p *TalkServiceFinishUpdateVerificationArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceFinishUpdateVerificationArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.SessionId = v
}
  return nil
}

func (p *TalkServiceFinishUpdateVerificationArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("finishUpdateVerification_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceFinishUpdateVerificationArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("sessionId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:sessionId: ", p), err) }
  if err := oprot.WriteString(string(p.SessionId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sessionId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:sessionId: ", p), err) }
  return err
}

func (p *TalkServiceFinishUpdateVerificationArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceFinishUpdateVerificationArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceFinishUpdateVerificationResult struct {
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceFinishUpdateVerificationResult() *TalkServiceFinishUpdateVerificationResult {
  return &TalkServiceFinishUpdateVerificationResult{}
}

var TalkServiceFinishUpdateVerificationResult_E_DEFAULT *TalkException
func (p *TalkServiceFinishUpdateVerificationResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceFinishUpdateVerificationResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceFinishUpdateVerificationResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceFinishUpdateVerificationResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceFinishUpdateVerificationResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceFinishUpdateVerificationResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("finishUpdateVerification_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceFinishUpdateVerificationResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceFinishUpdateVerificationResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceFinishUpdateVerificationResult(%+v)", *p)
}

// Attributes:
//  - SessionId
type TalkServiceGetAcceptedProximityMatchesArgs struct {
  // unused field # 1
  SessionId string `thrift:"sessionId,2" db:"sessionId" json:"sessionId"`
}

func NewTalkServiceGetAcceptedProximityMatchesArgs() *TalkServiceGetAcceptedProximityMatchesArgs {
  return &TalkServiceGetAcceptedProximityMatchesArgs{}
}


func (p *TalkServiceGetAcceptedProximityMatchesArgs) GetSessionId() string {
  return p.SessionId
}
func (p *TalkServiceGetAcceptedProximityMatchesArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetAcceptedProximityMatchesArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.SessionId = v
}
  return nil
}

func (p *TalkServiceGetAcceptedProximityMatchesArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getAcceptedProximityMatches_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetAcceptedProximityMatchesArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("sessionId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:sessionId: ", p), err) }
  if err := oprot.WriteString(string(p.SessionId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sessionId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:sessionId: ", p), err) }
  return err
}

func (p *TalkServiceGetAcceptedProximityMatchesArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetAcceptedProximityMatchesArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceGetAcceptedProximityMatchesResult struct {
  Success []string `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceGetAcceptedProximityMatchesResult() *TalkServiceGetAcceptedProximityMatchesResult {
  return &TalkServiceGetAcceptedProximityMatchesResult{}
}

var TalkServiceGetAcceptedProximityMatchesResult_Success_DEFAULT []string

func (p *TalkServiceGetAcceptedProximityMatchesResult) GetSuccess() []string {
  return p.Success
}
var TalkServiceGetAcceptedProximityMatchesResult_E_DEFAULT *TalkException
func (p *TalkServiceGetAcceptedProximityMatchesResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceGetAcceptedProximityMatchesResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceGetAcceptedProximityMatchesResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceGetAcceptedProximityMatchesResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceGetAcceptedProximityMatchesResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.SET {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceGetAcceptedProximityMatchesResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadSetBegin()
  if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
  }
  tSet := make([]string, 0, size)
  p.Success =  tSet
  for i := 0; i < size; i ++ {
var _elem366 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem366 = v
}
    p.Success = append(p.Success, _elem366)
  }
  if err := iprot.ReadSetEnd(); err != nil {
    return thrift.PrependError("error reading set end: ", err)
  }
  return nil
}

func (p *TalkServiceGetAcceptedProximityMatchesResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceGetAcceptedProximityMatchesResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getAcceptedProximityMatches_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceGetAcceptedProximityMatchesResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.SET, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteSetBegin(thrift.STRING, len(p.Success)); err != nil {
      return thrift.PrependError("error writing set begin: ", err)
    }
    for i := 0; i<len(p.Success); i++ {
      for j := i+1; j<len(p.Success); j++ {
        if reflect.DeepEqual(p.Success[i],p.Success[j]) { 
          return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", p.Success[i]))
        }
      }
    }
    for _, v := range p.Success {
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteSetEnd(); err != nil {
      return thrift.PrependError("error writing set end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetAcceptedProximityMatchesResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceGetAcceptedProximityMatchesResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceGetAcceptedProximityMatchesResult(%+v)", *p)
}

type TalkServiceClearRingbackToneArgs struct {
}

func NewTalkServiceClearRingbackToneArgs() *TalkServiceClearRingbackToneArgs {
  return &TalkServiceClearRingbackToneArgs{}
}

func (p *TalkServiceClearRingbackToneArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceClearRingbackToneArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("clearRingbackTone_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceClearRingbackToneArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceClearRingbackToneArgs(%+v)", *p)
}

// Attributes:
//  - E
type TalkServiceClearRingbackToneResult struct {
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceClearRingbackToneResult() *TalkServiceClearRingbackToneResult {
  return &TalkServiceClearRingbackToneResult{}
}

var TalkServiceClearRingbackToneResult_E_DEFAULT *TalkException
func (p *TalkServiceClearRingbackToneResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceClearRingbackToneResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceClearRingbackToneResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceClearRingbackToneResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceClearRingbackToneResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceClearRingbackToneResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("clearRingbackTone_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceClearRingbackToneResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceClearRingbackToneResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceClearRingbackToneResult(%+v)", *p)
}

type TalkServiceUnregisterUserAndDeviceArgs struct {
}

func NewTalkServiceUnregisterUserAndDeviceArgs() *TalkServiceUnregisterUserAndDeviceArgs {
  return &TalkServiceUnregisterUserAndDeviceArgs{}
}

func (p *TalkServiceUnregisterUserAndDeviceArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceUnregisterUserAndDeviceArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("unregisterUserAndDevice_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceUnregisterUserAndDeviceArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceUnregisterUserAndDeviceArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type TalkServiceUnregisterUserAndDeviceResult struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *TalkException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewTalkServiceUnregisterUserAndDeviceResult() *TalkServiceUnregisterUserAndDeviceResult {
  return &TalkServiceUnregisterUserAndDeviceResult{}
}

var TalkServiceUnregisterUserAndDeviceResult_Success_DEFAULT string
func (p *TalkServiceUnregisterUserAndDeviceResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return TalkServiceUnregisterUserAndDeviceResult_Success_DEFAULT
  }
return *p.Success
}
var TalkServiceUnregisterUserAndDeviceResult_E_DEFAULT *TalkException
func (p *TalkServiceUnregisterUserAndDeviceResult) GetE() *TalkException {
  if !p.IsSetE() {
    return TalkServiceUnregisterUserAndDeviceResult_E_DEFAULT
  }
return p.E
}
func (p *TalkServiceUnregisterUserAndDeviceResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TalkServiceUnregisterUserAndDeviceResult) IsSetE() bool {
  return p.E != nil
}

func (p *TalkServiceUnregisterUserAndDeviceResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TalkServiceUnregisterUserAndDeviceResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *TalkServiceUnregisterUserAndDeviceResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &TalkException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *TalkServiceUnregisterUserAndDeviceResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("unregisterUserAndDevice_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TalkServiceUnregisterUserAndDeviceResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TalkServiceUnregisterUserAndDeviceResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *TalkServiceUnregisterUserAndDeviceResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TalkServiceUnregisterUserAndDeviceResult(%+v)", *p)
}


type SecondaryQrcodeLoginService interface {
  // Parameters:
  //  - Request
  CreateSession(ctx context.Context, request *CreateQrSessionRequest) (r *CreateQrSessionResponse, err error)
  // Parameters:
  //  - Request
  CreateQrCode(ctx context.Context, request *CreateQrCodeRequest) (r *CreateQrCodeResponse, err error)
  // Parameters:
  //  - Request
  CreatePinCode(ctx context.Context, request *CreatePinCodeRequest) (r *CreatePinCodeResponse, err error)
  // Parameters:
  //  - Request
  QrCodeLogin(ctx context.Context, request *QrCodeLoginRequest) (r *QrCodeLoginResponse, err error)
  // Parameters:
  //  - Request
  VerifyCertificate(ctx context.Context, request *VerifyCertificateRequest) (err error)
}

type SecondaryQrcodeLoginServiceClient struct {
  c thrift.TClient
}

func NewSecondaryQrcodeLoginServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *SecondaryQrcodeLoginServiceClient {
  return &SecondaryQrcodeLoginServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewSecondaryQrcodeLoginServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *SecondaryQrcodeLoginServiceClient {
  return &SecondaryQrcodeLoginServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewSecondaryQrcodeLoginServiceClient(c thrift.TClient) *SecondaryQrcodeLoginServiceClient {
  return &SecondaryQrcodeLoginServiceClient{
    c: c,
  }
}

func (p *SecondaryQrcodeLoginServiceClient) Client_() thrift.TClient {
  return p.c
}
// Parameters:
//  - Request
func (p *SecondaryQrcodeLoginServiceClient) CreateSession(ctx context.Context, request *CreateQrSessionRequest) (r *CreateQrSessionResponse, err error) {
  var _args884 SecondaryQrcodeLoginServiceCreateSessionArgs
  _args884.Request = request
  var _result885 SecondaryQrcodeLoginServiceCreateSessionResult
  if err = p.Client_().Call(ctx, "createSession", &_args884, &_result885); err != nil {
    return
  }
  switch {
  case _result885.E!= nil:
    return r, _result885.E
  }

  return _result885.GetSuccess(), nil
}

// Parameters:
//  - Request
func (p *SecondaryQrcodeLoginServiceClient) CreateQrCode(ctx context.Context, request *CreateQrCodeRequest) (r *CreateQrCodeResponse, err error) {
  var _args886 SecondaryQrcodeLoginServiceCreateQrCodeArgs
  _args886.Request = request
  var _result887 SecondaryQrcodeLoginServiceCreateQrCodeResult
  if err = p.Client_().Call(ctx, "createQrCode", &_args886, &_result887); err != nil {
    return
  }
  switch {
  case _result887.E!= nil:
    return r, _result887.E
  }

  return _result887.GetSuccess(), nil
}

// Parameters:
//  - Request
func (p *SecondaryQrcodeLoginServiceClient) CreatePinCode(ctx context.Context, request *CreatePinCodeRequest) (r *CreatePinCodeResponse, err error) {
  var _args888 SecondaryQrcodeLoginServiceCreatePinCodeArgs
  _args888.Request = request
  var _result889 SecondaryQrcodeLoginServiceCreatePinCodeResult
  if err = p.Client_().Call(ctx, "createPinCode", &_args888, &_result889); err != nil {
    return
  }
  switch {
  case _result889.E!= nil:
    return r, _result889.E
  }

  return _result889.GetSuccess(), nil
}

// Parameters:
//  - Request
func (p *SecondaryQrcodeLoginServiceClient) QrCodeLogin(ctx context.Context, request *QrCodeLoginRequest) (r *QrCodeLoginResponse, err error) {
  var _args890 SecondaryQrcodeLoginServiceQrCodeLoginArgs
  _args890.Request = request
  var _result891 SecondaryQrcodeLoginServiceQrCodeLoginResult
  if err = p.Client_().Call(ctx, "qrCodeLogin", &_args890, &_result891); err != nil {
    return
  }
  switch {
  case _result891.E!= nil:
    return r, _result891.E
  }

  return _result891.GetSuccess(), nil
}

// Parameters:
//  - Request
func (p *SecondaryQrcodeLoginServiceClient) VerifyCertificate(ctx context.Context, request *VerifyCertificateRequest) (err error) {
  var _args892 SecondaryQrcodeLoginServiceVerifyCertificateArgs
  _args892.Request = request
  var _result893 SecondaryQrcodeLoginServiceVerifyCertificateResult
  if err = p.Client_().Call(ctx, "verifyCertificate", &_args892, &_result893); err != nil {
    return
  }
  switch {
  case _result893.E!= nil:
    return _result893.E
  }

  return nil
}

type SecondaryQrcodeLoginServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler SecondaryQrcodeLoginService
}

func (p *SecondaryQrcodeLoginServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *SecondaryQrcodeLoginServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *SecondaryQrcodeLoginServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewSecondaryQrcodeLoginServiceProcessor(handler SecondaryQrcodeLoginService) *SecondaryQrcodeLoginServiceProcessor {

  self894 := &SecondaryQrcodeLoginServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self894.processorMap["createSession"] = &secondaryQrcodeLoginServiceProcessorCreateSession{handler:handler}
  self894.processorMap["createQrCode"] = &secondaryQrcodeLoginServiceProcessorCreateQrCode{handler:handler}
  self894.processorMap["createPinCode"] = &secondaryQrcodeLoginServiceProcessorCreatePinCode{handler:handler}
  self894.processorMap["qrCodeLogin"] = &secondaryQrcodeLoginServiceProcessorQrCodeLogin{handler:handler}
  self894.processorMap["verifyCertificate"] = &secondaryQrcodeLoginServiceProcessorVerifyCertificate{handler:handler}
return self894
}

func (p *SecondaryQrcodeLoginServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x895 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x895.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush(ctx)
  return false, x895

}

type secondaryQrcodeLoginServiceProcessorCreateSession struct {
  handler SecondaryQrcodeLoginService
}

func (p *secondaryQrcodeLoginServiceProcessorCreateSession) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := SecondaryQrcodeLoginServiceCreateSessionArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("createSession", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := SecondaryQrcodeLoginServiceCreateSessionResult{}
var retval *CreateQrSessionResponse
  var err2 error
  if retval, err2 = p.handler.CreateSession(ctx, args.Request); err2 != nil {
  switch v := err2.(type) {
    case *SecondaryQrCodeException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing createSession: " + err2.Error())
    oprot.WriteMessageBegin("createSession", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("createSession", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type secondaryQrcodeLoginServiceProcessorCreateQrCode struct {
  handler SecondaryQrcodeLoginService
}

func (p *secondaryQrcodeLoginServiceProcessorCreateQrCode) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := SecondaryQrcodeLoginServiceCreateQrCodeArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("createQrCode", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := SecondaryQrcodeLoginServiceCreateQrCodeResult{}
var retval *CreateQrCodeResponse
  var err2 error
  if retval, err2 = p.handler.CreateQrCode(ctx, args.Request); err2 != nil {
  switch v := err2.(type) {
    case *SecondaryQrCodeException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing createQrCode: " + err2.Error())
    oprot.WriteMessageBegin("createQrCode", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("createQrCode", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type secondaryQrcodeLoginServiceProcessorCreatePinCode struct {
  handler SecondaryQrcodeLoginService
}

func (p *secondaryQrcodeLoginServiceProcessorCreatePinCode) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := SecondaryQrcodeLoginServiceCreatePinCodeArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("createPinCode", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := SecondaryQrcodeLoginServiceCreatePinCodeResult{}
var retval *CreatePinCodeResponse
  var err2 error
  if retval, err2 = p.handler.CreatePinCode(ctx, args.Request); err2 != nil {
  switch v := err2.(type) {
    case *SecondaryQrCodeException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing createPinCode: " + err2.Error())
    oprot.WriteMessageBegin("createPinCode", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("createPinCode", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type secondaryQrcodeLoginServiceProcessorQrCodeLogin struct {
  handler SecondaryQrcodeLoginService
}

func (p *secondaryQrcodeLoginServiceProcessorQrCodeLogin) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := SecondaryQrcodeLoginServiceQrCodeLoginArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("qrCodeLogin", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := SecondaryQrcodeLoginServiceQrCodeLoginResult{}
var retval *QrCodeLoginResponse
  var err2 error
  if retval, err2 = p.handler.QrCodeLogin(ctx, args.Request); err2 != nil {
  switch v := err2.(type) {
    case *SecondaryQrCodeException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing qrCodeLogin: " + err2.Error())
    oprot.WriteMessageBegin("qrCodeLogin", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("qrCodeLogin", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type secondaryQrcodeLoginServiceProcessorVerifyCertificate struct {
  handler SecondaryQrcodeLoginService
}

func (p *secondaryQrcodeLoginServiceProcessorVerifyCertificate) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := SecondaryQrcodeLoginServiceVerifyCertificateArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("verifyCertificate", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := SecondaryQrcodeLoginServiceVerifyCertificateResult{}
  var err2 error
  if err2 = p.handler.VerifyCertificate(ctx, args.Request); err2 != nil {
  switch v := err2.(type) {
    case *SecondaryQrCodeException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing verifyCertificate: " + err2.Error())
    oprot.WriteMessageBegin("verifyCertificate", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("verifyCertificate", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Request
type SecondaryQrcodeLoginServiceCreateSessionArgs struct {
  Request *CreateQrSessionRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewSecondaryQrcodeLoginServiceCreateSessionArgs() *SecondaryQrcodeLoginServiceCreateSessionArgs {
  return &SecondaryQrcodeLoginServiceCreateSessionArgs{}
}

var SecondaryQrcodeLoginServiceCreateSessionArgs_Request_DEFAULT *CreateQrSessionRequest
func (p *SecondaryQrcodeLoginServiceCreateSessionArgs) GetRequest() *CreateQrSessionRequest {
  if !p.IsSetRequest() {
    return SecondaryQrcodeLoginServiceCreateSessionArgs_Request_DEFAULT
  }
return p.Request
}
func (p *SecondaryQrcodeLoginServiceCreateSessionArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *SecondaryQrcodeLoginServiceCreateSessionArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SecondaryQrcodeLoginServiceCreateSessionArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Request = &CreateQrSessionRequest{}
  if err := p.Request.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *SecondaryQrcodeLoginServiceCreateSessionArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("createSession_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SecondaryQrcodeLoginServiceCreateSessionArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *SecondaryQrcodeLoginServiceCreateSessionArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SecondaryQrcodeLoginServiceCreateSessionArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type SecondaryQrcodeLoginServiceCreateSessionResult struct {
  Success *CreateQrSessionResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *SecondaryQrCodeException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewSecondaryQrcodeLoginServiceCreateSessionResult() *SecondaryQrcodeLoginServiceCreateSessionResult {
  return &SecondaryQrcodeLoginServiceCreateSessionResult{}
}

var SecondaryQrcodeLoginServiceCreateSessionResult_Success_DEFAULT *CreateQrSessionResponse
func (p *SecondaryQrcodeLoginServiceCreateSessionResult) GetSuccess() *CreateQrSessionResponse {
  if !p.IsSetSuccess() {
    return SecondaryQrcodeLoginServiceCreateSessionResult_Success_DEFAULT
  }
return p.Success
}
var SecondaryQrcodeLoginServiceCreateSessionResult_E_DEFAULT *SecondaryQrCodeException
func (p *SecondaryQrcodeLoginServiceCreateSessionResult) GetE() *SecondaryQrCodeException {
  if !p.IsSetE() {
    return SecondaryQrcodeLoginServiceCreateSessionResult_E_DEFAULT
  }
return p.E
}
func (p *SecondaryQrcodeLoginServiceCreateSessionResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *SecondaryQrcodeLoginServiceCreateSessionResult) IsSetE() bool {
  return p.E != nil
}

func (p *SecondaryQrcodeLoginServiceCreateSessionResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SecondaryQrcodeLoginServiceCreateSessionResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &CreateQrSessionResponse{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *SecondaryQrcodeLoginServiceCreateSessionResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &SecondaryQrCodeException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *SecondaryQrcodeLoginServiceCreateSessionResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("createSession_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SecondaryQrcodeLoginServiceCreateSessionResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *SecondaryQrcodeLoginServiceCreateSessionResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *SecondaryQrcodeLoginServiceCreateSessionResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SecondaryQrcodeLoginServiceCreateSessionResult(%+v)", *p)
}

// Attributes:
//  - Request
type SecondaryQrcodeLoginServiceCreateQrCodeArgs struct {
  Request *CreateQrCodeRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewSecondaryQrcodeLoginServiceCreateQrCodeArgs() *SecondaryQrcodeLoginServiceCreateQrCodeArgs {
  return &SecondaryQrcodeLoginServiceCreateQrCodeArgs{}
}

var SecondaryQrcodeLoginServiceCreateQrCodeArgs_Request_DEFAULT *CreateQrCodeRequest
func (p *SecondaryQrcodeLoginServiceCreateQrCodeArgs) GetRequest() *CreateQrCodeRequest {
  if !p.IsSetRequest() {
    return SecondaryQrcodeLoginServiceCreateQrCodeArgs_Request_DEFAULT
  }
return p.Request
}
func (p *SecondaryQrcodeLoginServiceCreateQrCodeArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *SecondaryQrcodeLoginServiceCreateQrCodeArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SecondaryQrcodeLoginServiceCreateQrCodeArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Request = &CreateQrCodeRequest{}
  if err := p.Request.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *SecondaryQrcodeLoginServiceCreateQrCodeArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("createQrCode_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SecondaryQrcodeLoginServiceCreateQrCodeArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *SecondaryQrcodeLoginServiceCreateQrCodeArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SecondaryQrcodeLoginServiceCreateQrCodeArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type SecondaryQrcodeLoginServiceCreateQrCodeResult struct {
  Success *CreateQrCodeResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *SecondaryQrCodeException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewSecondaryQrcodeLoginServiceCreateQrCodeResult() *SecondaryQrcodeLoginServiceCreateQrCodeResult {
  return &SecondaryQrcodeLoginServiceCreateQrCodeResult{}
}

var SecondaryQrcodeLoginServiceCreateQrCodeResult_Success_DEFAULT *CreateQrCodeResponse
func (p *SecondaryQrcodeLoginServiceCreateQrCodeResult) GetSuccess() *CreateQrCodeResponse {
  if !p.IsSetSuccess() {
    return SecondaryQrcodeLoginServiceCreateQrCodeResult_Success_DEFAULT
  }
return p.Success
}
var SecondaryQrcodeLoginServiceCreateQrCodeResult_E_DEFAULT *SecondaryQrCodeException
func (p *SecondaryQrcodeLoginServiceCreateQrCodeResult) GetE() *SecondaryQrCodeException {
  if !p.IsSetE() {
    return SecondaryQrcodeLoginServiceCreateQrCodeResult_E_DEFAULT
  }
return p.E
}
func (p *SecondaryQrcodeLoginServiceCreateQrCodeResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *SecondaryQrcodeLoginServiceCreateQrCodeResult) IsSetE() bool {
  return p.E != nil
}

func (p *SecondaryQrcodeLoginServiceCreateQrCodeResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SecondaryQrcodeLoginServiceCreateQrCodeResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &CreateQrCodeResponse{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *SecondaryQrcodeLoginServiceCreateQrCodeResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &SecondaryQrCodeException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *SecondaryQrcodeLoginServiceCreateQrCodeResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("createQrCode_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SecondaryQrcodeLoginServiceCreateQrCodeResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *SecondaryQrcodeLoginServiceCreateQrCodeResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *SecondaryQrcodeLoginServiceCreateQrCodeResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SecondaryQrcodeLoginServiceCreateQrCodeResult(%+v)", *p)
}

// Attributes:
//  - Request
type SecondaryQrcodeLoginServiceCreatePinCodeArgs struct {
  Request *CreatePinCodeRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewSecondaryQrcodeLoginServiceCreatePinCodeArgs() *SecondaryQrcodeLoginServiceCreatePinCodeArgs {
  return &SecondaryQrcodeLoginServiceCreatePinCodeArgs{}
}

var SecondaryQrcodeLoginServiceCreatePinCodeArgs_Request_DEFAULT *CreatePinCodeRequest
func (p *SecondaryQrcodeLoginServiceCreatePinCodeArgs) GetRequest() *CreatePinCodeRequest {
  if !p.IsSetRequest() {
    return SecondaryQrcodeLoginServiceCreatePinCodeArgs_Request_DEFAULT
  }
return p.Request
}
func (p *SecondaryQrcodeLoginServiceCreatePinCodeArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *SecondaryQrcodeLoginServiceCreatePinCodeArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SecondaryQrcodeLoginServiceCreatePinCodeArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Request = &CreatePinCodeRequest{}
  if err := p.Request.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *SecondaryQrcodeLoginServiceCreatePinCodeArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("createPinCode_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SecondaryQrcodeLoginServiceCreatePinCodeArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *SecondaryQrcodeLoginServiceCreatePinCodeArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SecondaryQrcodeLoginServiceCreatePinCodeArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type SecondaryQrcodeLoginServiceCreatePinCodeResult struct {
  Success *CreatePinCodeResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *SecondaryQrCodeException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewSecondaryQrcodeLoginServiceCreatePinCodeResult() *SecondaryQrcodeLoginServiceCreatePinCodeResult {
  return &SecondaryQrcodeLoginServiceCreatePinCodeResult{}
}

var SecondaryQrcodeLoginServiceCreatePinCodeResult_Success_DEFAULT *CreatePinCodeResponse
func (p *SecondaryQrcodeLoginServiceCreatePinCodeResult) GetSuccess() *CreatePinCodeResponse {
  if !p.IsSetSuccess() {
    return SecondaryQrcodeLoginServiceCreatePinCodeResult_Success_DEFAULT
  }
return p.Success
}
var SecondaryQrcodeLoginServiceCreatePinCodeResult_E_DEFAULT *SecondaryQrCodeException
func (p *SecondaryQrcodeLoginServiceCreatePinCodeResult) GetE() *SecondaryQrCodeException {
  if !p.IsSetE() {
    return SecondaryQrcodeLoginServiceCreatePinCodeResult_E_DEFAULT
  }
return p.E
}
func (p *SecondaryQrcodeLoginServiceCreatePinCodeResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *SecondaryQrcodeLoginServiceCreatePinCodeResult) IsSetE() bool {
  return p.E != nil
}

func (p *SecondaryQrcodeLoginServiceCreatePinCodeResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SecondaryQrcodeLoginServiceCreatePinCodeResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &CreatePinCodeResponse{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *SecondaryQrcodeLoginServiceCreatePinCodeResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &SecondaryQrCodeException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *SecondaryQrcodeLoginServiceCreatePinCodeResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("createPinCode_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SecondaryQrcodeLoginServiceCreatePinCodeResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *SecondaryQrcodeLoginServiceCreatePinCodeResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *SecondaryQrcodeLoginServiceCreatePinCodeResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SecondaryQrcodeLoginServiceCreatePinCodeResult(%+v)", *p)
}

// Attributes:
//  - Request
type SecondaryQrcodeLoginServiceQrCodeLoginArgs struct {
  Request *QrCodeLoginRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewSecondaryQrcodeLoginServiceQrCodeLoginArgs() *SecondaryQrcodeLoginServiceQrCodeLoginArgs {
  return &SecondaryQrcodeLoginServiceQrCodeLoginArgs{}
}

var SecondaryQrcodeLoginServiceQrCodeLoginArgs_Request_DEFAULT *QrCodeLoginRequest
func (p *SecondaryQrcodeLoginServiceQrCodeLoginArgs) GetRequest() *QrCodeLoginRequest {
  if !p.IsSetRequest() {
    return SecondaryQrcodeLoginServiceQrCodeLoginArgs_Request_DEFAULT
  }
return p.Request
}
func (p *SecondaryQrcodeLoginServiceQrCodeLoginArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *SecondaryQrcodeLoginServiceQrCodeLoginArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SecondaryQrcodeLoginServiceQrCodeLoginArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Request = &QrCodeLoginRequest{}
  if err := p.Request.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *SecondaryQrcodeLoginServiceQrCodeLoginArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("qrCodeLogin_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SecondaryQrcodeLoginServiceQrCodeLoginArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *SecondaryQrcodeLoginServiceQrCodeLoginArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SecondaryQrcodeLoginServiceQrCodeLoginArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - E
type SecondaryQrcodeLoginServiceQrCodeLoginResult struct {
  Success *QrCodeLoginResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
  E *SecondaryQrCodeException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewSecondaryQrcodeLoginServiceQrCodeLoginResult() *SecondaryQrcodeLoginServiceQrCodeLoginResult {
  return &SecondaryQrcodeLoginServiceQrCodeLoginResult{}
}

var SecondaryQrcodeLoginServiceQrCodeLoginResult_Success_DEFAULT *QrCodeLoginResponse
func (p *SecondaryQrcodeLoginServiceQrCodeLoginResult) GetSuccess() *QrCodeLoginResponse {
  if !p.IsSetSuccess() {
    return SecondaryQrcodeLoginServiceQrCodeLoginResult_Success_DEFAULT
  }
return p.Success
}
var SecondaryQrcodeLoginServiceQrCodeLoginResult_E_DEFAULT *SecondaryQrCodeException
func (p *SecondaryQrcodeLoginServiceQrCodeLoginResult) GetE() *SecondaryQrCodeException {
  if !p.IsSetE() {
    return SecondaryQrcodeLoginServiceQrCodeLoginResult_E_DEFAULT
  }
return p.E
}
func (p *SecondaryQrcodeLoginServiceQrCodeLoginResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *SecondaryQrcodeLoginServiceQrCodeLoginResult) IsSetE() bool {
  return p.E != nil
}

func (p *SecondaryQrcodeLoginServiceQrCodeLoginResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SecondaryQrcodeLoginServiceQrCodeLoginResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &QrCodeLoginResponse{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *SecondaryQrcodeLoginServiceQrCodeLoginResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &SecondaryQrCodeException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *SecondaryQrcodeLoginServiceQrCodeLoginResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("qrCodeLogin_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SecondaryQrcodeLoginServiceQrCodeLoginResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *SecondaryQrcodeLoginServiceQrCodeLoginResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *SecondaryQrcodeLoginServiceQrCodeLoginResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SecondaryQrcodeLoginServiceQrCodeLoginResult(%+v)", *p)
}

// Attributes:
//  - Request
type SecondaryQrcodeLoginServiceVerifyCertificateArgs struct {
  Request *VerifyCertificateRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewSecondaryQrcodeLoginServiceVerifyCertificateArgs() *SecondaryQrcodeLoginServiceVerifyCertificateArgs {
  return &SecondaryQrcodeLoginServiceVerifyCertificateArgs{}
}

var SecondaryQrcodeLoginServiceVerifyCertificateArgs_Request_DEFAULT *VerifyCertificateRequest
func (p *SecondaryQrcodeLoginServiceVerifyCertificateArgs) GetRequest() *VerifyCertificateRequest {
  if !p.IsSetRequest() {
    return SecondaryQrcodeLoginServiceVerifyCertificateArgs_Request_DEFAULT
  }
return p.Request
}
func (p *SecondaryQrcodeLoginServiceVerifyCertificateArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *SecondaryQrcodeLoginServiceVerifyCertificateArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SecondaryQrcodeLoginServiceVerifyCertificateArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Request = &VerifyCertificateRequest{}
  if err := p.Request.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *SecondaryQrcodeLoginServiceVerifyCertificateArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("verifyCertificate_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SecondaryQrcodeLoginServiceVerifyCertificateArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *SecondaryQrcodeLoginServiceVerifyCertificateArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SecondaryQrcodeLoginServiceVerifyCertificateArgs(%+v)", *p)
}

// Attributes:
//  - E
type SecondaryQrcodeLoginServiceVerifyCertificateResult struct {
  E *SecondaryQrCodeException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewSecondaryQrcodeLoginServiceVerifyCertificateResult() *SecondaryQrcodeLoginServiceVerifyCertificateResult {
  return &SecondaryQrcodeLoginServiceVerifyCertificateResult{}
}

var SecondaryQrcodeLoginServiceVerifyCertificateResult_E_DEFAULT *SecondaryQrCodeException
func (p *SecondaryQrcodeLoginServiceVerifyCertificateResult) GetE() *SecondaryQrCodeException {
  if !p.IsSetE() {
    return SecondaryQrcodeLoginServiceVerifyCertificateResult_E_DEFAULT
  }
return p.E
}
func (p *SecondaryQrcodeLoginServiceVerifyCertificateResult) IsSetE() bool {
  return p.E != nil
}

func (p *SecondaryQrcodeLoginServiceVerifyCertificateResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SecondaryQrcodeLoginServiceVerifyCertificateResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &SecondaryQrCodeException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *SecondaryQrcodeLoginServiceVerifyCertificateResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("verifyCertificate_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SecondaryQrcodeLoginServiceVerifyCertificateResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *SecondaryQrcodeLoginServiceVerifyCertificateResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SecondaryQrcodeLoginServiceVerifyCertificateResult(%+v)", *p)
}


type SecondaryQrCodeLoginPermitNoticeService interface {
  // Parameters:
  //  - Request
  CheckPinCodeVerified(ctx context.Context, request *CheckPinCodeVerifiedRequest) (err error)
  // Parameters:
  //  - Request
  CheckQrCodeVerified(ctx context.Context, request *CheckQrCodeVerifiedRequest) (err error)
}

type SecondaryQrCodeLoginPermitNoticeServiceClient struct {
  c thrift.TClient
}

func NewSecondaryQrCodeLoginPermitNoticeServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *SecondaryQrCodeLoginPermitNoticeServiceClient {
  return &SecondaryQrCodeLoginPermitNoticeServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewSecondaryQrCodeLoginPermitNoticeServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *SecondaryQrCodeLoginPermitNoticeServiceClient {
  return &SecondaryQrCodeLoginPermitNoticeServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewSecondaryQrCodeLoginPermitNoticeServiceClient(c thrift.TClient) *SecondaryQrCodeLoginPermitNoticeServiceClient {
  return &SecondaryQrCodeLoginPermitNoticeServiceClient{
    c: c,
  }
}

func (p *SecondaryQrCodeLoginPermitNoticeServiceClient) Client_() thrift.TClient {
  return p.c
}
// Parameters:
//  - Request
func (p *SecondaryQrCodeLoginPermitNoticeServiceClient) CheckPinCodeVerified(ctx context.Context, request *CheckPinCodeVerifiedRequest) (err error) {
  var _args926 SecondaryQrCodeLoginPermitNoticeServiceCheckPinCodeVerifiedArgs
  _args926.Request = request
  var _result927 SecondaryQrCodeLoginPermitNoticeServiceCheckPinCodeVerifiedResult
  if err = p.Client_().Call(ctx, "checkPinCodeVerified", &_args926, &_result927); err != nil {
    return
  }
  switch {
  case _result927.E!= nil:
    return _result927.E
  }

  return nil
}

// Parameters:
//  - Request
func (p *SecondaryQrCodeLoginPermitNoticeServiceClient) CheckQrCodeVerified(ctx context.Context, request *CheckQrCodeVerifiedRequest) (err error) {
  var _args928 SecondaryQrCodeLoginPermitNoticeServiceCheckQrCodeVerifiedArgs
  _args928.Request = request
  var _result929 SecondaryQrCodeLoginPermitNoticeServiceCheckQrCodeVerifiedResult
  if err = p.Client_().Call(ctx, "checkQrCodeVerified", &_args928, &_result929); err != nil {
    return
  }
  switch {
  case _result929.E!= nil:
    return _result929.E
  }

  return nil
}

type SecondaryQrCodeLoginPermitNoticeServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler SecondaryQrCodeLoginPermitNoticeService
}

func (p *SecondaryQrCodeLoginPermitNoticeServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *SecondaryQrCodeLoginPermitNoticeServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *SecondaryQrCodeLoginPermitNoticeServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewSecondaryQrCodeLoginPermitNoticeServiceProcessor(handler SecondaryQrCodeLoginPermitNoticeService) *SecondaryQrCodeLoginPermitNoticeServiceProcessor {

  self930 := &SecondaryQrCodeLoginPermitNoticeServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self930.processorMap["checkPinCodeVerified"] = &secondaryQrCodeLoginPermitNoticeServiceProcessorCheckPinCodeVerified{handler:handler}
  self930.processorMap["checkQrCodeVerified"] = &secondaryQrCodeLoginPermitNoticeServiceProcessorCheckQrCodeVerified{handler:handler}
return self930
}

func (p *SecondaryQrCodeLoginPermitNoticeServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x931 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x931.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush(ctx)
  return false, x931

}

type secondaryQrCodeLoginPermitNoticeServiceProcessorCheckPinCodeVerified struct {
  handler SecondaryQrCodeLoginPermitNoticeService
}

func (p *secondaryQrCodeLoginPermitNoticeServiceProcessorCheckPinCodeVerified) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := SecondaryQrCodeLoginPermitNoticeServiceCheckPinCodeVerifiedArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("checkPinCodeVerified", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := SecondaryQrCodeLoginPermitNoticeServiceCheckPinCodeVerifiedResult{}
  var err2 error
  if err2 = p.handler.CheckPinCodeVerified(ctx, args.Request); err2 != nil {
  switch v := err2.(type) {
    case *SecondaryQrCodeException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing checkPinCodeVerified: " + err2.Error())
    oprot.WriteMessageBegin("checkPinCodeVerified", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("checkPinCodeVerified", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type secondaryQrCodeLoginPermitNoticeServiceProcessorCheckQrCodeVerified struct {
  handler SecondaryQrCodeLoginPermitNoticeService
}

func (p *secondaryQrCodeLoginPermitNoticeServiceProcessorCheckQrCodeVerified) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := SecondaryQrCodeLoginPermitNoticeServiceCheckQrCodeVerifiedArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("checkQrCodeVerified", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := SecondaryQrCodeLoginPermitNoticeServiceCheckQrCodeVerifiedResult{}
  var err2 error
  if err2 = p.handler.CheckQrCodeVerified(ctx, args.Request); err2 != nil {
  switch v := err2.(type) {
    case *SecondaryQrCodeException:
  result.E = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing checkQrCodeVerified: " + err2.Error())
    oprot.WriteMessageBegin("checkQrCodeVerified", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  }
  if err2 = oprot.WriteMessageBegin("checkQrCodeVerified", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Request
type SecondaryQrCodeLoginPermitNoticeServiceCheckPinCodeVerifiedArgs struct {
  Request *CheckPinCodeVerifiedRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewSecondaryQrCodeLoginPermitNoticeServiceCheckPinCodeVerifiedArgs() *SecondaryQrCodeLoginPermitNoticeServiceCheckPinCodeVerifiedArgs {
  return &SecondaryQrCodeLoginPermitNoticeServiceCheckPinCodeVerifiedArgs{}
}

var SecondaryQrCodeLoginPermitNoticeServiceCheckPinCodeVerifiedArgs_Request_DEFAULT *CheckPinCodeVerifiedRequest
func (p *SecondaryQrCodeLoginPermitNoticeServiceCheckPinCodeVerifiedArgs) GetRequest() *CheckPinCodeVerifiedRequest {
  if !p.IsSetRequest() {
    return SecondaryQrCodeLoginPermitNoticeServiceCheckPinCodeVerifiedArgs_Request_DEFAULT
  }
return p.Request
}
func (p *SecondaryQrCodeLoginPermitNoticeServiceCheckPinCodeVerifiedArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *SecondaryQrCodeLoginPermitNoticeServiceCheckPinCodeVerifiedArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SecondaryQrCodeLoginPermitNoticeServiceCheckPinCodeVerifiedArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Request = &CheckPinCodeVerifiedRequest{}
  if err := p.Request.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *SecondaryQrCodeLoginPermitNoticeServiceCheckPinCodeVerifiedArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("checkPinCodeVerified_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SecondaryQrCodeLoginPermitNoticeServiceCheckPinCodeVerifiedArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *SecondaryQrCodeLoginPermitNoticeServiceCheckPinCodeVerifiedArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SecondaryQrCodeLoginPermitNoticeServiceCheckPinCodeVerifiedArgs(%+v)", *p)
}

// Attributes:
//  - E
type SecondaryQrCodeLoginPermitNoticeServiceCheckPinCodeVerifiedResult struct {
  E *SecondaryQrCodeException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewSecondaryQrCodeLoginPermitNoticeServiceCheckPinCodeVerifiedResult() *SecondaryQrCodeLoginPermitNoticeServiceCheckPinCodeVerifiedResult {
  return &SecondaryQrCodeLoginPermitNoticeServiceCheckPinCodeVerifiedResult{}
}

var SecondaryQrCodeLoginPermitNoticeServiceCheckPinCodeVerifiedResult_E_DEFAULT *SecondaryQrCodeException
func (p *SecondaryQrCodeLoginPermitNoticeServiceCheckPinCodeVerifiedResult) GetE() *SecondaryQrCodeException {
  if !p.IsSetE() {
    return SecondaryQrCodeLoginPermitNoticeServiceCheckPinCodeVerifiedResult_E_DEFAULT
  }
return p.E
}
func (p *SecondaryQrCodeLoginPermitNoticeServiceCheckPinCodeVerifiedResult) IsSetE() bool {
  return p.E != nil
}

func (p *SecondaryQrCodeLoginPermitNoticeServiceCheckPinCodeVerifiedResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SecondaryQrCodeLoginPermitNoticeServiceCheckPinCodeVerifiedResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &SecondaryQrCodeException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *SecondaryQrCodeLoginPermitNoticeServiceCheckPinCodeVerifiedResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("checkPinCodeVerified_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SecondaryQrCodeLoginPermitNoticeServiceCheckPinCodeVerifiedResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *SecondaryQrCodeLoginPermitNoticeServiceCheckPinCodeVerifiedResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SecondaryQrCodeLoginPermitNoticeServiceCheckPinCodeVerifiedResult(%+v)", *p)
}

// Attributes:
//  - Request
type SecondaryQrCodeLoginPermitNoticeServiceCheckQrCodeVerifiedArgs struct {
  Request *CheckQrCodeVerifiedRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewSecondaryQrCodeLoginPermitNoticeServiceCheckQrCodeVerifiedArgs() *SecondaryQrCodeLoginPermitNoticeServiceCheckQrCodeVerifiedArgs {
  return &SecondaryQrCodeLoginPermitNoticeServiceCheckQrCodeVerifiedArgs{}
}

var SecondaryQrCodeLoginPermitNoticeServiceCheckQrCodeVerifiedArgs_Request_DEFAULT *CheckQrCodeVerifiedRequest
func (p *SecondaryQrCodeLoginPermitNoticeServiceCheckQrCodeVerifiedArgs) GetRequest() *CheckQrCodeVerifiedRequest {
  if !p.IsSetRequest() {
    return SecondaryQrCodeLoginPermitNoticeServiceCheckQrCodeVerifiedArgs_Request_DEFAULT
  }
return p.Request
}
func (p *SecondaryQrCodeLoginPermitNoticeServiceCheckQrCodeVerifiedArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *SecondaryQrCodeLoginPermitNoticeServiceCheckQrCodeVerifiedArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SecondaryQrCodeLoginPermitNoticeServiceCheckQrCodeVerifiedArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Request = &CheckQrCodeVerifiedRequest{}
  if err := p.Request.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *SecondaryQrCodeLoginPermitNoticeServiceCheckQrCodeVerifiedArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("checkQrCodeVerified_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SecondaryQrCodeLoginPermitNoticeServiceCheckQrCodeVerifiedArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *SecondaryQrCodeLoginPermitNoticeServiceCheckQrCodeVerifiedArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SecondaryQrCodeLoginPermitNoticeServiceCheckQrCodeVerifiedArgs(%+v)", *p)
}

// Attributes:
//  - E
type SecondaryQrCodeLoginPermitNoticeServiceCheckQrCodeVerifiedResult struct {
  E *SecondaryQrCodeException `thrift:"e,1" db:"e" json:"e,omitempty"`
}

func NewSecondaryQrCodeLoginPermitNoticeServiceCheckQrCodeVerifiedResult() *SecondaryQrCodeLoginPermitNoticeServiceCheckQrCodeVerifiedResult {
  return &SecondaryQrCodeLoginPermitNoticeServiceCheckQrCodeVerifiedResult{}
}

var SecondaryQrCodeLoginPermitNoticeServiceCheckQrCodeVerifiedResult_E_DEFAULT *SecondaryQrCodeException
func (p *SecondaryQrCodeLoginPermitNoticeServiceCheckQrCodeVerifiedResult) GetE() *SecondaryQrCodeException {
  if !p.IsSetE() {
    return SecondaryQrCodeLoginPermitNoticeServiceCheckQrCodeVerifiedResult_E_DEFAULT
  }
return p.E
}
func (p *SecondaryQrCodeLoginPermitNoticeServiceCheckQrCodeVerifiedResult) IsSetE() bool {
  return p.E != nil
}

func (p *SecondaryQrCodeLoginPermitNoticeServiceCheckQrCodeVerifiedResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SecondaryQrCodeLoginPermitNoticeServiceCheckQrCodeVerifiedResult)  ReadField1(iprot thrift.TProtocol) error {
  p.E = &SecondaryQrCodeException{}
  if err := p.E.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.E), err)
  }
  return nil
}

func (p *SecondaryQrCodeLoginPermitNoticeServiceCheckQrCodeVerifiedResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("checkQrCodeVerified_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SecondaryQrCodeLoginPermitNoticeServiceCheckQrCodeVerifiedResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetE() {
    if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:e: ", p), err) }
    if err := p.E.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.E), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:e: ", p), err) }
  }
  return err
}

func (p *SecondaryQrCodeLoginPermitNoticeServiceCheckQrCodeVerifiedResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SecondaryQrCodeLoginPermitNoticeServiceCheckQrCodeVerifiedResult(%+v)", *p)
}


